{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/next/source/README.rst","path":"README.rst","modified":1,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.old.gif","path":"images/avatar.old.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/emotions/gsq.jpg","path":"images/emotions/gsq.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/emotions/trxc.jpg","path":"images/emotions/trxc.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/es6/es6.png","path":"images/es6/es6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/jqueryOffsetBug/popver.png","path":"images/jqueryOffsetBug/popver.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas2.png","path":"images/images2canvas/canvas2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas5.png","path":"images/images2canvas/canvas5.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas6.png","path":"images/images2canvas/canvas6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas1.png","path":"images/images2canvas/canvas1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/moshi/moshi1.jpg","path":"images/moshi/moshi1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/555.png","path":"images/mobile-adaptive/555.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/666.png","path":"images/mobile-adaptive/666.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071004.png","path":"images/mobile-adaptive/bg2015071004.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071005.png","path":"images/mobile-adaptive/bg2015071005.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071010.png","path":"images/mobile-adaptive/bg2015071010.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/moshi/moshi2.jpg","path":"images/moshi/moshi2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071012.png","path":"images/mobile-adaptive/bg2015071012.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071011.png","path":"images/mobile-adaptive/bg2015071011.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071013.png","path":"images/mobile-adaptive/bg2015071013.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071014.png","path":"images/mobile-adaptive/bg2015071014.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071016.png","path":"images/mobile-adaptive/bg2015071016.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone.png","path":"images/mobile-adaptive/mobile-iPhone.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071015.jpg","path":"images/mobile-adaptive/bg2015071015.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone3.png","path":"images/mobile-adaptive/mobile-iPhone3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone1.png","path":"images/mobile-adaptive/mobile-iPhone1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman1.jpg","path":"images/postman/postman1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman2.jpg","path":"images/postman/postman2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman3.jpg","path":"images/postman/postman3.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman4.jpg","path":"images/postman/postman4.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman5.jpg","path":"images/postman/postman5.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman6.jpg","path":"images/postman/postman6.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/postman/postman7.jpg","path":"images/postman/postman7.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample1.gif","path":"images/requestAnimationFrame/Animexample1.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample2.gif","path":"images/requestAnimationFrame/Animexample2.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/api-login.jpg","path":"images/weixinxiaochenxu/api-login.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/bianyi.png","path":"images/weixinxiaochenxu/bianyi.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/ddd.png","path":"images/weixinxiaochenxu/ddd.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu1.png","path":"images/weixinxiaochenxu/weixinxiaochenxu1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu2.gif","path":"images/weixinxiaochenxu/weixinxiaochenxu2.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu3.gif","path":"images/weixinxiaochenxu/weixinxiaochenxu3.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu4.png","path":"images/weixinxiaochenxu/weixinxiaochenxu4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian1.png","path":"images/yuanxinglian/yuanxinglian1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian2.png","path":"images/yuanxinglian/yuanxinglian2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian3.png","path":"images/yuanxinglian/yuanxinglian3.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/bianyi2.png","path":"images/weixinxiaochenxu/bianyi2.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/block.png","path":"images/weixinxiaochenxu/block.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/300958496962833.png","path":"images/mobile-adaptive/300958496962833.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone4.gif","path":"images/mobile-adaptive/mobile-iPhone4.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas.png","path":"images/images2canvas/canvas.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas3.png","path":"images/images2canvas/canvas3.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas4.png","path":"images/images2canvas/canvas4.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/images2canvas/canvas7.png","path":"images/images2canvas/canvas7.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071006.png","path":"images/mobile-adaptive/bg2015071006.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone6.gif","path":"images/mobile-adaptive/mobile-iPhone6.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone2.gif","path":"images/mobile-adaptive/mobile-iPhone2.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone5.gif","path":"images/mobile-adaptive/mobile-iPhone5.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1479806135304},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479806135304},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1479806135307},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479806135307},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1479806135307},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479806135308},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479806135308},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479806135308},{"_id":"themes/next/_config.yml","hash":"7473ae0a651c14ddfe2c7154392a207e1921152d","modified":1492999196367},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1479806135309},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1479806135309},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1479806135322},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479806135305},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479806135305},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1479806135309},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1479806135309},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1479806135310},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1479806135310},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1479806135310},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1479806135310},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1479806135311},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3e13c061884c2475b12df2c49c83932b239f2338","modified":1526884760719},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1479806135311},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1479806135311},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1479806135311},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479806135321},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1479806135310},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479806135321},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1479806135321},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479806135321},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479806135321},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479806135322},{"_id":"themes/next/source/CNAME","hash":"972fffa72fb36b88870ce90376e36117fe26aedb","modified":1488517585196},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479806135321},{"_id":"themes/next/source/README.rst","hash":"345e3b09e1ff52b322f721e5e20873139b3cabc1","modified":1488518994229},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1479806135383},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479806135383},{"_id":"source/tags/index.md","hash":"2c95031ab8e4fde14d4115d656346917ad03bcac","modified":1479806135304},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479806135383},{"_id":"source/categories/index.md","hash":"8943054d91f0550ba6a01cdd1a530640a737f03f","modified":1479806135303},{"_id":"source/_posts/ES6新特性初探.md","hash":"07b7c01ab6ca652d1d14e2b0d1bbfc3f38bfe8be","modified":1498524978978},{"_id":"source/_posts/github以及github-page访问缓慢的解决办法.md","hash":"f71065d6cf406c6dad4547b576ff6c3ec4c90d81","modified":1480491176678},{"_id":"source/_posts/images-2-canvas.md","hash":"852e30e97627582bda371ff9fb7e2c83a53c681e","modified":1498524914026},{"_id":"source/_posts/images-2-canvas2.md","hash":"20b4524013f24cf896d217982ef7cabf02e1936e","modified":1498524898506},{"_id":"source/_posts/impress简易教程.md","hash":"f822f3fade955df147b45c02c8e8bdc2e0d821d0","modified":1498524883862},{"_id":"source/_posts/iphone-wechat-charset-bug.md","hash":"e5cf522c77de04a65700fcf996f3639dfa21fea1","modified":1536051153539},{"_id":"source/_posts/jqueryOffsetBug.md","hash":"314a2ed36e0338fadee0b45cc4e22fef297f54cd","modified":1520227587768},{"_id":"source/_posts/flex-mobile.md","hash":"5858bee2c7db2cc8f9cbd72730bdd261c96a40f0","modified":1548135634574},{"_id":"source/_posts/js继承的方式和意义.md","hash":"135c9aee52591114510ae6a2a696dda1c9fa6089","modified":1498524820095},{"_id":"source/_posts/mobile-adaptive.md","hash":"afe3bf5c00898f5077de7da339d0d2fcf7f6fe98","modified":1498532324776},{"_id":"source/_posts/mobile-develop-teach.md","hash":"e659206305120a625891342550aef5fcd48faac0","modified":1547608434616},{"_id":"source/_posts/postman奇技淫巧.md","hash":"d189948fe1ab08e19bcb13daba0aeb95d985880b","modified":1479806135300},{"_id":"source/_posts/miniprogram-share-and-login.md","hash":"c8540f4d871b2d815168eba37cad557918509e0f","modified":1554967182081},{"_id":"source/_posts/requestAnimationFrame-动画-一.md","hash":"71ad8c48b22bd383c7e81e7473b4a7586826173e","modified":1498524763713},{"_id":"source/_posts/wechat-css.md","hash":"3b634de9580db75a4a832095073faf1ce22cc78c","modified":1555481706211},{"_id":"source/_posts/react-share.md","hash":"02288e761695dc191ab5cf07c16cb92a80953dab","modified":1492999395944},{"_id":"source/_posts/用脚本锁住百度云下载加速倒计时-从而实现无限加速.md","hash":"b36642ca52322a0dac9d5947e3b490feb1145b2d","modified":1483666084217},{"_id":"source/_posts/函数式编程-用自带的js原型链方法解决问题.md","hash":"fa700af1fac1ca73e8b8245ca89936e02c443a39","modified":1498525079988},{"_id":"source/_posts/深入理解微信小程序.md","hash":"9a64e37c8f7308aa6f350a246bc0ecc75b865bdc","modified":1498525057087},{"_id":"source/_posts/第一篇博客.md","hash":"f013ec3f166cf589f9b447558759c0db64d54026","modified":1479806135303},{"_id":"source/_posts/关于博客内容的想法.md","hash":"0ac2ca6b279ac30ae8742ee1a845f055754816cb","modified":1479806135301},{"_id":"source/_posts/读书笔记-单例模式.md","hash":"31409e4467150f9c84a5e8043db2bab43c3d7667","modified":1498524997070},{"_id":"themes/next/source/favicon.ico","hash":"7fd8ec7f4eabae2e3f7ac4f481a26f1a4f0d0b95","modified":1479806135345},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135346},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1479806135313},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479806135313},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ab2a9aa5692b673e019e00197555b49e0bcd7107","modified":1526885132894},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1479806135314},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479806135314},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1479806135314},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1479806135314},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1479806135316},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479806135316},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479806135316},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479806135320},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479806135312},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1479806135312},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479806135312},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1479806135312},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1479806135313},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479806135322},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1479806135322},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479806135323},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479806135345},{"_id":"themes/next/source/images/avatar.gif","hash":"390b708822e6db7f497a895befebc2d21fb6bf80","modified":1479806135346},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479806135347},{"_id":"themes/next/source/images/avatar.old.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479806135346},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479806135347},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479806135347},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479806135348},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479806135348},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479806135348},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479806135348},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479806135350},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479806135354},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479806135353},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479806135351},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479806135354},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135317},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135317},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135337},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135337},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135338},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135344},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135345},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479806135314},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479806135315},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479806135315},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479806135315},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1479806135315},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479806135315},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479806135316},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1479806135315},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479806135317},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479806135317},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1479806135317},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1479806135320},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1479806135320},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479806135320},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479806135337},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479806135337},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479806135337},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479806135344},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1479806135344},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1479806135345},{"_id":"themes/next/source/images/emotions/gsq.jpg","hash":"664cf9f97e9eac82f313413230e4df29e3649d2d","modified":1479806135350},{"_id":"themes/next/source/images/emotions/trxc.jpg","hash":"17430632ea12008b4ba90f3da36c43f24966b2d4","modified":1480487029307},{"_id":"themes/next/source/images/es6/es6.png","hash":"c56f13d3d77132716bc2c8b040f1bdf8b626a5a1","modified":1480484365075},{"_id":"themes/next/source/images/jqueryOffsetBug/popver.png","hash":"b6c19af12eba07edc4367f795dd1af6337e1e8a1","modified":1520226110646},{"_id":"themes/next/source/images/images2canvas/canvas2.png","hash":"068e3bf5a64e9a0069365014c06db89fb615ba61","modified":1488526194194},{"_id":"themes/next/source/images/images2canvas/canvas5.png","hash":"8522d40dc8fe2f258a19fdfac886e43e33187ab9","modified":1488526194198},{"_id":"themes/next/source/images/images2canvas/canvas6.png","hash":"4c5aec7083fcf07e4cbf20b88131592cb4980752","modified":1488526194198},{"_id":"themes/next/source/images/images2canvas/canvas1.png","hash":"a54915a9d52a54ee5b3b62e2b938f91aad9b1938","modified":1488526194194},{"_id":"themes/next/source/images/moshi/moshi1.jpg","hash":"962c7b22f42cbf5554e7dffb59cf39983b7286f6","modified":1479806135350},{"_id":"themes/next/source/images/mobile-adaptive/555.png","hash":"0a507564c38e027db067687304010b04afbed4b7","modified":1547604764403},{"_id":"themes/next/source/images/mobile-adaptive/666.png","hash":"f9d8439566067e7ac722d768968bad6c1e40ee56","modified":1547604956952},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071004.png","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1548121258726},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071005.png","hash":"a6cceda7dde8ebc58594dd065e068faee9532331","modified":1548124042451},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071010.png","hash":"49ec2f8667a4908eb703ecfc53bfcbda645c2c5c","modified":1548124379715},{"_id":"themes/next/source/images/moshi/moshi2.jpg","hash":"caf8b913af5daf45a6c9038b5caded01033906d1","modified":1479806135351},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071012.png","hash":"caf8db94cfd01a729a0c55b3b0b6811cc522dd83","modified":1548124555300},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071011.png","hash":"28068f3962f468c5276e09c12eac4f370fd3d026","modified":1548124480826},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071013.png","hash":"9e87d79203b99d60a08f825451b23b877e24981d","modified":1548124656062},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071014.png","hash":"9ced0024eb565cefed11f7205a38ebb54b1b275e","modified":1548124718288},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071016.png","hash":"bafd39cf61f116ae4bce5e44c82fd263cbcf2a71","modified":1548125695151},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone.png","hash":"3ad7538a3ab0db5ffad65c1ddf162fcfb4e5a475","modified":1498469240092},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071015.jpg","hash":"254035268c28893d4d1d967381a82785cc11f668","modified":1548124823279},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone3.png","hash":"cc5822e20845c7a13cb7cddd8bdcc9032baf38d6","modified":1498469240092},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone1.png","hash":"b85f2c886a3da82e9b5f8da01a77ded332b9dd65","modified":1498469240092},{"_id":"themes/next/source/images/postman/postman1.jpg","hash":"1367e20300950d7fb4d183f584d61ad50f75a22f","modified":1479806135351},{"_id":"themes/next/source/images/postman/postman2.jpg","hash":"4532b64ae150d1862e2ff6d0f052c9258bbd6243","modified":1479806135352},{"_id":"themes/next/source/images/postman/postman3.jpg","hash":"8a92c363dae150c35275e068961a0155156b2f92","modified":1479806135352},{"_id":"themes/next/source/images/postman/postman4.jpg","hash":"0a84db8cb14fc2d2a18f6377d09809488e9cae01","modified":1479806135352},{"_id":"themes/next/source/images/postman/postman5.jpg","hash":"8453395bd7ffb261db0f09370bf324470ade429d","modified":1479806135352},{"_id":"themes/next/source/images/postman/postman6.jpg","hash":"77f7ab635d55bf7da3d12e62d5c20410b7f8ae88","modified":1479806135353},{"_id":"themes/next/source/images/postman/postman7.jpg","hash":"8659bd414c9d250b4e4ebbf28192ddaf35c661b1","modified":1479806135353},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample1.gif","hash":"12235bda6bba2afdd42c19a154d59d5f3176e835","modified":1479806135354},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample2.gif","hash":"24a567b42bc0d67378877059457788203cfc42f6","modified":1479806135354},{"_id":"themes/next/source/images/weixinxiaochenxu/api-login.jpg","hash":"88f391544daa077ada77bab685017d37bed80dda","modified":1554961512150},{"_id":"themes/next/source/images/weixinxiaochenxu/bianyi.png","hash":"018c2856bd1fc5d7d7c33b2b153935ddc6dd6aef","modified":1554965330384},{"_id":"themes/next/source/images/weixinxiaochenxu/ddd.png","hash":"2c3f4288a28dd529dba18447b60e346ea72c984d","modified":1554967208475},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu1.png","hash":"be3aa9a8c0a14d9f3f2da1abe9508be009f1bc36","modified":1479868353037},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu2.gif","hash":"f9365cc48749cb60791ddfb611eb8097f9087f7f","modified":1479869204668},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu3.gif","hash":"418ca361aa44751242918299e8e41913aad08751","modified":1479869996693},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu4.png","hash":"ce0a235b492613d866dfbd687866838def2df63b","modified":1479871490144},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian1.png","hash":"700e91578ab8895241df9ac54765a46a9f0ab18e","modified":1479806135355},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian2.png","hash":"92d95e36b79f45564411e84db1dd8a3fe15caf99","modified":1479806135355},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian3.png","hash":"d8909352164449224f0c8a0e454773a35be44530","modified":1479806135355},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479806135356},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479806135356},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479806135356},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479806135356},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479806135357},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479806135357},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1479806135357},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479806135363},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479806135363},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479806135363},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479806135364},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479806135365},{"_id":"themes/next/source/images/weixinxiaochenxu/bianyi2.png","hash":"112c446c5c9433cd5c1b0dbac374e64cee047b4e","modified":1554965431268},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479806135365},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479806135375},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479806135376},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479806135376},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479806135377},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479806135377},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479806135378},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479806135378},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479806135379},{"_id":"themes/next/source/images/weixinxiaochenxu/block.png","hash":"731b2ff05e2abb7888f9365ee5aa4b28c7899738","modified":1555477007505},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479806135379},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479806135382},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479806135382},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479806135382},{"_id":"themes/next/source/images/mobile-adaptive/300958496962833.png","hash":"ba2a364515a3b101d060c4df8c1154e95ed2efd7","modified":1547602962251},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone4.gif","hash":"c2a622563b0e153d985ae086d3a8e4933d4826fd","modified":1498469240092},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479806135376},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1479806135319},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479806135323},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479806135323},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479806135332},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479806135335},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479806135336},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479806135336},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479806135336},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479806135336},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479806135336},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479806135338},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479806135338},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479806135338},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479806135343},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479806135343},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479806135344},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479806135344},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479806135342},{"_id":"themes/next/source/images/images2canvas/canvas.png","hash":"f82c3f43c43d25dbe36aa2d74fade418cb7dd8bd","modified":1488526194194},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479806135357},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479806135359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479806135359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1479806135362},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1479806135362},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1479806135363},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479806135364},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479806135364},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1479806135366},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479806135366},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1479806135368},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1479806135375},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479806135378},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479806135378},{"_id":"themes/next/source/images/images2canvas/canvas3.png","hash":"f52ac329ac8c4bd8ec408eb8cdb2e56532ca142e","modified":1488526194195},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1479806135369},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1479806135370},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1479806135374},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1479806135380},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479806135332},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479806135332},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479806135333},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479806135333},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479806135335},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1479806135335},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1479806135335},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479806135342},{"_id":"themes/next/source/images/images2canvas/canvas4.png","hash":"66a7b1c12017a250b6697e5a15d782a3197f45a1","modified":1488526194197},{"_id":"themes/next/source/images/images2canvas/canvas7.png","hash":"94aa8fd9486162d0252a58272a13481db638eb3f","modified":1488526194200},{"_id":"themes/next/source/images/mobile-adaptive/bg2015071006.png","hash":"67a712714dda62eec3603fb5e5d74a28ce461f13","modified":1548124241418},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone6.gif","hash":"d0aa2b7920bf1d36d3cf005afb69a8109ab76295","modified":1498531727142},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1479806135362},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1479806135361},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1479806135374},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone2.gif","hash":"31e2fe68a47a22044dc639f7449f2508f5237f62","modified":1498469240092},{"_id":"themes/next/source/images/mobile-adaptive/mobile-iPhone5.gif","hash":"7203767c72befa54d5038b01750d060ca3a22741","modified":1498471410235},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1479806135372},{"_id":"public/atom.xml","hash":"6e096f8d53d4752b59a05ef48d455a4c3dad069b","modified":1555481781628},{"_id":"public/search.xml","hash":"19f5a6d5da0d18cdb51e51a41b38be690a1c989e","modified":1555481781649},{"_id":"public/sitemap.xml","hash":"981ec7b271d301fb1c2f3088b667bae5256b8666","modified":1555481781650},{"_id":"public/categories/index.html","hash":"344ebdac42ddf649dacce7eaf81cc263b0b7c8bd","modified":1555481781712},{"_id":"public/archives/2016/12/index.html","hash":"c04dc87bf8925bf80f8547f2bbc5812f13a2730f","modified":1555481781712},{"_id":"public/archives/2017/03/index.html","hash":"5ead613c668617130341e6e2467ae3d429fa1485","modified":1555481781712},{"_id":"public/archives/2017/06/index.html","hash":"abe90256a535b2fa0b9c7fb96fb889faaed880d6","modified":1555481781712},{"_id":"public/tags/hosts/index.html","hash":"a459170cf33fc1b70effbae390a1c267cda95dfc","modified":1555481781712},{"_id":"public/tags/impress/index.html","hash":"86c8a2f64d0bae2713bd09df4e9bc00a4c4969a0","modified":1555481781712},{"_id":"public/tags/js框架/index.html","hash":"3c1bc7258c76c91e57e1ee0a4588fa1befa415f6","modified":1555481781712},{"_id":"public/tags/bug/index.html","hash":"fd37fc8246f9dc9146c0cd8cd1ed1cf98d853e07","modified":1555481781713},{"_id":"public/tags/bug-jquery/index.html","hash":"2353de8d7f6bc1a2b556f280ac6d2151ed4c134d","modified":1555481781713},{"_id":"public/tags/js/index.html","hash":"b4aea0d0aed4ab2389342607f49c60bc0cfa1745","modified":1555481781713},{"_id":"public/tags/继承/index.html","hash":"f065e0755ef565d4e60c6430d0a9776b62d67610","modified":1555481781713},{"_id":"public/tags/面向对象/index.html","hash":"d94c2d47e1e3c12491fc4b3f82bfd1be9f8fbd6d","modified":1555481781713},{"_id":"public/tags/爬虫/index.html","hash":"2c1740e0ae6a6fa8ee494437a200c63d83e1f6ab","modified":1555481781713},{"_id":"public/tags/chrome应用/index.html","hash":"47d22d448f9355227a66b7d9781b06442a73a903","modified":1555481781713},{"_id":"public/tags/测试/index.html","hash":"67e4a976eec89edd376115e3cfc40337b3b9464b","modified":1555481781713},{"_id":"public/tags/js动画/index.html","hash":"8327d28390bee2d6d3e7266392cd110d5aeca066","modified":1555481781713},{"_id":"public/tags/react/index.html","hash":"e5beab52fa1eeecb92b0f14ad5237b6358124bef","modified":1555481781713},{"_id":"public/tags/百度云/index.html","hash":"632f05e7b1b0fb785977cacce46579db951e2397","modified":1555481781713},{"_id":"public/tags/汇编/index.html","hash":"3e2149a167503a4a78b223cb64dffc52b82f5a32","modified":1555481781714},{"_id":"public/tags/数组/index.html","hash":"392f20b4113708fa6b074719b3784992d261aa1b","modified":1555481781714},{"_id":"public/tags/Math/index.html","hash":"e33e0d62f37d191962c4f671520c719d871133c4","modified":1555481781714},{"_id":"public/tags/函数式编程/index.html","hash":"db74ccdb7258b38b9eb881efa4b309817348be3d","modified":1555481781714},{"_id":"public/tags/原型链/index.html","hash":"ea7f993df2c59745f4cd4a138ab1b9304b746ccc","modified":1555481781714},{"_id":"public/tags/模式设计/index.html","hash":"34e9f0f528b03cae6298beaba0017b99b45df521","modified":1555481781714},{"_id":"public/tags/读书笔记/index.html","hash":"f4a9f97b2b55cf849f2e9b1bcf78267b89b6c746","modified":1555481781715},{"_id":"public/tags/ES6/index.html","hash":"d011a4c2a538113516213663ca892b2c7a354080","modified":1555481781715},{"_id":"public/tags/index.html","hash":"772e42d89b57ca5090c4ef300ebf82032d20a6ae","modified":1555481781715},{"_id":"public/2019/04/17/wechat-css/index.html","hash":"f3846f57d54003e775ac3386355968363347cf64","modified":1555481781715},{"_id":"public/2019/04/11/miniprogram-share-and-login/index.html","hash":"649534eae1446876764a6cd51e87f67848754626","modified":1555481781715},{"_id":"public/2019/01/22/flex-mobile/index.html","hash":"43ee9fc26dc0206b504fde7bc3fb24b959f8de8e","modified":1555481781716},{"_id":"public/2019/01/16/mobile-develop-teach/index.html","hash":"c8b0007ba1554096a48e884227a2520b40cd2ff8","modified":1555481781716},{"_id":"public/2018/09/04/iphone-wechat-charset-bug/index.html","hash":"8cd479c3f46aa204e343cc3d6aeb916aa3427c5b","modified":1555481781716},{"_id":"public/2018/03/05/jqueryOffsetBug/index.html","hash":"ffe06d16077a3348aa9c77d68d613628f2e33bfc","modified":1555481781716},{"_id":"public/2017/06/26/mobile-adaptive/index.html","hash":"9177b313d8949c832241fb1b9341df670865bfaf","modified":1555481781716},{"_id":"public/2017/03/24/react-share/index.html","hash":"1e391e06502b69bcb844ab1c9ed5525bf200f625","modified":1555481781716},{"_id":"public/2017/02/22/images-2-canvas2/index.html","hash":"c2f782af01af3abc09f9cc77cafb7519401a2d4e","modified":1555481781716},{"_id":"public/2017/02/21/images-2-canvas/index.html","hash":"5072714b29d1ebe26090ebbe7b2fc88ec3c9d10c","modified":1555481781716},{"_id":"public/2017/01/06/用脚本锁住百度云下载加速倒计时-从而实现无限加速/index.html","hash":"abb238b244149869992b310b12d5afc9ef13bdd8","modified":1555481781716},{"_id":"public/2016/12/23/impress简易教程/index.html","hash":"72c74b69679c4fe69e65d3edc5e43e3d69983b2e","modified":1555481781717},{"_id":"public/2016/11/30/github以及github-page访问缓慢的解决办法/index.html","hash":"6ff71bb5f2c21679539e50e40ee05d88b366ce0e","modified":1555481781717},{"_id":"public/2016/11/30/ES6新特性初探/index.html","hash":"774c5bc02661a368e585f94a8eff0e728abf2c56","modified":1555481781717},{"_id":"public/2016/11/22/深入理解微信小程序/index.html","hash":"441b4e03492a9340e204c1444a7f96193ce00848","modified":1555481781717},{"_id":"public/2016/10/26/js继承的方式和意义/index.html","hash":"89b204a7b64109aeaa553cfdaab93601ec73c3f8","modified":1555481781717},{"_id":"public/2016/10/24/读书笔记-单例模式/index.html","hash":"fbd6663430cd511e8a885d5b086d0e53bed99319","modified":1555481781717},{"_id":"public/2016/10/24/关于博客内容的想法/index.html","hash":"97a515604ebc261557b8459f0c7464f608c8d023","modified":1555481781717},{"_id":"public/2016/10/23/函数式编程-用自带的js原型链方法解决问题/index.html","hash":"946e3327379efdac685b4cf414a5429d6c36f953","modified":1555481781717},{"_id":"public/2016/10/22/postman奇技淫巧/index.html","hash":"28f302c5197280761a1544825c010111474b1568","modified":1555481781717},{"_id":"public/2016/10/18/第一篇博客/index.html","hash":"78efac264cc917745eb3c2042e0678652eb3bb73","modified":1555481781717},{"_id":"public/2016/10/21/requestAnimationFrame-动画-一/index.html","hash":"ed7e2286284f06f621c5028ea929ba70e22211c2","modified":1555481781717},{"_id":"public/categories/工具/index.html","hash":"34eceb9d490c7d97cb0a2ec20968a172325522c8","modified":1555481781717},{"_id":"public/categories/博客/index.html","hash":"c9dc510b3cafe22eba0be39d62fde75e9a26294a","modified":1555481781717},{"_id":"public/categories/博客/page/2/index.html","hash":"60f663e05126eb1dedddff4cbc0a73cf3cf5f3d6","modified":1555481781717},{"_id":"public/archives/index.html","hash":"9e582192dbf9b497525061112ba62abe65957fc8","modified":1555481781718},{"_id":"public/archives/page/2/index.html","hash":"9ec136b20b843b4350d257f1719c66e1495a3761","modified":1555481781718},{"_id":"public/archives/page/3/index.html","hash":"fa53eb2e10d4886ce7ff20b4686c48a8f730d84d","modified":1555481781718},{"_id":"public/archives/2016/index.html","hash":"4ec32f44cc36f76d5f075cf5e2e6e8aa29f04dcd","modified":1555481781718},{"_id":"public/archives/2016/page/2/index.html","hash":"05291008787373cff1c2d53839c99ed24b9b8f12","modified":1555481781718},{"_id":"public/archives/2016/10/index.html","hash":"1347d355edc66a9f61760d014e4a6ceea967258f","modified":1555481781718},{"_id":"public/archives/2016/11/index.html","hash":"3a320add31fc41aac757380418f4e782860ff078","modified":1555481781718},{"_id":"public/archives/2017/index.html","hash":"3d10de1ecabba5cc3989dd063f9e5b5e6b0fe9ca","modified":1555481781718},{"_id":"public/archives/2017/01/index.html","hash":"aa38e2a04afa21bf161748dfbe3f9738de661291","modified":1555481781718},{"_id":"public/archives/2017/02/index.html","hash":"c1a2ce85d97ab542e9eaecb95c57cc53a9333df0","modified":1555481781718},{"_id":"public/archives/2018/03/index.html","hash":"95065ebbd2c8bc85de2592470e05cb07749bfecb","modified":1555481781718},{"_id":"public/archives/2018/index.html","hash":"655fd0b659e8c06520e7cf87d95448b193cce0fc","modified":1555481781718},{"_id":"public/archives/2018/09/index.html","hash":"37d6f4b90f019fd211f072f3ba3f185fbfcba6be","modified":1555481781719},{"_id":"public/archives/2019/index.html","hash":"2e1c535bbf8446d43a880b6d687570ca0c8364db","modified":1555481781719},{"_id":"public/archives/2019/01/index.html","hash":"5d1dcb73f55549174485c8e0b8c642e125c073a5","modified":1555481781719},{"_id":"public/archives/2019/04/index.html","hash":"3ae921178f2ad31ee753b9c9b31620980a9fa8cc","modified":1555481781719},{"_id":"public/index.html","hash":"bf9703de62db584e55236a539975722033488c49","modified":1555481781719},{"_id":"public/page/3/index.html","hash":"9d664602b59a8e9fbae979aa73107d59a0d3f5c3","modified":1555481781719},{"_id":"public/page/2/index.html","hash":"d0c056176896a2befd818ffce24e909711181659","modified":1555481781719},{"_id":"public/tags/canvas/index.html","hash":"4e5dd0cad03a999fae77f90c55d76860deb3363a","modified":1555481781719},{"_id":"public/tags/高斯模糊/index.html","hash":"0e1d2cef8cbb66ff6cb5eed760e9b166d23208ab","modified":1555481781719},{"_id":"public/tags/灰度处理/index.html","hash":"2f5df05c33d3ecd68f55ecdacf532688542a290f","modified":1555481781719},{"_id":"public/tags/反色/index.html","hash":"c2c653b7955eae619b2db12c60a0431212f04d7d","modified":1555481781719},{"_id":"public/tags/图像处理/index.html","hash":"eb6f7a1f19dbe177fd9856607e44e09ca4a985f9","modified":1555481781719},{"_id":"public/tags/移动端/index.html","hash":"b14e20580bc9871cd8a50976e673e02420677c74","modified":1555481781719},{"_id":"public/tags/微信小程序/index.html","hash":"d128fb981b9595b76caff3d5b9a199ffbbf2ea87","modified":1555481781719},{"_id":"public/tags/随想/index.html","hash":"3cd0a982ba50dd13b92bc505c8eb72257f750fc4","modified":1555481781719},{"_id":"public/CNAME","hash":"972fffa72fb36b88870ce90376e36117fe26aedb","modified":1555481781742},{"_id":"public/README.rst","hash":"345e3b09e1ff52b322f721e5e20873139b3cabc1","modified":1555481781742},{"_id":"public/images/avatar.gif","hash":"390b708822e6db7f497a895befebc2d21fb6bf80","modified":1555481781742},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1555481781742},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1555481781742},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1555481781742},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1555481781742},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1555481781742},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1555481781743},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1555481781743},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555481781743},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1555481781743},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1555481781743},{"_id":"public/images/avatar.old.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555481781743},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555481781743},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555481781743},{"_id":"public/images/emotions/gsq.jpg","hash":"664cf9f97e9eac82f313413230e4df29e3649d2d","modified":1555481781743},{"_id":"public/images/emotions/trxc.jpg","hash":"17430632ea12008b4ba90f3da36c43f24966b2d4","modified":1555481781743},{"_id":"public/images/es6/es6.png","hash":"c56f13d3d77132716bc2c8b040f1bdf8b626a5a1","modified":1555481781743},{"_id":"public/images/jqueryOffsetBug/popver.png","hash":"b6c19af12eba07edc4367f795dd1af6337e1e8a1","modified":1555481781743},{"_id":"public/images/images2canvas/canvas2.png","hash":"068e3bf5a64e9a0069365014c06db89fb615ba61","modified":1555481781743},{"_id":"public/images/images2canvas/canvas5.png","hash":"8522d40dc8fe2f258a19fdfac886e43e33187ab9","modified":1555481781743},{"_id":"public/images/images2canvas/canvas1.png","hash":"a54915a9d52a54ee5b3b62e2b938f91aad9b1938","modified":1555481781743},{"_id":"public/images/images2canvas/canvas6.png","hash":"4c5aec7083fcf07e4cbf20b88131592cb4980752","modified":1555481781743},{"_id":"public/images/moshi/moshi1.jpg","hash":"962c7b22f42cbf5554e7dffb59cf39983b7286f6","modified":1555481781743},{"_id":"public/images/mobile-adaptive/555.png","hash":"0a507564c38e027db067687304010b04afbed4b7","modified":1555481781744},{"_id":"public/images/mobile-adaptive/666.png","hash":"f9d8439566067e7ac722d768968bad6c1e40ee56","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071004.png","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071005.png","hash":"a6cceda7dde8ebc58594dd065e068faee9532331","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071010.png","hash":"49ec2f8667a4908eb703ecfc53bfcbda645c2c5c","modified":1555481781744},{"_id":"public/images/moshi/moshi2.jpg","hash":"caf8b913af5daf45a6c9038b5caded01033906d1","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071012.png","hash":"caf8db94cfd01a729a0c55b3b0b6811cc522dd83","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071011.png","hash":"28068f3962f468c5276e09c12eac4f370fd3d026","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071013.png","hash":"9e87d79203b99d60a08f825451b23b877e24981d","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071014.png","hash":"9ced0024eb565cefed11f7205a38ebb54b1b275e","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071016.png","hash":"bafd39cf61f116ae4bce5e44c82fd263cbcf2a71","modified":1555481781744},{"_id":"public/images/mobile-adaptive/mobile-iPhone.png","hash":"3ad7538a3ab0db5ffad65c1ddf162fcfb4e5a475","modified":1555481781744},{"_id":"public/images/mobile-adaptive/mobile-iPhone3.png","hash":"cc5822e20845c7a13cb7cddd8bdcc9032baf38d6","modified":1555481781744},{"_id":"public/images/mobile-adaptive/bg2015071015.jpg","hash":"254035268c28893d4d1d967381a82785cc11f668","modified":1555481781744},{"_id":"public/images/mobile-adaptive/mobile-iPhone1.png","hash":"b85f2c886a3da82e9b5f8da01a77ded332b9dd65","modified":1555481781744},{"_id":"public/images/postman/postman1.jpg","hash":"1367e20300950d7fb4d183f584d61ad50f75a22f","modified":1555481781744},{"_id":"public/images/postman/postman2.jpg","hash":"4532b64ae150d1862e2ff6d0f052c9258bbd6243","modified":1555481781744},{"_id":"public/images/postman/postman3.jpg","hash":"8a92c363dae150c35275e068961a0155156b2f92","modified":1555481781744},{"_id":"public/images/postman/postman4.jpg","hash":"0a84db8cb14fc2d2a18f6377d09809488e9cae01","modified":1555481781745},{"_id":"public/images/postman/postman5.jpg","hash":"8453395bd7ffb261db0f09370bf324470ade429d","modified":1555481781745},{"_id":"public/images/postman/postman6.jpg","hash":"77f7ab635d55bf7da3d12e62d5c20410b7f8ae88","modified":1555481781745},{"_id":"public/images/postman/postman7.jpg","hash":"8659bd414c9d250b4e4ebbf28192ddaf35c661b1","modified":1555481781745},{"_id":"public/images/requestAnimationFrame/Animexample1.gif","hash":"12235bda6bba2afdd42c19a154d59d5f3176e835","modified":1555481781745},{"_id":"public/images/requestAnimationFrame/Animexample2.gif","hash":"24a567b42bc0d67378877059457788203cfc42f6","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/api-login.jpg","hash":"88f391544daa077ada77bab685017d37bed80dda","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/bianyi.png","hash":"018c2856bd1fc5d7d7c33b2b153935ddc6dd6aef","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/ddd.png","hash":"2c3f4288a28dd529dba18447b60e346ea72c984d","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu1.png","hash":"be3aa9a8c0a14d9f3f2da1abe9508be009f1bc36","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu2.gif","hash":"f9365cc48749cb60791ddfb611eb8097f9087f7f","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu4.png","hash":"ce0a235b492613d866dfbd687866838def2df63b","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu3.gif","hash":"418ca361aa44751242918299e8e41913aad08751","modified":1555481781745},{"_id":"public/images/yuanxinglian/yuanxinglian2.png","hash":"92d95e36b79f45564411e84db1dd8a3fe15caf99","modified":1555481781745},{"_id":"public/images/yuanxinglian/yuanxinglian1.png","hash":"700e91578ab8895241df9ac54765a46a9f0ab18e","modified":1555481781745},{"_id":"public/images/yuanxinglian/yuanxinglian3.png","hash":"d8909352164449224f0c8a0e454773a35be44530","modified":1555481781745},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/bianyi2.png","hash":"112c446c5c9433cd5c1b0dbac374e64cee047b4e","modified":1555481781745},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1555481781745},{"_id":"public/images/weixinxiaochenxu/block.png","hash":"731b2ff05e2abb7888f9365ee5aa4b28c7899738","modified":1555481781746},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555481781746},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555481781746},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555481781746},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555481781746},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555481781746},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555481781746},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1555481781746},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1555481781746},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555481781746},{"_id":"public/favicon.ico","hash":"7fd8ec7f4eabae2e3f7ac4f481a26f1a4f0d0b95","modified":1555481782237},{"_id":"public/images/mobile-adaptive/300958496962833.png","hash":"ba2a364515a3b101d060c4df8c1154e95ed2efd7","modified":1555481782238},{"_id":"public/images/mobile-adaptive/mobile-iPhone4.gif","hash":"c2a622563b0e153d985ae086d3a8e4933d4826fd","modified":1555481782241},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1555481782241},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1555481782241},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1555481782242},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555481782255},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1555481782255},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1555481782255},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555481782255},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1555481782255},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1555481782255},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1555481782255},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1555481782255},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555481782256},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555481782256},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1555481782256},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1555481782256},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1555481782256},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555481782256},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1555481782256},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555481782256},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555481782256},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1555481782256},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555481782256},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555481782256},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555481782256},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555481782256},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555481782256},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555481782256},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555481782256},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555481782256},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555481782257},{"_id":"public/css/main.css","hash":"a7b34573dee63d5335914045bb5078e1f1e8c2ef","modified":1555481782257},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555481782257},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555481782257},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555481782257},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555481782257},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555481782257},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1555481782257},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555481782257},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1555481782257},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555481782257},{"_id":"public/images/images2canvas/canvas.png","hash":"f82c3f43c43d25dbe36aa2d74fade418cb7dd8bd","modified":1555481782257},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1555481782257},{"_id":"public/images/images2canvas/canvas3.png","hash":"f52ac329ac8c4bd8ec408eb8cdb2e56532ca142e","modified":1555481782266},{"_id":"public/images/images2canvas/canvas4.png","hash":"66a7b1c12017a250b6697e5a15d782a3197f45a1","modified":1555481782270},{"_id":"public/images/images2canvas/canvas7.png","hash":"94aa8fd9486162d0252a58272a13481db638eb3f","modified":1555481782270},{"_id":"public/images/mobile-adaptive/bg2015071006.png","hash":"67a712714dda62eec3603fb5e5d74a28ce461f13","modified":1555481782271},{"_id":"public/images/mobile-adaptive/mobile-iPhone6.gif","hash":"d0aa2b7920bf1d36d3cf005afb69a8109ab76295","modified":1555481782271},{"_id":"public/images/mobile-adaptive/mobile-iPhone2.gif","hash":"31e2fe68a47a22044dc639f7449f2508f5237f62","modified":1555481782275},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1555481782275},{"_id":"public/images/mobile-adaptive/mobile-iPhone5.gif","hash":"7203767c72befa54d5038b01750d060ca3a22741","modified":1555481782280}],"Category":[{"name":"工具","_id":"cjuktot950004wsawdc1yv5mc"},{"name":"博客","_id":"cjuktot9c0009wsawmw0gmjw3"}],"Data":[],"Page":[{"title":"categories","date":"2016-10-18T13:49:39.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-10-18 21:49:39\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-22T09:15:35.303Z","path":"categories/index.html","layout":"page","_id":"cjuktot8w0000wsawcgrrvzy6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-10-18T13:48:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-18 21:48:19\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-22T09:15:35.304Z","path":"tags/index.html","layout":"page","_id":"cjuktot920002wsawtgvp23gy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"github以及github page访问缓慢的解决办法","date":"2016-11-30T07:30:53.000Z","_content":"如题，解决办法如下\n修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址\n```\n151.101.100.133 zk-.github.io\n192.30.253.113 github.com\n```","source":"_posts/github以及github-page访问缓慢的解决办法.md","raw":"---\ntitle: github以及github page访问缓慢的解决办法\ndate: 2016-11-30 15:30:53\ncategories: [工具]\ntags: [hosts]\n---\n如题，解决办法如下\n修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址\n```\n151.101.100.133 zk-.github.io\n192.30.253.113 github.com\n```","slug":"github以及github-page访问缓慢的解决办法","published":1,"updated":"2016-11-30T07:32:56.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot8y0001wsaw8qpvmj3h","content":"<p>如题，解决办法如下<br>修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">151.101.100.133 zk-.github.io</span><br><span class=\"line\">192.30.253.113 github.com</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如题，解决办法如下<br>修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">151.101.100.133 zk-.github.io</span><br><span class=\"line\">192.30.253.113 github.com</span><br></pre></td></tr></table></figure></p>\n"},{"title":"用js来做图像处理（一）","date":"2017-02-21T06:49:24.000Z","_content":"所有能被js实现的东西，最终都会以js的方式被实现\n<!-- more -->\n# 概述\n正如上面所说，昨天开始打算尝试能不能用js做一些图像处理的工作，直到现在，本人已经用js下的canvas实现了图像的灰度处理，反色，以及高斯模糊等功能。\n资料参考：阮老师的[高斯模糊的算法](http://blog.csdn.net/jiandanjinxin/article/details/51281828)\n# 基础知识\n## 导入图像\ncanvas导入图像非常简单，使用canvas自带的drawImage函数即可导入\n```javascript\nvar image = new Image;\nimage.src = './images/mm1.jpg'\nimage.onload = function (){\n\t//在图像加载完成的时候导入\n\tctx.drawImage(image,0,0)  //后面的两个参数是导入图片的坐标\n}\n```\n效果如下，左图为原图，右图为canvas导入的图\n![canvas](/images/images2canvas/canvas.png)\n## 获取图像数据\ncanvas在这里也为我们提供了简便的函数getImageData，用这个函数可以获取目标区域里图像的__数组数据__。\n```javascript\ncanvas.width = width;\ncanvas.height = height;\nctx.drawImage(image,0,0);\nvar imageDatas = ctx.getImageData(0,0,width,height);  //参数意思是坐标已经x、y轴的偏移量\nconsole.log(imageDatas)\n```\n获取数据如图\n![canvas](/images/images2canvas/canvas1.png)\n## 重绘图像\n上面我们拿到了图像数据，这时候假如我们处理好了，怎么用新数据重绘呢？\n可以直接用canvas自带的putImageData函数\n```javascript\nctx.putImageData(imageDatas,0,0)\n```\n## 关于图像数据\n我们知道图像的每一个像素的颜色都有rgb三个颜色构成，canvas还增加了一种，就是透明度，所以在canvas中每一个像素都是有rgba值的。\n对应到数组数据中，__每四个数组元素表示一个像素的rgba值__。\n由此我们可以做个小练习，图像的第二排第一个像素的位置是 0 + 4 x (图像宽度 + 1)。\n![canvas](/images/images2canvas/canvas2.png)\n基础只是已经了解的差不多了，现在开始简单的尝试\n# 灰度处理\n把图像做灰度处理很简单，只要把每个像素的rgb三值做成一样的就可以了，因为每个像素的rgb的值不同，所以我们可以取平均值。代码如下\n```javascript\nfor (var i = 0; i < imageDatas.data.length; i+=4) { //每四个元素代表一个像素\n\tvar ddd = (imageDatas.data[i]+imageDatas.data[i+1]+imageDatas.data[i+2])/3;\n\timageDatas.data[i]=ddd;\n\timageDatas.data[i+1]=ddd;\n\timageDatas.data[i+2]=ddd;\n\timageDatas.data[i+3]=255; //透明度就最高即可\n}\n```\n效果如下\n![canvas](/images/images2canvas/canvas3.png)\n# 反色\n反色的方法是取对应rgb中相反的值，即用255减去对应的值，结果为所求的值。\n```javascript\nfor (var i = 0; i < imageDatas.data.length; i+=4) { //每四个元素代表一个像素\n\timageDatas.data[i]=255-imageDatas.data[i];\n\timageDatas.data[i+1]=255-imageDatas.data[i+1];\n\timageDatas.data[i+2]=255-imageDatas.data[i+2];\n\timageDatas.data[i+3]=255; //透明度就最高即可\n}\n```\n效果如下\n![canvas](/images/images2canvas/canvas4.png)\n# 结语\n第一篇主要是介绍canvas下处理图像数据需要的一些基本知识，以及灰度处理和反色两个简单的图像处理技术，下一章会重点介绍如何对图像进行高斯模糊，以及高斯模糊的算法。","source":"_posts/images-2-canvas.md","raw":"---\ntitle: 用js来做图像处理（一）\ndate: 2017-02-21 14:49:24\ncategories: [博客]\ntags: [canvas,高斯模糊,灰度处理,反色,图像处理]\n---\n所有能被js实现的东西，最终都会以js的方式被实现\n<!-- more -->\n# 概述\n正如上面所说，昨天开始打算尝试能不能用js做一些图像处理的工作，直到现在，本人已经用js下的canvas实现了图像的灰度处理，反色，以及高斯模糊等功能。\n资料参考：阮老师的[高斯模糊的算法](http://blog.csdn.net/jiandanjinxin/article/details/51281828)\n# 基础知识\n## 导入图像\ncanvas导入图像非常简单，使用canvas自带的drawImage函数即可导入\n```javascript\nvar image = new Image;\nimage.src = './images/mm1.jpg'\nimage.onload = function (){\n\t//在图像加载完成的时候导入\n\tctx.drawImage(image,0,0)  //后面的两个参数是导入图片的坐标\n}\n```\n效果如下，左图为原图，右图为canvas导入的图\n![canvas](/images/images2canvas/canvas.png)\n## 获取图像数据\ncanvas在这里也为我们提供了简便的函数getImageData，用这个函数可以获取目标区域里图像的__数组数据__。\n```javascript\ncanvas.width = width;\ncanvas.height = height;\nctx.drawImage(image,0,0);\nvar imageDatas = ctx.getImageData(0,0,width,height);  //参数意思是坐标已经x、y轴的偏移量\nconsole.log(imageDatas)\n```\n获取数据如图\n![canvas](/images/images2canvas/canvas1.png)\n## 重绘图像\n上面我们拿到了图像数据，这时候假如我们处理好了，怎么用新数据重绘呢？\n可以直接用canvas自带的putImageData函数\n```javascript\nctx.putImageData(imageDatas,0,0)\n```\n## 关于图像数据\n我们知道图像的每一个像素的颜色都有rgb三个颜色构成，canvas还增加了一种，就是透明度，所以在canvas中每一个像素都是有rgba值的。\n对应到数组数据中，__每四个数组元素表示一个像素的rgba值__。\n由此我们可以做个小练习，图像的第二排第一个像素的位置是 0 + 4 x (图像宽度 + 1)。\n![canvas](/images/images2canvas/canvas2.png)\n基础只是已经了解的差不多了，现在开始简单的尝试\n# 灰度处理\n把图像做灰度处理很简单，只要把每个像素的rgb三值做成一样的就可以了，因为每个像素的rgb的值不同，所以我们可以取平均值。代码如下\n```javascript\nfor (var i = 0; i < imageDatas.data.length; i+=4) { //每四个元素代表一个像素\n\tvar ddd = (imageDatas.data[i]+imageDatas.data[i+1]+imageDatas.data[i+2])/3;\n\timageDatas.data[i]=ddd;\n\timageDatas.data[i+1]=ddd;\n\timageDatas.data[i+2]=ddd;\n\timageDatas.data[i+3]=255; //透明度就最高即可\n}\n```\n效果如下\n![canvas](/images/images2canvas/canvas3.png)\n# 反色\n反色的方法是取对应rgb中相反的值，即用255减去对应的值，结果为所求的值。\n```javascript\nfor (var i = 0; i < imageDatas.data.length; i+=4) { //每四个元素代表一个像素\n\timageDatas.data[i]=255-imageDatas.data[i];\n\timageDatas.data[i+1]=255-imageDatas.data[i+1];\n\timageDatas.data[i+2]=255-imageDatas.data[i+2];\n\timageDatas.data[i+3]=255; //透明度就最高即可\n}\n```\n效果如下\n![canvas](/images/images2canvas/canvas4.png)\n# 结语\n第一篇主要是介绍canvas下处理图像数据需要的一些基本知识，以及灰度处理和反色两个简单的图像处理技术，下一章会重点介绍如何对图像进行高斯模糊，以及高斯模糊的算法。","slug":"images-2-canvas","published":1,"updated":"2017-06-27T00:55:14.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot930003wsawtyng55rp","content":"<p>所有能被js实现的东西，最终都会以js的方式被实现<br><a id=\"more\"></a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>正如上面所说，昨天开始打算尝试能不能用js做一些图像处理的工作，直到现在，本人已经用js下的canvas实现了图像的灰度处理，反色，以及高斯模糊等功能。<br>资料参考：阮老师的<a href=\"http://blog.csdn.net/jiandanjinxin/article/details/51281828\" target=\"_blank\" rel=\"noopener\">高斯模糊的算法</a></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"导入图像\"><a href=\"#导入图像\" class=\"headerlink\" title=\"导入图像\"></a>导入图像</h2><p>canvas导入图像非常简单，使用canvas自带的drawImage函数即可导入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image;</span><br><span class=\"line\">image.src = <span class=\"string\">'./images/mm1.jpg'</span></span><br><span class=\"line\">image.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在图像加载完成的时候导入</span></span><br><span class=\"line\">\tctx.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">//后面的两个参数是导入图片的坐标</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下，左图为原图，右图为canvas导入的图<br><img src=\"/images/images2canvas/canvas.png\" alt=\"canvas\"></p>\n<h2 id=\"获取图像数据\"><a href=\"#获取图像数据\" class=\"headerlink\" title=\"获取图像数据\"></a>获取图像数据</h2><p>canvas在这里也为我们提供了简便的函数getImageData，用这个函数可以获取目标区域里图像的<strong>数组数据</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.width = width;</span><br><span class=\"line\">canvas.height = height;</span><br><span class=\"line\">ctx.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageDatas = ctx.getImageData(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);  <span class=\"comment\">//参数意思是坐标已经x、y轴的偏移量</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(imageDatas)</span><br></pre></td></tr></table></figure></p>\n<p>获取数据如图<br><img src=\"/images/images2canvas/canvas1.png\" alt=\"canvas\"></p>\n<h2 id=\"重绘图像\"><a href=\"#重绘图像\" class=\"headerlink\" title=\"重绘图像\"></a>重绘图像</h2><p>上面我们拿到了图像数据，这时候假如我们处理好了，怎么用新数据重绘呢？<br>可以直接用canvas自带的putImageData函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.putImageData(imageDatas,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于图像数据\"><a href=\"#关于图像数据\" class=\"headerlink\" title=\"关于图像数据\"></a>关于图像数据</h2><p>我们知道图像的每一个像素的颜色都有rgb三个颜色构成，canvas还增加了一种，就是透明度，所以在canvas中每一个像素都是有rgba值的。<br>对应到数组数据中，<strong>每四个数组元素表示一个像素的rgba值</strong>。<br>由此我们可以做个小练习，图像的第二排第一个像素的位置是 0 + 4 x (图像宽度 + 1)。<br><img src=\"/images/images2canvas/canvas2.png\" alt=\"canvas\"><br>基础只是已经了解的差不多了，现在开始简单的尝试</p>\n<h1 id=\"灰度处理\"><a href=\"#灰度处理\" class=\"headerlink\" title=\"灰度处理\"></a>灰度处理</h1><p>把图像做灰度处理很简单，只要把每个像素的rgb三值做成一样的就可以了，因为每个像素的rgb的值不同，所以我们可以取平均值。代码如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imageDatas.data.length; i+=<span class=\"number\">4</span>) &#123; <span class=\"comment\">//每四个元素代表一个像素</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ddd = (imageDatas.data[i]+imageDatas.data[i+<span class=\"number\">1</span>]+imageDatas.data[i+<span class=\"number\">2</span>])/<span class=\"number\">3</span>;</span><br><span class=\"line\">\timageDatas.data[i]=ddd;</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">1</span>]=ddd;</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">2</span>]=ddd;</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">3</span>]=<span class=\"number\">255</span>; <span class=\"comment\">//透明度就最高即可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下<br><img src=\"/images/images2canvas/canvas3.png\" alt=\"canvas\"></p>\n<h1 id=\"反色\"><a href=\"#反色\" class=\"headerlink\" title=\"反色\"></a>反色</h1><p>反色的方法是取对应rgb中相反的值，即用255减去对应的值，结果为所求的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imageDatas.data.length; i+=<span class=\"number\">4</span>) &#123; <span class=\"comment\">//每四个元素代表一个像素</span></span><br><span class=\"line\">\timageDatas.data[i]=<span class=\"number\">255</span>-imageDatas.data[i];</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">1</span>]=<span class=\"number\">255</span>-imageDatas.data[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">2</span>]=<span class=\"number\">255</span>-imageDatas.data[i+<span class=\"number\">2</span>];</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">3</span>]=<span class=\"number\">255</span>; <span class=\"comment\">//透明度就最高即可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下<br><img src=\"/images/images2canvas/canvas4.png\" alt=\"canvas\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>第一篇主要是介绍canvas下处理图像数据需要的一些基本知识，以及灰度处理和反色两个简单的图像处理技术，下一章会重点介绍如何对图像进行高斯模糊，以及高斯模糊的算法。</p>\n","site":{"data":{}},"excerpt":"<p>所有能被js实现的东西，最终都会以js的方式被实现<br>","more":"</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>正如上面所说，昨天开始打算尝试能不能用js做一些图像处理的工作，直到现在，本人已经用js下的canvas实现了图像的灰度处理，反色，以及高斯模糊等功能。<br>资料参考：阮老师的<a href=\"http://blog.csdn.net/jiandanjinxin/article/details/51281828\" target=\"_blank\" rel=\"noopener\">高斯模糊的算法</a></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"导入图像\"><a href=\"#导入图像\" class=\"headerlink\" title=\"导入图像\"></a>导入图像</h2><p>canvas导入图像非常简单，使用canvas自带的drawImage函数即可导入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image;</span><br><span class=\"line\">image.src = <span class=\"string\">'./images/mm1.jpg'</span></span><br><span class=\"line\">image.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在图像加载完成的时候导入</span></span><br><span class=\"line\">\tctx.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">//后面的两个参数是导入图片的坐标</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下，左图为原图，右图为canvas导入的图<br><img src=\"/images/images2canvas/canvas.png\" alt=\"canvas\"></p>\n<h2 id=\"获取图像数据\"><a href=\"#获取图像数据\" class=\"headerlink\" title=\"获取图像数据\"></a>获取图像数据</h2><p>canvas在这里也为我们提供了简便的函数getImageData，用这个函数可以获取目标区域里图像的<strong>数组数据</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.width = width;</span><br><span class=\"line\">canvas.height = height;</span><br><span class=\"line\">ctx.drawImage(image,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> imageDatas = ctx.getImageData(<span class=\"number\">0</span>,<span class=\"number\">0</span>,width,height);  <span class=\"comment\">//参数意思是坐标已经x、y轴的偏移量</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(imageDatas)</span><br></pre></td></tr></table></figure></p>\n<p>获取数据如图<br><img src=\"/images/images2canvas/canvas1.png\" alt=\"canvas\"></p>\n<h2 id=\"重绘图像\"><a href=\"#重绘图像\" class=\"headerlink\" title=\"重绘图像\"></a>重绘图像</h2><p>上面我们拿到了图像数据，这时候假如我们处理好了，怎么用新数据重绘呢？<br>可以直接用canvas自带的putImageData函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.putImageData(imageDatas,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"关于图像数据\"><a href=\"#关于图像数据\" class=\"headerlink\" title=\"关于图像数据\"></a>关于图像数据</h2><p>我们知道图像的每一个像素的颜色都有rgb三个颜色构成，canvas还增加了一种，就是透明度，所以在canvas中每一个像素都是有rgba值的。<br>对应到数组数据中，<strong>每四个数组元素表示一个像素的rgba值</strong>。<br>由此我们可以做个小练习，图像的第二排第一个像素的位置是 0 + 4 x (图像宽度 + 1)。<br><img src=\"/images/images2canvas/canvas2.png\" alt=\"canvas\"><br>基础只是已经了解的差不多了，现在开始简单的尝试</p>\n<h1 id=\"灰度处理\"><a href=\"#灰度处理\" class=\"headerlink\" title=\"灰度处理\"></a>灰度处理</h1><p>把图像做灰度处理很简单，只要把每个像素的rgb三值做成一样的就可以了，因为每个像素的rgb的值不同，所以我们可以取平均值。代码如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imageDatas.data.length; i+=<span class=\"number\">4</span>) &#123; <span class=\"comment\">//每四个元素代表一个像素</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ddd = (imageDatas.data[i]+imageDatas.data[i+<span class=\"number\">1</span>]+imageDatas.data[i+<span class=\"number\">2</span>])/<span class=\"number\">3</span>;</span><br><span class=\"line\">\timageDatas.data[i]=ddd;</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">1</span>]=ddd;</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">2</span>]=ddd;</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">3</span>]=<span class=\"number\">255</span>; <span class=\"comment\">//透明度就最高即可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下<br><img src=\"/images/images2canvas/canvas3.png\" alt=\"canvas\"></p>\n<h1 id=\"反色\"><a href=\"#反色\" class=\"headerlink\" title=\"反色\"></a>反色</h1><p>反色的方法是取对应rgb中相反的值，即用255减去对应的值，结果为所求的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imageDatas.data.length; i+=<span class=\"number\">4</span>) &#123; <span class=\"comment\">//每四个元素代表一个像素</span></span><br><span class=\"line\">\timageDatas.data[i]=<span class=\"number\">255</span>-imageDatas.data[i];</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">1</span>]=<span class=\"number\">255</span>-imageDatas.data[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">2</span>]=<span class=\"number\">255</span>-imageDatas.data[i+<span class=\"number\">2</span>];</span><br><span class=\"line\">\timageDatas.data[i+<span class=\"number\">3</span>]=<span class=\"number\">255</span>; <span class=\"comment\">//透明度就最高即可</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下<br><img src=\"/images/images2canvas/canvas4.png\" alt=\"canvas\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>第一篇主要是介绍canvas下处理图像数据需要的一些基本知识，以及灰度处理和反色两个简单的图像处理技术，下一章会重点介绍如何对图像进行高斯模糊，以及高斯模糊的算法。</p>"},{"title":"用js来做图像处理（二）","date":"2017-02-22T00:55:00.000Z","_content":"高斯模糊是根据一个像素周围的像素的值通过复杂的计算获得一个与周围像素近似值的技术，如果只是简单的判断，那就是马赛克了。\n<!-- more -->\n资料参考：阮老师的[高斯模糊的算法](http://blog.csdn.net/jiandanjinxin/article/details/51281828)\n# 基础知识\n读过阮老师的文章我们知道以下几点\n- 所谓\"模糊\"，可以理解成每一个像素都取周边像素的平均值。\n- \"中间点\"取\"周围点\"的平均值，就会失去细节。\n- 取值范围越大，\"模糊效果\"越强烈。\n- 正态分布显然是一种可取的权重分配模式。\n- 利用状态发布的权重值可以算出中心点合适的加权平均值。\n- 图像都是二维的，所以我们需要二维正态分布。\n- 如果一个点处于边界，周边没有足够的点，就把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。\n\n矩阵函数如下：\n![canvas](/images/images2canvas/canvas5.png)\n# 实现\n有了理论和函数支持，做起来就比较容易了\n我们先尝试做一个模糊半径为1像素的图。\n在半径为1像素的情况下，中心点需要知道周围8个点的权重值，利用前面的函数，写出下面的代码\n```javascript\nvar lisanzhi = 0.9;  //离散值\nvar r = 1;  //设半径为1像素\nvar zhijing = 2*r + 1;  //直径\nvar pointNums = zhijing*zhijing;  //需要计算点的数量\nvar middleValue = Math.ceil(pointNums/2);  //中值\nvar temp = 1/(2 * Math.PI * lisanzhi * lisanzhi);  //公式中一样的下半部分\nvar gaosiData = [];  //存储结果\nfor (var i = 0; i < pointNums; i++) {\n\tvar x = Math.abs(i%zhijing - r);  //获取对应值的x、y值\n\tvar y = Math.abs(r - parseInt(i/zhijing));\n\tgaosiData[i] = Math.pow(Math.E , 0 - (x*x + y*y)/(2 * lisanzhi * lisanzhi)) * temp;  //套用公式计算\n}\nvar sum = gaosiData.reduce(function(a,b) {  //求和\n\t\treturn a + b;\n\t})\ngaosiData = gaosiData.map(function(item) {  //求权重\n\treturn item/sum;\n})\n```\n结果如下\n![canvas](/images/images2canvas/canvas6.png)\n接下来就是求中心点周围的点在数组数据中的下标值，实现如下\n```javascript\nvar roundArray = [],  //用来存放结果\nmaxIndex = canvas.width * canvas.height * 4;  //数组数据中最大下标\nfor (var k = 0; k < pointNums; k++) {  //根据下标和中心点的下标距离，求出真正下标\n\tvar juli = k - middleValue + 1,\n\tbeishu = parseInt(juli/zhijing),\n\tyushu = juli%zhijing;\n\troundArray[k] = i + 4*(beishu*canvas.width+yushu);\n}\nfor (var j = 0; j < roundArray.length; j++) {  //因为部分点在边缘，所以一些下标超过正常范围的就取对应点的下标\n\tif (roundArray[j] < 0 || roundArray[j] > maxIndex) {\n\t\troundArray[j] = roundArray[pointNums - 1 - j];\n\t}\n}\n```\n做完这些，我们就可以根据前面两步的结果，计算最终中心点的值了\n```javascript\nvar temp=0,temp1=0,temp2=0;\nfor (var m = 0; m < pointNums; m++) {  //求和\n\ttemp += imageDatas.data[roundArray[m]] * gaosiData[m];\n\ttemp1 += imageDatas.data[roundArray[m]+1] * gaosiData[m];\n\ttemp2 += imageDatas.data[roundArray[m]+2] * gaosiData[m];\n}\nimageDatas.data[i] = temp;\nimageDatas.data[i+1] = temp1;\nimageDatas.data[i+2] = temp2;\nimageDatas.data[i+3] = 255;\n```\n效果图如下\n![canvas](/images/images2canvas/canvas7.png)\n# 结论\n这一篇是在前面的文章基础上一步步推导过来的，高斯模糊本身不难，只要掌握原理即可很容易做到，本篇所写代码没有做性能优化，读者可以进一步开发，优化性能，功能解耦。\n实验平台：[点这里](https://codepen.io/jackfredzk/pen/egqBPG)","source":"_posts/images-2-canvas2.md","raw":"---\ntitle: 用js来做图像处理（二）\ndate: 2017-02-22 08:55:00\ncategories: [博客]\ntags: [canvas,高斯模糊,灰度处理,反色,图像处理]\n---\n高斯模糊是根据一个像素周围的像素的值通过复杂的计算获得一个与周围像素近似值的技术，如果只是简单的判断，那就是马赛克了。\n<!-- more -->\n资料参考：阮老师的[高斯模糊的算法](http://blog.csdn.net/jiandanjinxin/article/details/51281828)\n# 基础知识\n读过阮老师的文章我们知道以下几点\n- 所谓\"模糊\"，可以理解成每一个像素都取周边像素的平均值。\n- \"中间点\"取\"周围点\"的平均值，就会失去细节。\n- 取值范围越大，\"模糊效果\"越强烈。\n- 正态分布显然是一种可取的权重分配模式。\n- 利用状态发布的权重值可以算出中心点合适的加权平均值。\n- 图像都是二维的，所以我们需要二维正态分布。\n- 如果一个点处于边界，周边没有足够的点，就把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。\n\n矩阵函数如下：\n![canvas](/images/images2canvas/canvas5.png)\n# 实现\n有了理论和函数支持，做起来就比较容易了\n我们先尝试做一个模糊半径为1像素的图。\n在半径为1像素的情况下，中心点需要知道周围8个点的权重值，利用前面的函数，写出下面的代码\n```javascript\nvar lisanzhi = 0.9;  //离散值\nvar r = 1;  //设半径为1像素\nvar zhijing = 2*r + 1;  //直径\nvar pointNums = zhijing*zhijing;  //需要计算点的数量\nvar middleValue = Math.ceil(pointNums/2);  //中值\nvar temp = 1/(2 * Math.PI * lisanzhi * lisanzhi);  //公式中一样的下半部分\nvar gaosiData = [];  //存储结果\nfor (var i = 0; i < pointNums; i++) {\n\tvar x = Math.abs(i%zhijing - r);  //获取对应值的x、y值\n\tvar y = Math.abs(r - parseInt(i/zhijing));\n\tgaosiData[i] = Math.pow(Math.E , 0 - (x*x + y*y)/(2 * lisanzhi * lisanzhi)) * temp;  //套用公式计算\n}\nvar sum = gaosiData.reduce(function(a,b) {  //求和\n\t\treturn a + b;\n\t})\ngaosiData = gaosiData.map(function(item) {  //求权重\n\treturn item/sum;\n})\n```\n结果如下\n![canvas](/images/images2canvas/canvas6.png)\n接下来就是求中心点周围的点在数组数据中的下标值，实现如下\n```javascript\nvar roundArray = [],  //用来存放结果\nmaxIndex = canvas.width * canvas.height * 4;  //数组数据中最大下标\nfor (var k = 0; k < pointNums; k++) {  //根据下标和中心点的下标距离，求出真正下标\n\tvar juli = k - middleValue + 1,\n\tbeishu = parseInt(juli/zhijing),\n\tyushu = juli%zhijing;\n\troundArray[k] = i + 4*(beishu*canvas.width+yushu);\n}\nfor (var j = 0; j < roundArray.length; j++) {  //因为部分点在边缘，所以一些下标超过正常范围的就取对应点的下标\n\tif (roundArray[j] < 0 || roundArray[j] > maxIndex) {\n\t\troundArray[j] = roundArray[pointNums - 1 - j];\n\t}\n}\n```\n做完这些，我们就可以根据前面两步的结果，计算最终中心点的值了\n```javascript\nvar temp=0,temp1=0,temp2=0;\nfor (var m = 0; m < pointNums; m++) {  //求和\n\ttemp += imageDatas.data[roundArray[m]] * gaosiData[m];\n\ttemp1 += imageDatas.data[roundArray[m]+1] * gaosiData[m];\n\ttemp2 += imageDatas.data[roundArray[m]+2] * gaosiData[m];\n}\nimageDatas.data[i] = temp;\nimageDatas.data[i+1] = temp1;\nimageDatas.data[i+2] = temp2;\nimageDatas.data[i+3] = 255;\n```\n效果图如下\n![canvas](/images/images2canvas/canvas7.png)\n# 结论\n这一篇是在前面的文章基础上一步步推导过来的，高斯模糊本身不难，只要掌握原理即可很容易做到，本篇所写代码没有做性能优化，读者可以进一步开发，优化性能，功能解耦。\n实验平台：[点这里](https://codepen.io/jackfredzk/pen/egqBPG)","slug":"images-2-canvas2","published":1,"updated":"2017-06-27T00:54:58.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot980006wsawens5ztiz","content":"<p>高斯模糊是根据一个像素周围的像素的值通过复杂的计算获得一个与周围像素近似值的技术，如果只是简单的判断，那就是马赛克了。<br><a id=\"more\"></a><br>资料参考：阮老师的<a href=\"http://blog.csdn.net/jiandanjinxin/article/details/51281828\" target=\"_blank\" rel=\"noopener\">高斯模糊的算法</a></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><p>读过阮老师的文章我们知道以下几点</p>\n<ul>\n<li>所谓”模糊”，可以理解成每一个像素都取周边像素的平均值。</li>\n<li>“中间点”取”周围点”的平均值，就会失去细节。</li>\n<li>取值范围越大，”模糊效果”越强烈。</li>\n<li>正态分布显然是一种可取的权重分配模式。</li>\n<li>利用状态发布的权重值可以算出中心点合适的加权平均值。</li>\n<li>图像都是二维的，所以我们需要二维正态分布。</li>\n<li>如果一个点处于边界，周边没有足够的点，就把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</li>\n</ul>\n<p>矩阵函数如下：<br><img src=\"/images/images2canvas/canvas5.png\" alt=\"canvas\"></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>有了理论和函数支持，做起来就比较容易了<br>我们先尝试做一个模糊半径为1像素的图。<br>在半径为1像素的情况下，中心点需要知道周围8个点的权重值，利用前面的函数，写出下面的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lisanzhi = <span class=\"number\">0.9</span>;  <span class=\"comment\">//离散值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"number\">1</span>;  <span class=\"comment\">//设半径为1像素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zhijing = <span class=\"number\">2</span>*r + <span class=\"number\">1</span>;  <span class=\"comment\">//直径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pointNums = zhijing*zhijing;  <span class=\"comment\">//需要计算点的数量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleValue = <span class=\"built_in\">Math</span>.ceil(pointNums/<span class=\"number\">2</span>);  <span class=\"comment\">//中值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"number\">1</span>/(<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * lisanzhi * lisanzhi);  <span class=\"comment\">//公式中一样的下半部分</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gaosiData = [];  <span class=\"comment\">//存储结果</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; pointNums; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.abs(i%zhijing - r);  <span class=\"comment\">//获取对应值的x、y值</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> y = <span class=\"built_in\">Math</span>.abs(r - <span class=\"built_in\">parseInt</span>(i/zhijing));</span><br><span class=\"line\">\tgaosiData[i] = <span class=\"built_in\">Math</span>.pow(<span class=\"built_in\">Math</span>.E , <span class=\"number\">0</span> - (x*x + y*y)/(<span class=\"number\">2</span> * lisanzhi * lisanzhi)) * temp;  <span class=\"comment\">//套用公式计算</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = gaosiData.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;  <span class=\"comment\">//求和</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">gaosiData = gaosiData.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;  <span class=\"comment\">//求权重</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item/sum;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>结果如下<br><img src=\"/images/images2canvas/canvas6.png\" alt=\"canvas\"><br>接下来就是求中心点周围的点在数组数据中的下标值，实现如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> roundArray = [],  <span class=\"comment\">//用来存放结果</span></span><br><span class=\"line\">maxIndex = canvas.width * canvas.height * <span class=\"number\">4</span>;  <span class=\"comment\">//数组数据中最大下标</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; pointNums; k++) &#123;  <span class=\"comment\">//根据下标和中心点的下标距离，求出真正下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> juli = k - middleValue + <span class=\"number\">1</span>,</span><br><span class=\"line\">\tbeishu = <span class=\"built_in\">parseInt</span>(juli/zhijing),</span><br><span class=\"line\">\tyushu = juli%zhijing;</span><br><span class=\"line\">\troundArray[k] = i + <span class=\"number\">4</span>*(beishu*canvas.width+yushu);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; roundArray.length; j++) &#123;  <span class=\"comment\">//因为部分点在边缘，所以一些下标超过正常范围的就取对应点的下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (roundArray[j] &lt; <span class=\"number\">0</span> || roundArray[j] &gt; maxIndex) &#123;</span><br><span class=\"line\">\t\troundArray[j] = roundArray[pointNums - <span class=\"number\">1</span> - j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>做完这些，我们就可以根据前面两步的结果，计算最终中心点的值了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> temp=<span class=\"number\">0</span>,temp1=<span class=\"number\">0</span>,temp2=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> m = <span class=\"number\">0</span>; m &lt; pointNums; m++) &#123;  <span class=\"comment\">//求和</span></span><br><span class=\"line\">\ttemp += imageDatas.data[roundArray[m]] * gaosiData[m];</span><br><span class=\"line\">\ttemp1 += imageDatas.data[roundArray[m]+<span class=\"number\">1</span>] * gaosiData[m];</span><br><span class=\"line\">\ttemp2 += imageDatas.data[roundArray[m]+<span class=\"number\">2</span>] * gaosiData[m];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">imageDatas.data[i] = temp;</span><br><span class=\"line\">imageDatas.data[i+<span class=\"number\">1</span>] = temp1;</span><br><span class=\"line\">imageDatas.data[i+<span class=\"number\">2</span>] = temp2;</span><br><span class=\"line\">imageDatas.data[i+<span class=\"number\">3</span>] = <span class=\"number\">255</span>;</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下<br><img src=\"/images/images2canvas/canvas7.png\" alt=\"canvas\"></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>这一篇是在前面的文章基础上一步步推导过来的，高斯模糊本身不难，只要掌握原理即可很容易做到，本篇所写代码没有做性能优化，读者可以进一步开发，优化性能，功能解耦。<br>实验平台：<a href=\"https://codepen.io/jackfredzk/pen/egqBPG\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n","site":{"data":{}},"excerpt":"<p>高斯模糊是根据一个像素周围的像素的值通过复杂的计算获得一个与周围像素近似值的技术，如果只是简单的判断，那就是马赛克了。<br>","more":"<br>资料参考：阮老师的<a href=\"http://blog.csdn.net/jiandanjinxin/article/details/51281828\" target=\"_blank\" rel=\"noopener\">高斯模糊的算法</a></p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><p>读过阮老师的文章我们知道以下几点</p>\n<ul>\n<li>所谓”模糊”，可以理解成每一个像素都取周边像素的平均值。</li>\n<li>“中间点”取”周围点”的平均值，就会失去细节。</li>\n<li>取值范围越大，”模糊效果”越强烈。</li>\n<li>正态分布显然是一种可取的权重分配模式。</li>\n<li>利用状态发布的权重值可以算出中心点合适的加权平均值。</li>\n<li>图像都是二维的，所以我们需要二维正态分布。</li>\n<li>如果一个点处于边界，周边没有足够的点，就把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</li>\n</ul>\n<p>矩阵函数如下：<br><img src=\"/images/images2canvas/canvas5.png\" alt=\"canvas\"></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>有了理论和函数支持，做起来就比较容易了<br>我们先尝试做一个模糊半径为1像素的图。<br>在半径为1像素的情况下，中心点需要知道周围8个点的权重值，利用前面的函数，写出下面的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lisanzhi = <span class=\"number\">0.9</span>;  <span class=\"comment\">//离散值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"number\">1</span>;  <span class=\"comment\">//设半径为1像素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> zhijing = <span class=\"number\">2</span>*r + <span class=\"number\">1</span>;  <span class=\"comment\">//直径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pointNums = zhijing*zhijing;  <span class=\"comment\">//需要计算点的数量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> middleValue = <span class=\"built_in\">Math</span>.ceil(pointNums/<span class=\"number\">2</span>);  <span class=\"comment\">//中值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"number\">1</span>/(<span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * lisanzhi * lisanzhi);  <span class=\"comment\">//公式中一样的下半部分</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gaosiData = [];  <span class=\"comment\">//存储结果</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; pointNums; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x = <span class=\"built_in\">Math</span>.abs(i%zhijing - r);  <span class=\"comment\">//获取对应值的x、y值</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> y = <span class=\"built_in\">Math</span>.abs(r - <span class=\"built_in\">parseInt</span>(i/zhijing));</span><br><span class=\"line\">\tgaosiData[i] = <span class=\"built_in\">Math</span>.pow(<span class=\"built_in\">Math</span>.E , <span class=\"number\">0</span> - (x*x + y*y)/(<span class=\"number\">2</span> * lisanzhi * lisanzhi)) * temp;  <span class=\"comment\">//套用公式计算</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = gaosiData.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;  <span class=\"comment\">//求和</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">gaosiData = gaosiData.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;  <span class=\"comment\">//求权重</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item/sum;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>结果如下<br><img src=\"/images/images2canvas/canvas6.png\" alt=\"canvas\"><br>接下来就是求中心点周围的点在数组数据中的下标值，实现如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> roundArray = [],  <span class=\"comment\">//用来存放结果</span></span><br><span class=\"line\">maxIndex = canvas.width * canvas.height * <span class=\"number\">4</span>;  <span class=\"comment\">//数组数据中最大下标</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; pointNums; k++) &#123;  <span class=\"comment\">//根据下标和中心点的下标距离，求出真正下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> juli = k - middleValue + <span class=\"number\">1</span>,</span><br><span class=\"line\">\tbeishu = <span class=\"built_in\">parseInt</span>(juli/zhijing),</span><br><span class=\"line\">\tyushu = juli%zhijing;</span><br><span class=\"line\">\troundArray[k] = i + <span class=\"number\">4</span>*(beishu*canvas.width+yushu);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; roundArray.length; j++) &#123;  <span class=\"comment\">//因为部分点在边缘，所以一些下标超过正常范围的就取对应点的下标</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (roundArray[j] &lt; <span class=\"number\">0</span> || roundArray[j] &gt; maxIndex) &#123;</span><br><span class=\"line\">\t\troundArray[j] = roundArray[pointNums - <span class=\"number\">1</span> - j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>做完这些，我们就可以根据前面两步的结果，计算最终中心点的值了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> temp=<span class=\"number\">0</span>,temp1=<span class=\"number\">0</span>,temp2=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> m = <span class=\"number\">0</span>; m &lt; pointNums; m++) &#123;  <span class=\"comment\">//求和</span></span><br><span class=\"line\">\ttemp += imageDatas.data[roundArray[m]] * gaosiData[m];</span><br><span class=\"line\">\ttemp1 += imageDatas.data[roundArray[m]+<span class=\"number\">1</span>] * gaosiData[m];</span><br><span class=\"line\">\ttemp2 += imageDatas.data[roundArray[m]+<span class=\"number\">2</span>] * gaosiData[m];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">imageDatas.data[i] = temp;</span><br><span class=\"line\">imageDatas.data[i+<span class=\"number\">1</span>] = temp1;</span><br><span class=\"line\">imageDatas.data[i+<span class=\"number\">2</span>] = temp2;</span><br><span class=\"line\">imageDatas.data[i+<span class=\"number\">3</span>] = <span class=\"number\">255</span>;</span><br></pre></td></tr></table></figure></p>\n<p>效果图如下<br><img src=\"/images/images2canvas/canvas7.png\" alt=\"canvas\"></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>这一篇是在前面的文章基础上一步步推导过来的，高斯模糊本身不难，只要掌握原理即可很容易做到，本篇所写代码没有做性能优化，读者可以进一步开发，优化性能，功能解耦。<br>实验平台：<a href=\"https://codepen.io/jackfredzk/pen/egqBPG\" target=\"_blank\" rel=\"noopener\">点这里</a></p>"},{"title":"impress简易教程","date":"2016-12-23T02:26:37.000Z","_content":"快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。\n<!-- more -->\n# 效果展示\n[聚众编码！](https://juzoom.github.io/)\n# 原理介绍\n这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。\n# 项目地址和文档地址\n[项目地址](https://github.com/impress/impress.js)\n[文档地址](https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md)\n# 起步\n首先要引入impress.js文件，和普通的js引入方式是一样的\n然后在文档里加入代码\n```html\n<div id=\"impress\"></div> //id可以自定义\n```\n然后在引入的impress文件下插入这段代码\n```javascript\nimpress( \"root\" ); //这里是你的id，如果id是impress，则这一步省略\nimpress().init();\n```\n# 插入ppt\n## 基础\n在你指定的根div中间插入ppt类的div\n```html\n<div id=\"impress\">\n\t<div id=\"test\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test\n\t</div>\n</div>\n```\n这里div的class必须要有'step'，id可以有可以没有，如果没有，impress就会把你的id默认变成'step-1'这样的。\n'data-x'和'data-y'这样的就是ppt的定位\n## 2D平移\n如果我们再加入一段ppt类的div，页面就可以平移动起来了\n```html\n<div id=\"impress\">\n\t<div id=\"test1\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test1\n\t</div>\n\t<div id=\"test2\" class=\"step\" data-x=\"1600\" data-y=\"0\">\n\t    test2\n\t</div>\n</div>\n```\n## 缩放\n我们想加入缩放的话只要加入'data-scale'这个属性就可以了，赋值为数字，越大缩放越大\n```html\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-scale=\"3\">\n    test\n</div>\n```\n## 2D旋转\n如果想做旋转效果的ppt，加入'data-rotate'属性，赋值范围0~360\n```html\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-rotate=\"90\" data-scale=\"3\">\n    test\n</div>\n```\n## 3D定位\n加入'data-z'属性实现3D空间上的定位\n## 3D翻滚\n可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个'data-rotate-x'和'data-rotate-y'，分别实现横向和纵向翻滚。\n```html\n<div id=\"test\" class=\"step\" data-x=\"6200\" data-y=\"4300\" data-z=\"-100\" data-rotate-x=\"-40\" data-rotate-y=\"10\">\n    test\n</div>\n```\n# 方法接口\nimpress还给出了方法接口\n## .init()\n初始化用途\n```javascript\nvar api = impress();\napi.init();\n```\n## .next()\n切换下一个ppt的功能\n```javascript\nvar api = impress();\napi.init();\napi.next(); //使用方法下面都一样\n```\n## .prev()\n切换前一个ppt的功能\n## .goto( stepIndex | stepElementId | stepElement, [ duration ] )\n切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间\n# 事件监听接口\nimpress给出了两个事件监听接口\nimpress:stepenter 切入当前ppt的事件\nimpress:stepleave 切出当前ppt的事件\n```javascript\nvar rootElement = document.getElementById( \"impress\" );\nrootElement.addEventListener( \"impress:stepenter\", function() {\n\tvar currentStep = document.querySelector( \".present\" );\n\tconsole.log( \"Entered the Step Element '\" + currentStep.id + \"'\" );\n});\n\nrootElement.addEventListener( \"impress:stepleave\", function(event) {\n\tvar currentStep = event.target\n\tconsole.log( \"Left the Step Element '\" + currentStep.id + \"'\" );\n});\n```\n# 样式\nimpress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！","source":"_posts/impress简易教程.md","raw":"---\ntitle: impress简易教程\ndate: 2016-12-23 10:26:37\ncategories: [博客]\ntags: [impress,js框架]\n---\n快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。\n<!-- more -->\n# 效果展示\n[聚众编码！](https://juzoom.github.io/)\n# 原理介绍\n这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。\n# 项目地址和文档地址\n[项目地址](https://github.com/impress/impress.js)\n[文档地址](https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md)\n# 起步\n首先要引入impress.js文件，和普通的js引入方式是一样的\n然后在文档里加入代码\n```html\n<div id=\"impress\"></div> //id可以自定义\n```\n然后在引入的impress文件下插入这段代码\n```javascript\nimpress( \"root\" ); //这里是你的id，如果id是impress，则这一步省略\nimpress().init();\n```\n# 插入ppt\n## 基础\n在你指定的根div中间插入ppt类的div\n```html\n<div id=\"impress\">\n\t<div id=\"test\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test\n\t</div>\n</div>\n```\n这里div的class必须要有'step'，id可以有可以没有，如果没有，impress就会把你的id默认变成'step-1'这样的。\n'data-x'和'data-y'这样的就是ppt的定位\n## 2D平移\n如果我们再加入一段ppt类的div，页面就可以平移动起来了\n```html\n<div id=\"impress\">\n\t<div id=\"test1\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test1\n\t</div>\n\t<div id=\"test2\" class=\"step\" data-x=\"1600\" data-y=\"0\">\n\t    test2\n\t</div>\n</div>\n```\n## 缩放\n我们想加入缩放的话只要加入'data-scale'这个属性就可以了，赋值为数字，越大缩放越大\n```html\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-scale=\"3\">\n    test\n</div>\n```\n## 2D旋转\n如果想做旋转效果的ppt，加入'data-rotate'属性，赋值范围0~360\n```html\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-rotate=\"90\" data-scale=\"3\">\n    test\n</div>\n```\n## 3D定位\n加入'data-z'属性实现3D空间上的定位\n## 3D翻滚\n可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个'data-rotate-x'和'data-rotate-y'，分别实现横向和纵向翻滚。\n```html\n<div id=\"test\" class=\"step\" data-x=\"6200\" data-y=\"4300\" data-z=\"-100\" data-rotate-x=\"-40\" data-rotate-y=\"10\">\n    test\n</div>\n```\n# 方法接口\nimpress还给出了方法接口\n## .init()\n初始化用途\n```javascript\nvar api = impress();\napi.init();\n```\n## .next()\n切换下一个ppt的功能\n```javascript\nvar api = impress();\napi.init();\napi.next(); //使用方法下面都一样\n```\n## .prev()\n切换前一个ppt的功能\n## .goto( stepIndex | stepElementId | stepElement, [ duration ] )\n切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间\n# 事件监听接口\nimpress给出了两个事件监听接口\nimpress:stepenter 切入当前ppt的事件\nimpress:stepleave 切出当前ppt的事件\n```javascript\nvar rootElement = document.getElementById( \"impress\" );\nrootElement.addEventListener( \"impress:stepenter\", function() {\n\tvar currentStep = document.querySelector( \".present\" );\n\tconsole.log( \"Entered the Step Element '\" + currentStep.id + \"'\" );\n});\n\nrootElement.addEventListener( \"impress:stepleave\", function(event) {\n\tvar currentStep = event.target\n\tconsole.log( \"Left the Step Element '\" + currentStep.id + \"'\" );\n});\n```\n# 样式\nimpress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！","slug":"impress简易教程","published":1,"updated":"2017-06-27T00:54:43.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9a0007wsawrc5kj5p3","content":"<p>快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。<br><a id=\"more\"></a></p>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p><a href=\"https://juzoom.github.io/\" target=\"_blank\" rel=\"noopener\">聚众编码！</a></p>\n<h1 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a>原理介绍</h1><p>这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。</p>\n<h1 id=\"项目地址和文档地址\"><a href=\"#项目地址和文档地址\" class=\"headerlink\" title=\"项目地址和文档地址\"></a>项目地址和文档地址</h1><p><a href=\"https://github.com/impress/impress.js\" target=\"_blank\" rel=\"noopener\">项目地址</a><br><a href=\"https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><p>首先要引入impress.js文件，和普通的js引入方式是一样的<br>然后在文档里加入代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"impress\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> //id可以自定义</span><br></pre></td></tr></table></figure></p>\n<p>然后在引入的impress文件下插入这段代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impress( <span class=\"string\">\"root\"</span> ); <span class=\"comment\">//这里是你的id，如果id是impress，则这一步省略</span></span><br><span class=\"line\">impress().init();</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"插入ppt\"><a href=\"#插入ppt\" class=\"headerlink\" title=\"插入ppt\"></a>插入ppt</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>在你指定的根div中间插入ppt类的div<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"impress\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">\t    test</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里div的class必须要有’step’，id可以有可以没有，如果没有，impress就会把你的id默认变成’step-1’这样的。<br>‘data-x’和’data-y’这样的就是ppt的定位</p>\n<h2 id=\"2D平移\"><a href=\"#2D平移\" class=\"headerlink\" title=\"2D平移\"></a>2D平移</h2><p>如果我们再加入一段ppt类的div，页面就可以平移动起来了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"impress\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">\t    test1</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"1600\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">\t    test2</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h2><p>我们想加入缩放的话只要加入’data-scale’这个属性就可以了，赋值为数字，越大缩放越大<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"1600\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-scale</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">    test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2D旋转\"><a href=\"#2D旋转\" class=\"headerlink\" title=\"2D旋转\"></a>2D旋转</h2><p>如果想做旋转效果的ppt，加入’data-rotate’属性，赋值范围0~360<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"1600\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-rotate</span>=<span class=\"string\">\"90\"</span> <span class=\"attr\">data-scale</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">    test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3D定位\"><a href=\"#3D定位\" class=\"headerlink\" title=\"3D定位\"></a>3D定位</h2><p>加入’data-z’属性实现3D空间上的定位</p>\n<h2 id=\"3D翻滚\"><a href=\"#3D翻滚\" class=\"headerlink\" title=\"3D翻滚\"></a>3D翻滚</h2><p>可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个’data-rotate-x’和’data-rotate-y’，分别实现横向和纵向翻滚。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"6200\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"4300\"</span> <span class=\"attr\">data-z</span>=<span class=\"string\">\"-100\"</span> <span class=\"attr\">data-rotate-x</span>=<span class=\"string\">\"-40\"</span> <span class=\"attr\">data-rotate-y</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">    test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"方法接口\"><a href=\"#方法接口\" class=\"headerlink\" title=\"方法接口\"></a>方法接口</h1><p>impress还给出了方法接口</p>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\".init()\"></a>.init()</h2><p>初始化用途<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> api = impress();</span><br><span class=\"line\">api.init();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\".next()\"></a>.next()</h2><p>切换下一个ppt的功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> api = impress();</span><br><span class=\"line\">api.init();</span><br><span class=\"line\">api.next(); <span class=\"comment\">//使用方法下面都一样</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\".prev()\"></a>.prev()</h2><p>切换前一个ppt的功能</p>\n<h2 id=\"goto-stepIndex-stepElementId-stepElement-duration\"><a href=\"#goto-stepIndex-stepElementId-stepElement-duration\" class=\"headerlink\" title=\".goto( stepIndex | stepElementId | stepElement, [ duration ] )\"></a>.goto( stepIndex | stepElementId | stepElement, [ duration ] )</h2><p>切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间</p>\n<h1 id=\"事件监听接口\"><a href=\"#事件监听接口\" class=\"headerlink\" title=\"事件监听接口\"></a>事件监听接口</h1><p>impress给出了两个事件监听接口<br>impress:stepenter 切入当前ppt的事件<br>impress:stepleave 切出当前ppt的事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootElement = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">\"impress\"</span> );</span><br><span class=\"line\">rootElement.addEventListener( <span class=\"string\">\"impress:stepenter\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> currentStep = <span class=\"built_in\">document</span>.querySelector( <span class=\"string\">\".present\"</span> );</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"string\">\"Entered the Step Element '\"</span> + currentStep.id + <span class=\"string\">\"'\"</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rootElement.addEventListener( <span class=\"string\">\"impress:stepleave\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> currentStep = event.target</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"string\">\"Left the Step Element '\"</span> + currentStep.id + <span class=\"string\">\"'\"</span> );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>impress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！</p>\n","site":{"data":{}},"excerpt":"<p>快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。<br>","more":"</p>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p><a href=\"https://juzoom.github.io/\" target=\"_blank\" rel=\"noopener\">聚众编码！</a></p>\n<h1 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a>原理介绍</h1><p>这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。</p>\n<h1 id=\"项目地址和文档地址\"><a href=\"#项目地址和文档地址\" class=\"headerlink\" title=\"项目地址和文档地址\"></a>项目地址和文档地址</h1><p><a href=\"https://github.com/impress/impress.js\" target=\"_blank\" rel=\"noopener\">项目地址</a><br><a href=\"https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md\" target=\"_blank\" rel=\"noopener\">文档地址</a></p>\n<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><p>首先要引入impress.js文件，和普通的js引入方式是一样的<br>然后在文档里加入代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"impress\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> //id可以自定义</span><br></pre></td></tr></table></figure></p>\n<p>然后在引入的impress文件下插入这段代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impress( <span class=\"string\">\"root\"</span> ); <span class=\"comment\">//这里是你的id，如果id是impress，则这一步省略</span></span><br><span class=\"line\">impress().init();</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"插入ppt\"><a href=\"#插入ppt\" class=\"headerlink\" title=\"插入ppt\"></a>插入ppt</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>在你指定的根div中间插入ppt类的div<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"impress\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">\t    test</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这里div的class必须要有’step’，id可以有可以没有，如果没有，impress就会把你的id默认变成’step-1’这样的。<br>‘data-x’和’data-y’这样的就是ppt的定位</p>\n<h2 id=\"2D平移\"><a href=\"#2D平移\" class=\"headerlink\" title=\"2D平移\"></a>2D平移</h2><p>如果我们再加入一段ppt类的div，页面就可以平移动起来了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"impress\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">\t    test1</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"1600\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">\t    test2</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h2><p>我们想加入缩放的话只要加入’data-scale’这个属性就可以了，赋值为数字，越大缩放越大<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"1600\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-scale</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">    test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2D旋转\"><a href=\"#2D旋转\" class=\"headerlink\" title=\"2D旋转\"></a>2D旋转</h2><p>如果想做旋转效果的ppt，加入’data-rotate’属性，赋值范围0~360<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"1600\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">data-rotate</span>=<span class=\"string\">\"90\"</span> <span class=\"attr\">data-scale</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">    test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3D定位\"><a href=\"#3D定位\" class=\"headerlink\" title=\"3D定位\"></a>3D定位</h2><p>加入’data-z’属性实现3D空间上的定位</p>\n<h2 id=\"3D翻滚\"><a href=\"#3D翻滚\" class=\"headerlink\" title=\"3D翻滚\"></a>3D翻滚</h2><p>可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个’data-rotate-x’和’data-rotate-y’，分别实现横向和纵向翻滚。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"step\"</span> <span class=\"attr\">data-x</span>=<span class=\"string\">\"6200\"</span> <span class=\"attr\">data-y</span>=<span class=\"string\">\"4300\"</span> <span class=\"attr\">data-z</span>=<span class=\"string\">\"-100\"</span> <span class=\"attr\">data-rotate-x</span>=<span class=\"string\">\"-40\"</span> <span class=\"attr\">data-rotate-y</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">    test</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"方法接口\"><a href=\"#方法接口\" class=\"headerlink\" title=\"方法接口\"></a>方法接口</h1><p>impress还给出了方法接口</p>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\".init()\"></a>.init()</h2><p>初始化用途<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> api = impress();</span><br><span class=\"line\">api.init();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\".next()\"></a>.next()</h2><p>切换下一个ppt的功能<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> api = impress();</span><br><span class=\"line\">api.init();</span><br><span class=\"line\">api.next(); <span class=\"comment\">//使用方法下面都一样</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\".prev()\"></a>.prev()</h2><p>切换前一个ppt的功能</p>\n<h2 id=\"goto-stepIndex-stepElementId-stepElement-duration\"><a href=\"#goto-stepIndex-stepElementId-stepElement-duration\" class=\"headerlink\" title=\".goto( stepIndex | stepElementId | stepElement, [ duration ] )\"></a>.goto( stepIndex | stepElementId | stepElement, [ duration ] )</h2><p>切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间</p>\n<h1 id=\"事件监听接口\"><a href=\"#事件监听接口\" class=\"headerlink\" title=\"事件监听接口\"></a>事件监听接口</h1><p>impress给出了两个事件监听接口<br>impress:stepenter 切入当前ppt的事件<br>impress:stepleave 切出当前ppt的事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rootElement = <span class=\"built_in\">document</span>.getElementById( <span class=\"string\">\"impress\"</span> );</span><br><span class=\"line\">rootElement.addEventListener( <span class=\"string\">\"impress:stepenter\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> currentStep = <span class=\"built_in\">document</span>.querySelector( <span class=\"string\">\".present\"</span> );</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"string\">\"Entered the Step Element '\"</span> + currentStep.id + <span class=\"string\">\"'\"</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rootElement.addEventListener( <span class=\"string\">\"impress:stepleave\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> currentStep = event.target</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log( <span class=\"string\">\"Left the Step Element '\"</span> + currentStep.id + <span class=\"string\">\"'\"</span> );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>impress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！</p>"},{"title":"关于vue在部分iPhone机型的微信浏览器中出现偶然乱码的bug","date":"2018-09-04T08:36:20.000Z","_content":"今天遇到一个诡异的bug，在部分iPhone手机下，微信访问的网页出现了乱码\n<!-- more -->\n\n其他iPhone就没有这个问题，android手机也没有\n\n于是定位了好久的问题，最终解决了，记录下\n\n是因为框架用的是vue，在打包部署的时候，生成的index.html文件不符合h5规范，只要把index.html文件重新手写一遍就好了\n\n虽然问题解决了，不过还是想吐槽一句：\n\n# 苹果真的很严格ヽ(ｏ`皿′ｏ)ﾉ","source":"_posts/iphone-wechat-charset-bug.md","raw":"---\ntitle: 关于vue在部分iPhone机型的微信浏览器中出现偶然乱码的bug\ndate: 2018-09-04 16:36:20\ncategories: [博客]\ntags: [bug]\n---\n今天遇到一个诡异的bug，在部分iPhone手机下，微信访问的网页出现了乱码\n<!-- more -->\n\n其他iPhone就没有这个问题，android手机也没有\n\n于是定位了好久的问题，最终解决了，记录下\n\n是因为框架用的是vue，在打包部署的时候，生成的index.html文件不符合h5规范，只要把index.html文件重新手写一遍就好了\n\n虽然问题解决了，不过还是想吐槽一句：\n\n# 苹果真的很严格ヽ(ｏ`皿′ｏ)ﾉ","slug":"iphone-wechat-charset-bug","published":1,"updated":"2018-09-04T08:52:33.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9b0008wsaw5wfhionb","content":"<p>今天遇到一个诡异的bug，在部分iPhone手机下，微信访问的网页出现了乱码<br><a id=\"more\"></a></p>\n<p>其他iPhone就没有这个问题，android手机也没有</p>\n<p>于是定位了好久的问题，最终解决了，记录下</p>\n<p>是因为框架用的是vue，在打包部署的时候，生成的index.html文件不符合h5规范，只要把index.html文件重新手写一遍就好了</p>\n<p>虽然问题解决了，不过还是想吐槽一句：</p>\n<h1 id=\"苹果真的很严格ヽ-o-皿′o-ﾉ\"><a href=\"#苹果真的很严格ヽ-o-皿′o-ﾉ\" class=\"headerlink\" title=\"苹果真的很严格ヽ(ｏ`皿′ｏ)ﾉ\"></a>苹果真的很严格ヽ(ｏ`皿′ｏ)ﾉ</h1>","site":{"data":{}},"excerpt":"<p>今天遇到一个诡异的bug，在部分iPhone手机下，微信访问的网页出现了乱码<br>","more":"</p>\n<p>其他iPhone就没有这个问题，android手机也没有</p>\n<p>于是定位了好久的问题，最终解决了，记录下</p>\n<p>是因为框架用的是vue，在打包部署的时候，生成的index.html文件不符合h5规范，只要把index.html文件重新手写一遍就好了</p>\n<p>虽然问题解决了，不过还是想吐槽一句：</p>\n<h1 id=\"苹果真的很严格ヽ-o-皿′o-ﾉ\"><a href=\"#苹果真的很严格ヽ-o-皿′o-ﾉ\" class=\"headerlink\" title=\"苹果真的很严格ヽ(ｏ`皿′ｏ)ﾉ\"></a>苹果真的很严格ヽ(ｏ`皿′ｏ)ﾉ</h1>"},{"title":"iframe嵌套页面滚动时jQuery的offset的值不准的bug","date":"2018-03-05T03:25:47.000Z","_content":"记录一下这几天遇到的一个诡异的bug\n<!-- more -->\n最近项目需求，要做一个气泡卡片的功能，因为不想引入新的库发生未知bug，于是自己手写了一个，定位通过jquery的offset方法来获取\n\n项目的布局是通过iframe嵌套方式来布局的，结果发现在部分页面下，滚动后点击元素出现气泡，会发生气泡定位不准的情况\n![popover](/images/jqueryOffsetBug/popver.png)\n\n经过多次debugger后确定不是我的代码问题，于是查看jquery的源码\n```javascript\nif(arguments.length) return e === t ? this : this.each(function(t) {\n        v.offset.setOffset(this, e, t)\n    });\n    var n, r, i, s, o, u, a, f = {\n            top: 0,\n            left: 0\n        },\n        l = this[0],\n        c = l && l.ownerDocument;\n    if(!c) return;\n        return(r = c.body) === l ? v.offset.bodyOffset(l) : (n = c.documentElement, v.contains(n, l) ? (typeof l.getBoundingClientRect != \"undefined\" && (f = l.getBoundingClientRect()), i = tr(c), s = n.clientTop || r.clientTop || 0, o = n.clientLeft || r.clientLeft || 0, u = i.pageYOffset || n.scrollTop, a = i.pageXOffset || n.scrollLeft, {\n            top: f.top + u - s,\n            left: f.left + a - o\n        }) : f)\n```\njquery中的offset的top是通过元素的getBoundingClientRect().top + window.scrollY - clientTop计算出来的。\n\n这本来是没有什么问题的，但是上文提到过项目的整个页面是通过iframe来布局的，通过我不断的对比发现，window.scrollY在滚动的时候的值有时候会不正确，即在页面滚动的时候window.scrollY会少掉一个document.body.scrollTop的值。\n\n我们只要在代码中加上这个值就可以修复这个bug ","source":"_posts/jqueryOffsetBug.md","raw":"---\ntitle: iframe嵌套页面滚动时jQuery的offset的值不准的bug\ndate: 2018-03-05 11:25:47\ntags: bug,jquery\n---\n记录一下这几天遇到的一个诡异的bug\n<!-- more -->\n最近项目需求，要做一个气泡卡片的功能，因为不想引入新的库发生未知bug，于是自己手写了一个，定位通过jquery的offset方法来获取\n\n项目的布局是通过iframe嵌套方式来布局的，结果发现在部分页面下，滚动后点击元素出现气泡，会发生气泡定位不准的情况\n![popover](/images/jqueryOffsetBug/popver.png)\n\n经过多次debugger后确定不是我的代码问题，于是查看jquery的源码\n```javascript\nif(arguments.length) return e === t ? this : this.each(function(t) {\n        v.offset.setOffset(this, e, t)\n    });\n    var n, r, i, s, o, u, a, f = {\n            top: 0,\n            left: 0\n        },\n        l = this[0],\n        c = l && l.ownerDocument;\n    if(!c) return;\n        return(r = c.body) === l ? v.offset.bodyOffset(l) : (n = c.documentElement, v.contains(n, l) ? (typeof l.getBoundingClientRect != \"undefined\" && (f = l.getBoundingClientRect()), i = tr(c), s = n.clientTop || r.clientTop || 0, o = n.clientLeft || r.clientLeft || 0, u = i.pageYOffset || n.scrollTop, a = i.pageXOffset || n.scrollLeft, {\n            top: f.top + u - s,\n            left: f.left + a - o\n        }) : f)\n```\njquery中的offset的top是通过元素的getBoundingClientRect().top + window.scrollY - clientTop计算出来的。\n\n这本来是没有什么问题的，但是上文提到过项目的整个页面是通过iframe来布局的，通过我不断的对比发现，window.scrollY在滚动的时候的值有时候会不正确，即在页面滚动的时候window.scrollY会少掉一个document.body.scrollTop的值。\n\n我们只要在代码中加上这个值就可以修复这个bug ","slug":"jqueryOffsetBug","published":1,"updated":"2018-03-05T05:26:27.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9f000cwsawkdirt6xj","content":"<p>记录一下这几天遇到的一个诡异的bug<br><a id=\"more\"></a><br>最近项目需求，要做一个气泡卡片的功能，因为不想引入新的库发生未知bug，于是自己手写了一个，定位通过jquery的offset方法来获取</p>\n<p>项目的布局是通过iframe嵌套方式来布局的，结果发现在部分页面下，滚动后点击元素出现气泡，会发生气泡定位不准的情况<br><img src=\"/images/jqueryOffsetBug/popver.png\" alt=\"popover\"></p>\n<p>经过多次debugger后确定不是我的代码问题，于是查看jquery的源码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length) <span class=\"keyword\">return</span> e === t ? <span class=\"keyword\">this</span> : <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">        v.offset.setOffset(<span class=\"keyword\">this</span>, e, t)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n, r, i, s, o, u, a, f = &#123;</span><br><span class=\"line\">            top: <span class=\"number\">0</span>,</span><br><span class=\"line\">            left: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        l = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>],</span><br><span class=\"line\">        c = l &amp;&amp; l.ownerDocument;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!c) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(r = c.body) === l ? v.offset.bodyOffset(l) : (n = c.documentElement, v.contains(n, l) ? (<span class=\"keyword\">typeof</span> l.getBoundingClientRect != <span class=\"string\">\"undefined\"</span> &amp;&amp; (f = l.getBoundingClientRect()), i = tr(c), s = n.clientTop || r.clientTop || <span class=\"number\">0</span>, o = n.clientLeft || r.clientLeft || <span class=\"number\">0</span>, u = i.pageYOffset || n.scrollTop, a = i.pageXOffset || n.scrollLeft, &#123;</span><br><span class=\"line\">            top: f.top + u - s,</span><br><span class=\"line\">            left: f.left + a - o</span><br><span class=\"line\">        &#125;) : f)</span><br></pre></td></tr></table></figure></p>\n<p>jquery中的offset的top是通过元素的getBoundingClientRect().top + window.scrollY - clientTop计算出来的。</p>\n<p>这本来是没有什么问题的，但是上文提到过项目的整个页面是通过iframe来布局的，通过我不断的对比发现，window.scrollY在滚动的时候的值有时候会不正确，即在页面滚动的时候window.scrollY会少掉一个document.body.scrollTop的值。</p>\n<p>我们只要在代码中加上这个值就可以修复这个bug </p>\n","site":{"data":{}},"excerpt":"<p>记录一下这几天遇到的一个诡异的bug<br>","more":"<br>最近项目需求，要做一个气泡卡片的功能，因为不想引入新的库发生未知bug，于是自己手写了一个，定位通过jquery的offset方法来获取</p>\n<p>项目的布局是通过iframe嵌套方式来布局的，结果发现在部分页面下，滚动后点击元素出现气泡，会发生气泡定位不准的情况<br><img src=\"/images/jqueryOffsetBug/popver.png\" alt=\"popover\"></p>\n<p>经过多次debugger后确定不是我的代码问题，于是查看jquery的源码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>.length) <span class=\"keyword\">return</span> e === t ? <span class=\"keyword\">this</span> : <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">        v.offset.setOffset(<span class=\"keyword\">this</span>, e, t)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n, r, i, s, o, u, a, f = &#123;</span><br><span class=\"line\">            top: <span class=\"number\">0</span>,</span><br><span class=\"line\">            left: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        l = <span class=\"keyword\">this</span>[<span class=\"number\">0</span>],</span><br><span class=\"line\">        c = l &amp;&amp; l.ownerDocument;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!c) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(r = c.body) === l ? v.offset.bodyOffset(l) : (n = c.documentElement, v.contains(n, l) ? (<span class=\"keyword\">typeof</span> l.getBoundingClientRect != <span class=\"string\">\"undefined\"</span> &amp;&amp; (f = l.getBoundingClientRect()), i = tr(c), s = n.clientTop || r.clientTop || <span class=\"number\">0</span>, o = n.clientLeft || r.clientLeft || <span class=\"number\">0</span>, u = i.pageYOffset || n.scrollTop, a = i.pageXOffset || n.scrollLeft, &#123;</span><br><span class=\"line\">            top: f.top + u - s,</span><br><span class=\"line\">            left: f.left + a - o</span><br><span class=\"line\">        &#125;) : f)</span><br></pre></td></tr></table></figure></p>\n<p>jquery中的offset的top是通过元素的getBoundingClientRect().top + window.scrollY - clientTop计算出来的。</p>\n<p>这本来是没有什么问题的，但是上文提到过项目的整个页面是通过iframe来布局的，通过我不断的对比发现，window.scrollY在滚动的时候的值有时候会不正确，即在页面滚动的时候window.scrollY会少掉一个document.body.scrollTop的值。</p>\n<p>我们只要在代码中加上这个值就可以修复这个bug </p>"},{"title":"flex布局","date":"2019-01-22T01:07:40.000Z","_content":"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n<!-- more -->\n![flex](/images/mobile-adaptive/bg2015071004.png)\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。\n# 容器的属性\n## flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n```css\n.box {\n    flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071005.png)\n## flex-wrap属性\n默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n```css\n.box{\n    flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071006.png)\n## flex-flow属性\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n```css\n.box {\n    flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n## justify-content属性\njustify-content属性定义了项目在主轴上的对齐方式。\n```css\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071010.png)\n## align-items属性\nalign-items属性定义项目在交叉轴上如何对齐。\n```css\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071011.png)\n## align-content属性\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n```css\n.box {\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071012.png)\n# 容器成员的属性\n## order属性\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n```css\n.item {\n    order: <integer>;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071013.png)\n## flex-grow属性\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n![flex](/images/mobile-adaptive/bg2015071014.png)\n## flex-shrink属性\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n![flex](/images/mobile-adaptive/bg2015071015.jpg)\n## flex-basis属性\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n```css\n.item {\n    flex-basis: <length> | auto; /* default auto */\n}\n```\n## flex属性\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n```css\n.item {\n    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n## align-self属性\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n```css\n.item {\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071016.png)\n# 最后的例子和说明\nflex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况：\n> auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。\n> content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。\n> 百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。\n```html\n<div class=\"parent\">\n    <div class=\"item-1\"></div>\n    <div class=\"item-2\"></div>\n    <div class=\"item-3\"></div>\n</div>\n \n<style type=\"text/css\">\n    .parent {\n        display: flex;\n        width: 600px;\n    }\n    .parent > div {\n        height: 100px;\n    }\n    .item-1 {\n        width: 140px;\n        flex: 2 1 0%;\n        background: blue;\n    }\n    .item-2 {\n        width: 100px;\n        flex: 2 1 auto;\n        background: darkblue;\n    }\n    .item-3 {\n        flex: 1 1 200px;\n        background: lightblue;\n    }\n</style>\n```\n主轴上父容器总尺寸为 600px\n子元素的总基准值是：0% + auto + 200px = 300px，其中\n- 0% 即 0 宽度\n- auto 对应取主尺寸即 100px\n\n故剩余空间为 600px - 300px = 300px\n伸缩放大系数之和为： 2 + 2 + 1 = 5\n剩余空间分配如下：\n- item-1 和 item-2 各分配 2/5，各得 120px\n- item-3 分配 1/5，得 60px\n\n各项目最终宽度为：\n- item-1 = 0% + 120px = 120px\n- item-2 = auto + 120px = 220px\n- item-3 = 200px + 60px = 260px\n\n当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设\n而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间","source":"_posts/flex-mobile.md","raw":"---\ntitle: flex布局\ndate: 2019-01-22 09:07:40\ncategories: [博客]\ntags: [移动端]\n---\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n<!-- more -->\n![flex](/images/mobile-adaptive/bg2015071004.png)\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。\n# 容器的属性\n## flex-direction属性\nflex-direction属性决定主轴的方向（即项目的排列方向）。\n```css\n.box {\n    flex-direction: row | row-reverse | column | column-reverse;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071005.png)\n## flex-wrap属性\n默认情况下，项目都排在一条线（又称\"轴线\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\n```css\n.box{\n    flex-wrap: nowrap | wrap | wrap-reverse;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071006.png)\n## flex-flow属性\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n```css\n.box {\n    flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n## justify-content属性\njustify-content属性定义了项目在主轴上的对齐方式。\n```css\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071010.png)\n## align-items属性\nalign-items属性定义项目在交叉轴上如何对齐。\n```css\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071011.png)\n## align-content属性\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n```css\n.box {\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071012.png)\n# 容器成员的属性\n## order属性\norder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n```css\n.item {\n    order: <integer>;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071013.png)\n## flex-grow属性\nflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n![flex](/images/mobile-adaptive/bg2015071014.png)\n## flex-shrink属性\nflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n![flex](/images/mobile-adaptive/bg2015071015.jpg)\n## flex-basis属性\nflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n```css\n.item {\n    flex-basis: <length> | auto; /* default auto */\n}\n```\n## flex属性\nflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n```css\n.item {\n    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n```\n## align-self属性\nalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n```css\n.item {\n    align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n![flex](/images/mobile-adaptive/bg2015071016.png)\n# 最后的例子和说明\nflex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况：\n> auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。\n> content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。\n> 百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。\n```html\n<div class=\"parent\">\n    <div class=\"item-1\"></div>\n    <div class=\"item-2\"></div>\n    <div class=\"item-3\"></div>\n</div>\n \n<style type=\"text/css\">\n    .parent {\n        display: flex;\n        width: 600px;\n    }\n    .parent > div {\n        height: 100px;\n    }\n    .item-1 {\n        width: 140px;\n        flex: 2 1 0%;\n        background: blue;\n    }\n    .item-2 {\n        width: 100px;\n        flex: 2 1 auto;\n        background: darkblue;\n    }\n    .item-3 {\n        flex: 1 1 200px;\n        background: lightblue;\n    }\n</style>\n```\n主轴上父容器总尺寸为 600px\n子元素的总基准值是：0% + auto + 200px = 300px，其中\n- 0% 即 0 宽度\n- auto 对应取主尺寸即 100px\n\n故剩余空间为 600px - 300px = 300px\n伸缩放大系数之和为： 2 + 2 + 1 = 5\n剩余空间分配如下：\n- item-1 和 item-2 各分配 2/5，各得 120px\n- item-3 分配 1/5，得 60px\n\n各项目最终宽度为：\n- item-1 = 0% + 120px = 120px\n- item-2 = auto + 120px = 220px\n- item-3 = 200px + 60px = 260px\n\n当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设\n而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间","slug":"flex-mobile","published":1,"updated":"2019-01-22T05:40:34.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9i000dwsawianbqz47","content":"<p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br><a id=\"more\"></a><br><img src=\"/images/mobile-adaptive/bg2015071004.png\" alt=\"flex\"><br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。</p>\n<h1 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h1><h2 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h2><p>flex-direction属性决定主轴的方向（即项目的排列方向）。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071005.png\" alt=\"flex\"></p>\n<h2 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071006.png\" alt=\"flex\"></p>\n<h2 id=\"flex-flow属性\"><a href=\"#flex-flow属性\" class=\"headerlink\" title=\"flex-flow属性\"></a>flex-flow属性</h2><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h2><p>justify-content属性定义了项目在主轴上的对齐方式。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071010.png\" alt=\"flex\"></p>\n<h2 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h2><p>align-items属性定义项目在交叉轴上如何对齐。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071011.png\" alt=\"flex\"></p>\n<h2 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h2><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071012.png\" alt=\"flex\"></p>\n<h1 id=\"容器成员的属性\"><a href=\"#容器成员的属性\" class=\"headerlink\" title=\"容器成员的属性\"></a>容器成员的属性</h1><h2 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h2><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071013.png\" alt=\"flex\"></p>\n<h2 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h2><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。<br><img src=\"/images/mobile-adaptive/bg2015071014.png\" alt=\"flex\"></p>\n<h2 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h2><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。<br><img src=\"/images/mobile-adaptive/bg2015071015.jpg\" alt=\"flex\"></p>\n<h2 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h2><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h2><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h2><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071016.png\" alt=\"flex\"></p>\n<h1 id=\"最后的例子和说明\"><a href=\"#最后的例子和说明\" class=\"headerlink\" title=\"最后的例子和说明\"></a>最后的例子和说明</h1><p>flex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况：</p>\n<blockquote>\n<p>auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。<br>content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。<br>百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.item-1</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 140px;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex: 2 1 0%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: blue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.item-2</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex: 2 1 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: darkblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.item-3</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex: 1 1 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: lightblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>主轴上父容器总尺寸为 600px<br>子元素的总基准值是：0% + auto + 200px = 300px，其中</p>\n<ul>\n<li>0% 即 0 宽度</li>\n<li>auto 对应取主尺寸即 100px</li>\n</ul>\n<p>故剩余空间为 600px - 300px = 300px<br>伸缩放大系数之和为： 2 + 2 + 1 = 5<br>剩余空间分配如下：</p>\n<ul>\n<li>item-1 和 item-2 各分配 2/5，各得 120px</li>\n<li>item-3 分配 1/5，得 60px</li>\n</ul>\n<p>各项目最终宽度为：</p>\n<ul>\n<li>item-1 = 0% + 120px = 120px</li>\n<li>item-2 = auto + 120px = 220px</li>\n<li>item-3 = 200px + 60px = 260px</li>\n</ul>\n<p>当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设<br>而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</p>\n","site":{"data":{}},"excerpt":"<p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br>","more":"<br><img src=\"/images/mobile-adaptive/bg2015071004.png\" alt=\"flex\"><br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。</p>\n<h1 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h1><h2 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h2><p>flex-direction属性决定主轴的方向（即项目的排列方向）。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071005.png\" alt=\"flex\"></p>\n<h2 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071006.png\" alt=\"flex\"></p>\n<h2 id=\"flex-flow属性\"><a href=\"#flex-flow属性\" class=\"headerlink\" title=\"flex-flow属性\"></a>flex-flow属性</h2><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h2><p>justify-content属性定义了项目在主轴上的对齐方式。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071010.png\" alt=\"flex\"></p>\n<h2 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h2><p>align-items属性定义项目在交叉轴上如何对齐。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071011.png\" alt=\"flex\"></p>\n<h2 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h2><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071012.png\" alt=\"flex\"></p>\n<h1 id=\"容器成员的属性\"><a href=\"#容器成员的属性\" class=\"headerlink\" title=\"容器成员的属性\"></a>容器成员的属性</h1><h2 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h2><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071013.png\" alt=\"flex\"></p>\n<h2 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h2><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。<br><img src=\"/images/mobile-adaptive/bg2015071014.png\" alt=\"flex\"></p>\n<h2 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h2><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。<br><img src=\"/images/mobile-adaptive/bg2015071015.jpg\" alt=\"flex\"></p>\n<h2 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h2><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h2><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h2><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。该属性可能取6个值，除了auto，其他都与align-items属性完全一致。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/mobile-adaptive/bg2015071016.png\" alt=\"flex\"></p>\n<h1 id=\"最后的例子和说明\"><a href=\"#最后的例子和说明\" class=\"headerlink\" title=\"最后的例子和说明\"></a>最后的例子和说明</h1><p>flex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。这里主要讨论以下 flex-basis 的取值情况：</p>\n<blockquote>\n<p>auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。<br>content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。<br>百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        display: flex;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.parent</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        height: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.item-1</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 140px;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex: 2 1 0%;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: blue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.item-2</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex: 2 1 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: darkblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.item-3</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        flex: 1 1 200px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background: lightblue;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>主轴上父容器总尺寸为 600px<br>子元素的总基准值是：0% + auto + 200px = 300px，其中</p>\n<ul>\n<li>0% 即 0 宽度</li>\n<li>auto 对应取主尺寸即 100px</li>\n</ul>\n<p>故剩余空间为 600px - 300px = 300px<br>伸缩放大系数之和为： 2 + 2 + 1 = 5<br>剩余空间分配如下：</p>\n<ul>\n<li>item-1 和 item-2 各分配 2/5，各得 120px</li>\n<li>item-3 分配 1/5，得 60px</li>\n</ul>\n<p>各项目最终宽度为：</p>\n<ul>\n<li>item-1 = 0% + 120px = 120px</li>\n<li>item-2 = auto + 120px = 220px</li>\n<li>item-3 = 200px + 60px = 260px</li>\n</ul>\n<p>当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设<br>而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间</p>"},{"title":"js继承的方式和意义","date":"2016-10-26T11:01:29.000Z","_content":"在写这篇博客的时候，我就做好了撕逼的准备\n<!-- more -->\njs是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。\njs是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。\n在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法\n> 1.使用对象冒充实现继承\n> 2.采用call方法改变函数上下文实现继承\n> 3.采用Apply方法改变函数上下文实现继承\n> 4.采用原型链的方式实现继承\n> 5.采用混合模式实现继承\n\n具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。\n但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即\n1.原型链继承\n2.构造器继承\n3.原型链和构造器混用继承\n\n让我们一点点深入，来慢慢了解，为什么我说只有三种方法\n# 原型链继承\n原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？\n举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱\n如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱\n如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱\n咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事\n在这个实例中，我们能看到的就是职责链模式，就是\n消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它\n\n原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object\n> 这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object\n> Object的原型链是null\n\n![原型链](/images/yuanxinglian/yuanxinglian1.png)\n原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。\n如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。\n举个例子\n```javascript\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nvar child = new Child;\nchild.sayHello()\t//输出hello parent\n```\n我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况\n```javascript\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nChild.prototype.sayHello = function() {\n\tconsole.log('hello child')\n};\nvar child = new Child;\nchild.sayHello()\t//输出hello child\nchild.constructor.prototype.sayHello()\t//输出hello parent\n```\n我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。\n# 构造器继承\njs函数可以被当作构造器使用，通过返回的对象完成构造\n如果没有指定返回一个对象，默认返回的是this\n举个例子\n```javascript\nfunction Parent() {\n\tthis.name = 'parent'\n}\nvar parent = new Parent\nconsole.log(parent.name)\t//输出parent\n\nfunction AnotherParent() {\n\tthis.name = 'parent'\n\tvar obj = {name:'hahaha'};\n\treturn obj;\n}\nvar anotherparent = new AnotherParent;\nconsole.log(anotherparent.name) \t//输出hahaha\n```\n而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标\n让我们来实现一个构造器继承\n```javascript\nfunction Parent() {\n\tthis.name = 'parent'\n}\nfunction Child() {\n\tvar parent = Parent.bind(this); \t//将执行环境绑定到Child来\n\tparent();\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name) \t//输出parent\nconsole.log(child.age) \t\t//输出10\n```\n是不是很简单？其实这一段的代码和下面这段代码是一样的\n```javascript\nfunction Child() {\n\tthis.name = 'parent';\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name)\nconsole.log(child.age)\n```\n这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承\n可以看看网上给的例子\n```javascript\n//1.使用对象冒充实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n    this.parent=Parent;  \n    this.parent(firstname);  //实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样\n    delete this.parent;  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n}  \nvar mychild=new Child(\"李\");  \nmychild.saySomeThing();  \n\n// 2.采用call方法改变函数上下文实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n   this.getName=function()  \n   {  \n       return firstname;  \n   }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.call(child,child.getName());  // call只是借用罢了,作用的对象还是child,原理还是构造器继承\nchild.saySomeThing(); \n\n// 3.采用Apply方法改变函数上下文实现继承 \nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n    this.getName=function()  \n    {  \n        return firstname;  \n    }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.apply(child,[child.getName()]);  //???换个函数就能算一种了???\nchild.saySomeThing();  \n```\n我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种\n（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）\n# 关于混合继承的吐槽\n如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。\n# 意义以及优缺点\n\n先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的\n\n## 原型链继承的意义以及优缺点\n我们来看这样的一段代码\n```javascript\nfunction Parent() {}\nParent.prototype = {\n\ttestArray:[1,2,3]\n};\nfunction Child() {}\nChild.prototype = new Parent;\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3, 4]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中\n所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。\n同时，如果判断一下\n![原型链](/images/yuanxinglian/yuanxinglian2.png)\n结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点\n\n## 构造器继承的意义以及优缺点\n继续看一个例子\n```javascript\nfunction Parent() {\n\tthis.testArray = [1,2,3]\n}\nfunction Child() {\n\tvar parent = Parent.bind(this)\n}\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n和原型链不同的是，构造器的继承都是独立的互不影响\n查看一下类型\n![原型链](/images/yuanxinglian/yuanxinglian3.png)\n很准确的判断出来了类型\n\n## 混合继承的意义以及优缺点\n混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象\n原型链因为他的特殊性，还可以用原来进行共享对象的数据交换\n好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现","source":"_posts/js继承的方式和意义.md","raw":"---\ntitle: js继承的方式和意义\ndate: 2016-10-26 19:01:29\ncategories: [博客]\ntags: [js,继承,面向对象]\n---\n在写这篇博客的时候，我就做好了撕逼的准备\n<!-- more -->\njs是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。\njs是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。\n在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法\n> 1.使用对象冒充实现继承\n> 2.采用call方法改变函数上下文实现继承\n> 3.采用Apply方法改变函数上下文实现继承\n> 4.采用原型链的方式实现继承\n> 5.采用混合模式实现继承\n\n具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。\n但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即\n1.原型链继承\n2.构造器继承\n3.原型链和构造器混用继承\n\n让我们一点点深入，来慢慢了解，为什么我说只有三种方法\n# 原型链继承\n原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？\n举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱\n如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱\n如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱\n咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事\n在这个实例中，我们能看到的就是职责链模式，就是\n消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它\n\n原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object\n> 这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object\n> Object的原型链是null\n\n![原型链](/images/yuanxinglian/yuanxinglian1.png)\n原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。\n如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。\n举个例子\n```javascript\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nvar child = new Child;\nchild.sayHello()\t//输出hello parent\n```\n我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况\n```javascript\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nChild.prototype.sayHello = function() {\n\tconsole.log('hello child')\n};\nvar child = new Child;\nchild.sayHello()\t//输出hello child\nchild.constructor.prototype.sayHello()\t//输出hello parent\n```\n我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。\n# 构造器继承\njs函数可以被当作构造器使用，通过返回的对象完成构造\n如果没有指定返回一个对象，默认返回的是this\n举个例子\n```javascript\nfunction Parent() {\n\tthis.name = 'parent'\n}\nvar parent = new Parent\nconsole.log(parent.name)\t//输出parent\n\nfunction AnotherParent() {\n\tthis.name = 'parent'\n\tvar obj = {name:'hahaha'};\n\treturn obj;\n}\nvar anotherparent = new AnotherParent;\nconsole.log(anotherparent.name) \t//输出hahaha\n```\n而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标\n让我们来实现一个构造器继承\n```javascript\nfunction Parent() {\n\tthis.name = 'parent'\n}\nfunction Child() {\n\tvar parent = Parent.bind(this); \t//将执行环境绑定到Child来\n\tparent();\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name) \t//输出parent\nconsole.log(child.age) \t\t//输出10\n```\n是不是很简单？其实这一段的代码和下面这段代码是一样的\n```javascript\nfunction Child() {\n\tthis.name = 'parent';\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name)\nconsole.log(child.age)\n```\n这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承\n可以看看网上给的例子\n```javascript\n//1.使用对象冒充实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n    this.parent=Parent;  \n    this.parent(firstname);  //实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样\n    delete this.parent;  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n}  \nvar mychild=new Child(\"李\");  \nmychild.saySomeThing();  \n\n// 2.采用call方法改变函数上下文实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n   this.getName=function()  \n   {  \n       return firstname;  \n   }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.call(child,child.getName());  // call只是借用罢了,作用的对象还是child,原理还是构造器继承\nchild.saySomeThing(); \n\n// 3.采用Apply方法改变函数上下文实现继承 \nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n    this.getName=function()  \n    {  \n        return firstname;  \n    }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.apply(child,[child.getName()]);  //???换个函数就能算一种了???\nchild.saySomeThing();  \n```\n我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种\n（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）\n# 关于混合继承的吐槽\n如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。\n# 意义以及优缺点\n\n先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的\n\n## 原型链继承的意义以及优缺点\n我们来看这样的一段代码\n```javascript\nfunction Parent() {}\nParent.prototype = {\n\ttestArray:[1,2,3]\n};\nfunction Child() {}\nChild.prototype = new Parent;\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3, 4]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中\n所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。\n同时，如果判断一下\n![原型链](/images/yuanxinglian/yuanxinglian2.png)\n结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点\n\n## 构造器继承的意义以及优缺点\n继续看一个例子\n```javascript\nfunction Parent() {\n\tthis.testArray = [1,2,3]\n}\nfunction Child() {\n\tvar parent = Parent.bind(this)\n}\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n和原型链不同的是，构造器的继承都是独立的互不影响\n查看一下类型\n![原型链](/images/yuanxinglian/yuanxinglian3.png)\n很准确的判断出来了类型\n\n## 混合继承的意义以及优缺点\n混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象\n原型链因为他的特殊性，还可以用原来进行共享对象的数据交换\n好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现","slug":"js继承的方式和意义","published":1,"updated":"2017-06-27T00:53:40.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9l000hwsawz3a53s07","content":"<p>在写这篇博客的时候，我就做好了撕逼的准备<br><a id=\"more\"></a><br>js是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。<br>js是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。<br>在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法</p>\n<blockquote>\n<p>1.使用对象冒充实现继承<br>2.采用call方法改变函数上下文实现继承<br>3.采用Apply方法改变函数上下文实现继承<br>4.采用原型链的方式实现继承<br>5.采用混合模式实现继承</p>\n</blockquote>\n<p>具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。<br>但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即<br>1.原型链继承<br>2.构造器继承<br>3.原型链和构造器混用继承</p>\n<p>让我们一点点深入，来慢慢了解，为什么我说只有三种方法</p>\n<h1 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h1><p>原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？<br>举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱<br>如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱<br>如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱<br>咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事<br>在这个实例中，我们能看到的就是职责链模式，就是<br>消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它</p>\n<p>原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object</p>\n<blockquote>\n<p>这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object<br>Object的原型链是null</p>\n</blockquote>\n<p><img src=\"/images/yuanxinglian/yuanxinglian1.png\" alt=\"原型链\"><br>原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。<br>如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。<br>举个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Parent.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello parent'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\">child.sayHello()\t<span class=\"comment\">//输出hello parent</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Parent.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello parent'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent;</span><br><span class=\"line\">Child.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello child'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\">child.sayHello()\t<span class=\"comment\">//输出hello child</span></span><br><span class=\"line\">child.constructor.prototype.sayHello()\t<span class=\"comment\">//输出hello parent</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。</p>\n<h1 id=\"构造器继承\"><a href=\"#构造器继承\" class=\"headerlink\" title=\"构造器继承\"></a>构造器继承</h1><p>js函数可以被当作构造器使用，通过返回的对象完成构造<br>如果没有指定返回一个对象，默认返回的是this<br>举个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parent.name)\t<span class=\"comment\">//输出parent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AnotherParent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'hahaha'</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherparent = <span class=\"keyword\">new</span> AnotherParent;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(anotherparent.name) \t<span class=\"comment\">//输出hahaha</span></span><br></pre></td></tr></table></figure></p>\n<p>而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标<br>让我们来实现一个构造器继承<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> parent = Parent.bind(<span class=\"keyword\">this</span>); \t<span class=\"comment\">//将执行环境绑定到Child来</span></span><br><span class=\"line\">\tparent();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name) \t<span class=\"comment\">//输出parent</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.age) \t\t<span class=\"comment\">//输出10</span></span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单？其实这一段的代码和下面这段代码是一样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.age)</span><br></pre></td></tr></table></figure></p>\n<p>这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承<br>可以看看网上给的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.使用对象冒充实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fname=firstname;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=<span class=\"number\">40</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent=Parent;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent(firstname);  <span class=\"comment\">//实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.parent;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.saySomeThing=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.fname);  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayAge();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> mychild=<span class=\"keyword\">new</span> Child(<span class=\"string\">\"李\"</span>);  </span><br><span class=\"line\">mychild.saySomeThing();  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.采用call方法改变函数上下文实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fname=firstname;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=<span class=\"number\">40</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.saySomeThing=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.fname);  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayAge();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   <span class=\"keyword\">this</span>.getName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> firstname;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> child=<span class=\"keyword\">new</span> Child(<span class=\"string\">\"张\"</span>);  </span><br><span class=\"line\">Parent.call(child,child.getName());  <span class=\"comment\">// call只是借用罢了,作用的对象还是child,原理还是构造器继承</span></span><br><span class=\"line\">child.saySomeThing(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.采用Apply方法改变函数上下文实现继承 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fname=firstname;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=<span class=\"number\">40</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.saySomeThing=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.fname);  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayAge();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstname;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> child=<span class=\"keyword\">new</span> Child(<span class=\"string\">\"张\"</span>);  </span><br><span class=\"line\">Parent.apply(child,[child.getName()]);  <span class=\"comment\">//???换个函数就能算一种了???</span></span><br><span class=\"line\">child.saySomeThing();</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种<br>（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）</p>\n<h1 id=\"关于混合继承的吐槽\"><a href=\"#关于混合继承的吐槽\" class=\"headerlink\" title=\"关于混合继承的吐槽\"></a>关于混合继承的吐槽</h1><p>如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。</p>\n<h1 id=\"意义以及优缺点\"><a href=\"#意义以及优缺点\" class=\"headerlink\" title=\"意义以及优缺点\"></a>意义以及优缺点</h1><p>先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的</p>\n<h2 id=\"原型链继承的意义以及优缺点\"><a href=\"#原型链继承的意义以及优缺点\" class=\"headerlink\" title=\"原型链继承的意义以及优缺点\"></a>原型链继承的意义以及优缺点</h2><p>我们来看这样的一段代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Parent.prototype = &#123;</span><br><span class=\"line\">\ttestArray:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"></span><br><span class=\"line\">child1.testArray.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.testArray) \t<span class=\"comment\">//输出[1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.testArray) \t<span class=\"comment\">//输出[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中<br>所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。<br>同时，如果判断一下<br><img src=\"/images/yuanxinglian/yuanxinglian2.png\" alt=\"原型链\"><br>结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点</p>\n<h2 id=\"构造器继承的意义以及优缺点\"><a href=\"#构造器继承的意义以及优缺点\" class=\"headerlink\" title=\"构造器继承的意义以及优缺点\"></a>构造器继承的意义以及优缺点</h2><p>继续看一个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.testArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> parent = Parent.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"></span><br><span class=\"line\">child1.testArray.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.testArray) \t<span class=\"comment\">//输出[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.testArray) \t<span class=\"comment\">//输出[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>和原型链不同的是，构造器的继承都是独立的互不影响<br>查看一下类型<br><img src=\"/images/yuanxinglian/yuanxinglian3.png\" alt=\"原型链\"><br>很准确的判断出来了类型</p>\n<h2 id=\"混合继承的意义以及优缺点\"><a href=\"#混合继承的意义以及优缺点\" class=\"headerlink\" title=\"混合继承的意义以及优缺点\"></a>混合继承的意义以及优缺点</h2><p>混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象<br>原型链因为他的特殊性，还可以用原来进行共享对象的数据交换<br>好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现</p>\n","site":{"data":{}},"excerpt":"<p>在写这篇博客的时候，我就做好了撕逼的准备<br>","more":"<br>js是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。<br>js是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。<br>在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法</p>\n<blockquote>\n<p>1.使用对象冒充实现继承<br>2.采用call方法改变函数上下文实现继承<br>3.采用Apply方法改变函数上下文实现继承<br>4.采用原型链的方式实现继承<br>5.采用混合模式实现继承</p>\n</blockquote>\n<p>具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。<br>但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即<br>1.原型链继承<br>2.构造器继承<br>3.原型链和构造器混用继承</p>\n<p>让我们一点点深入，来慢慢了解，为什么我说只有三种方法</p>\n<h1 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h1><p>原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？<br>举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱<br>如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱<br>如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱<br>咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事<br>在这个实例中，我们能看到的就是职责链模式，就是<br>消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它</p>\n<p>原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object</p>\n<blockquote>\n<p>这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object<br>Object的原型链是null</p>\n</blockquote>\n<p><img src=\"/images/yuanxinglian/yuanxinglian1.png\" alt=\"原型链\"><br>原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。<br>如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。<br>举个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Parent.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello parent'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\">child.sayHello()\t<span class=\"comment\">//输出hello parent</span></span><br></pre></td></tr></table></figure></p>\n<p>我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Parent.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello parent'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent;</span><br><span class=\"line\">Child.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hello child'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\">child.sayHello()\t<span class=\"comment\">//输出hello child</span></span><br><span class=\"line\">child.constructor.prototype.sayHello()\t<span class=\"comment\">//输出hello parent</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。</p>\n<h1 id=\"构造器继承\"><a href=\"#构造器继承\" class=\"headerlink\" title=\"构造器继承\"></a>构造器继承</h1><p>js函数可以被当作构造器使用，通过返回的对象完成构造<br>如果没有指定返回一个对象，默认返回的是this<br>举个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parent.name)\t<span class=\"comment\">//输出parent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AnotherParent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'hahaha'</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherparent = <span class=\"keyword\">new</span> AnotherParent;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(anotherparent.name) \t<span class=\"comment\">//输出hahaha</span></span><br></pre></td></tr></table></figure></p>\n<p>而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标<br>让我们来实现一个构造器继承<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> parent = Parent.bind(<span class=\"keyword\">this</span>); \t<span class=\"comment\">//将执行环境绑定到Child来</span></span><br><span class=\"line\">\tparent();</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name) \t<span class=\"comment\">//输出parent</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.age) \t\t<span class=\"comment\">//输出10</span></span><br></pre></td></tr></table></figure></p>\n<p>是不是很简单？其实这一段的代码和下面这段代码是一样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.age)</span><br></pre></td></tr></table></figure></p>\n<p>这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承<br>可以看看网上给的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.使用对象冒充实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fname=firstname;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=<span class=\"number\">40</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent=Parent;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent(firstname);  <span class=\"comment\">//实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.parent;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.saySomeThing=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.fname);  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayAge();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> mychild=<span class=\"keyword\">new</span> Child(<span class=\"string\">\"李\"</span>);  </span><br><span class=\"line\">mychild.saySomeThing();  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.采用call方法改变函数上下文实现继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fname=firstname;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=<span class=\"number\">40</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.saySomeThing=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.fname);  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayAge();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   <span class=\"keyword\">this</span>.getName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;  </span><br><span class=\"line\">       <span class=\"keyword\">return</span> firstname;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> child=<span class=\"keyword\">new</span> Child(<span class=\"string\">\"张\"</span>);  </span><br><span class=\"line\">Parent.call(child,child.getName());  <span class=\"comment\">// call只是借用罢了,作用的对象还是child,原理还是构造器继承</span></span><br><span class=\"line\">child.saySomeThing(); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.采用Apply方法改变函数上下文实现继承 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fname=firstname;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=<span class=\"number\">40</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayAge=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">firstname</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.saySomeThing=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.fname);  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sayAge();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstname;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> child=<span class=\"keyword\">new</span> Child(<span class=\"string\">\"张\"</span>);  </span><br><span class=\"line\">Parent.apply(child,[child.getName()]);  <span class=\"comment\">//???换个函数就能算一种了???</span></span><br><span class=\"line\">child.saySomeThing();</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种<br>（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）</p>\n<h1 id=\"关于混合继承的吐槽\"><a href=\"#关于混合继承的吐槽\" class=\"headerlink\" title=\"关于混合继承的吐槽\"></a>关于混合继承的吐槽</h1><p>如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。</p>\n<h1 id=\"意义以及优缺点\"><a href=\"#意义以及优缺点\" class=\"headerlink\" title=\"意义以及优缺点\"></a>意义以及优缺点</h1><p>先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的</p>\n<h2 id=\"原型链继承的意义以及优缺点\"><a href=\"#原型链继承的意义以及优缺点\" class=\"headerlink\" title=\"原型链继承的意义以及优缺点\"></a>原型链继承的意义以及优缺点</h2><p>我们来看这样的一段代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Parent.prototype = &#123;</span><br><span class=\"line\">\ttestArray:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"></span><br><span class=\"line\">child1.testArray.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.testArray) \t<span class=\"comment\">//输出[1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.testArray) \t<span class=\"comment\">//输出[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中<br>所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。<br>同时，如果判断一下<br><img src=\"/images/yuanxinglian/yuanxinglian2.png\" alt=\"原型链\"><br>结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点</p>\n<h2 id=\"构造器继承的意义以及优缺点\"><a href=\"#构造器继承的意义以及优缺点\" class=\"headerlink\" title=\"构造器继承的意义以及优缺点\"></a>构造器继承的意义以及优缺点</h2><p>继续看一个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.testArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> parent = Parent.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child1 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"><span class=\"keyword\">var</span> child2 = <span class=\"keyword\">new</span> Child;</span><br><span class=\"line\"></span><br><span class=\"line\">child1.testArray.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child1.testArray) \t<span class=\"comment\">//输出[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child2.testArray) \t<span class=\"comment\">//输出[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>和原型链不同的是，构造器的继承都是独立的互不影响<br>查看一下类型<br><img src=\"/images/yuanxinglian/yuanxinglian3.png\" alt=\"原型链\"><br>很准确的判断出来了类型</p>\n<h2 id=\"混合继承的意义以及优缺点\"><a href=\"#混合继承的意义以及优缺点\" class=\"headerlink\" title=\"混合继承的意义以及优缺点\"></a>混合继承的意义以及优缺点</h2><p>混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象<br>原型链因为他的特殊性，还可以用原来进行共享对象的数据交换<br>好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现</p>"},{"title":"移动端适配讲解","date":"2017-06-26T05:42:26.000Z","_content":"从乔布斯推出智能手机以来，市面上已经有各种各样的牌子不同大小的智能手机，手机的分辨率也各有不同，同时移动互联网的发展，移动端网页技术也开始被人重视，初次接触移动端的同学曾经可能也和我一样迷茫过，在公司要求做一些移动端的网页时，没有足够的移动开发经验和基础知识，慌忙的在网上选择“阿里移动端适配方案”或者“网易移动端适配方案”，网页做完了，可是还是会迷惑为什么传统的网页在不同的手机上表现都如此不同，还有rem是什么，viewport又是什么？\n今天就带大家梳理一下知识点，打好基础的同时选择适合自己的开发方案。\n<!-- more -->\n# 引入问题\n首先我们先看这么一段代码\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Test01</title>\n<style>\n\t*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 640px;\n\t\theight: 1136px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 150px;\n\t\ttext-align: center;\n\t\tline-height: 1136px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\nIphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。![iphone5](/images/mobile-adaptive/mobile-iPhone.png)\n我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？\n同时我们在浏览器模拟手机时，看到工具栏上方还显示这这样一个数据![iphone5](/images/mobile-adaptive/mobile-iPhone1.png)\n为啥会显示320x568呢，还有DPR是什么？\n# 什么是DPR？\nDPR的全程是设备像素缩放比(device PixelRatio)。\n因为屏幕尺寸大小的相同的手机分辨率是不一样的，Iphone5的分辨率为640x1136，这就代表手机的屏幕上有640x1136个物理像素，但是屏幕尺寸320x568那么大，所以需要缩放以显示。\n在这里640÷320=2，同时1136÷568=2，所以DPR=2，我们一般把DPR大于等于2的屏幕称为高清屏(retina屏)。 由此可知，同样像素大小的元素在iPhone5上会缩小一倍。\n## 进一步的疑问\n我们解释了DPR是什么，但是还是会有疑惑，因为从理论上来说，即使这样，黄色方块也应该占满全部屏幕啊，不应该像图片那样，既不占满屏幕，也不是屏幕大小的1/2，更不是屏幕的2倍，这就很让人疑惑。\n而这些呢，也牵扯到一段手机厂商的历史，在手机厂商制造手机时，考虑到自家手机可能会访问一些pc端的网页，为了有一个良好的页面体验，会默认将屏幕的宽度定为某一个默认值，然后在页面超出这个默认值的时候，又会自动缩放，让屏幕的宽度刚好可以适应整个网页。\n在这里我们可以做个实验，如下图![iphone5](/images/mobile-adaptive/mobile-iPhone2.gif)\n从这张图上我们可以看到元素宽度在980px的时候正好占满屏幕，所以iPhone5的默认宽度是980px，而当元素宽度大于980px的时候，从元素的高度可以看出屏幕明显将元素进行了缩放已达到完整显示的目的。\n# 如何控制浏览器缩放？\n可以说手机厂商自作聪明的作法(至少我是这么认为的)给很多前端开发者带来了麻烦，因为手机各自的分辨率不同，默认宽度不同，同样的页面在不同的手机上显示可能就会错位，如果用百分比做度量单位，就无法解决元素高度(高度的百分比是父元素的宽度的比例)还有边框宽度和元素定位等问题。\n在这里我们可以通过meta标签的viewport来控制页面缩放。\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta name=\"viewport\" content=\"width=640\">\n<meta charset=\"UTF-8\">\n<title>Test01</title>\n<style>\n\t*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 640px;\n\t\theight: 1136px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 150px;\n\t\ttext-align: center;\n\t\tline-height: 1136px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\n如图所示，我们在meta头设置了viewport的值为\"width=640\"，这样手机的默认宽度就定成了640px，元素正好覆盖了全部页面。![iphone5](/images/mobile-adaptive/mobile-iPhone3.png)\n可是还有缺陷，就是浏览器还是会自动缩放。\n这时候我们在meta表现中加入这行代码\n```html\n<meta name=\"viewport\" content=\"width=640,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\">\n```\n在这里scale的意思是缩放，maximum-scale和minimum-scale是最大缩放和最小缩放倍数，initial-scale为初始缩放倍数，user-scalable代表用户是否可以缩放。\n此时页面效果变成了下面这样![iphone5](/images/mobile-adaptive/mobile-iPhone4.gif)\n这是因为禁止了页面缩放，而iPhone5的屏幕像素大小只有320，所以页面是屏幕的2倍，且不可缩放。\n如果还是需要达到我们之前满屏的目的，则需要改动viewport的width值和元素的宽度值。\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=320,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\">\n<title>Test01</title>\n<style>\n*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 320px;\n\t\theight: 568px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 50px;\n\t\ttext-align: center;\n\t\tline-height: 568px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\n这样，页面就可以满屏显示了。\n## 不同手机下显示问题\n通过测试我们发现，经过我们的设置黄色方块在不同的手机分辨率下保持了一样的大小，但是有一个小问题，那就是在不管页面内的元素的大小和多少的情况下，如果viewport的width设置一个固定的值，比如320，那么屏幕逻辑像素宽度小于320的手机总是可以左右滑动的，在一般情况下这些不符合我们的预期，所以我们需要给width设置一个特殊值\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n```\n这样，页面的默认宽度就确定为手机逻辑像素宽度了。\n# 什么是rem\n问题说到现在，似乎还没有解决，我们虽然搞定了手机的缩放问题，但是仍然无法做到让黄色方块在各个手机的分辨率下满屏显示，px在是个精确的度量单位，我们更需要一种按照手机分辨率，按比例缩放的单位！\n而这就是rem存在的意义，rem与我们平常所见的em单位很像，实际上多出来的这个r就是response的意思\nrem就是相对于页面根元素字体大小的度量单位，也就是说如果\n```css\nhtml {\n\tfont-size:16px;\n}\n```\n那么1rem = 16px，2rem = 2x16px，就是这么简单。\n根据这个简单的特性，我们可以通过js先算出当前手机的宽度，然后通过一个事先约定好的比例公式算出的值给html的font-size赋值。这样rem的值就是一个响应式的值了\n这样的代码有很多，在这里我给出一段参考代码\n```javascript\n;(function (doc, win) {\n    var docEl = doc.documentElement,\n            resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n            recalc = function () {\n                var clientWidth = docEl.clientWidth;\n                if (!clientWidth) return;\n                docEl.style.fontSize = 20 * (clientWidth / 375) + 'px';\n            };\n\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n})(document, window);\n```\n这一段代码中是将iPhone6为底稿，所有的元素的像素宽度÷20，得到的值就是元素的rem值\n# 彻底解决问题\n根据前面的知识点，我们来终结之前的满屏问题，因为上述代码是已iPhone6(375x667)为底稿的，所以如果要满屏的话，黄色方块的宽应该设置为375÷20=18.75rem，高设置为667÷20=33.35rem。\n所以最终代码是这样的\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n<title>Test01</title>\n<style>\n*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 18.75rem;\n\t\theight: 33.35rem;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 50px;\n\t\ttext-align: center;\n\t\tline-height: 568px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n<script type=\"text/javascript\">\n\t;(function (doc, win) {\n\t    var docEl = doc.documentElement,\n\t            resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n\t            recalc = function () {\n\t                var clientWidth = docEl.clientWidth;\n\t                if (!clientWidth) return;\n\t                docEl.style.fontSize = 20 * (clientWidth / 375) + 'px';\n\t            };\n\n\t    if (!doc.addEventListener) return;\n\t    win.addEventListener(resizeEvt, recalc, false);\n\t    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n\t})(document, window);\n</script>\n</body>\n</html>\n```\n效果图如下\n![iphone5](/images/mobile-adaptive/mobile-iPhone5.gif)\n# 另一种办法——网易的移动端适配方案\n我们之前说过，如果给viewport的width设置一个固定值，则在不同分辨率下手机会进行自动缩放以适应屏幕，如果我们可以使用js计算出缩放比例，让手机屏幕正好是我们需要的固定值，然后在meta标签中加上计算出的缩放比例，这样是不是也能解决问题呢？\n网易的metahandler.js就是这样实现的，只要在页面中引入js，并在js中结尾设置好需要的宽度\n```javascript\n// 调用自适应屏幕的功能函数，位于182行\nopt.fixViewportWidth(640);\n```\n在页面加载的时候，js就能根据当前的手机智能的计算出缩放比例并加上![iphone5](/images/mobile-adaptive/mobile-iPhone6.gif)\n这是一个不错的想法，但是在使用的过程中有几个小缺陷：\n- 指定宽度需要在js中修改，应该封装出接口供使用者使用，使用者需要自己修改封装一下\n- js没有监听屏幕变化的事件，在手机横屏的时候不能满屏\n\n# 总结\n手机适配的方案有很多，大家可以选择合适自己的，有一些方案，如响应式也是不错的，关键需要看页面的布局和功能复杂度，大家理解了手机适配的原理，在以后可以更好的更快的构建适合自己的移动端网页。\n另外我集合了一点方案在我的git上，欢迎大家star和关注\n[https://github.com/zk-/mobile-response](https://github.com/zk-/mobile-response)","source":"_posts/mobile-adaptive.md","raw":"---\ntitle: 移动端适配讲解\ndate: 2017-06-26 13:42:26\ncategories: [博客]\ntags: [移动端]\n---\n从乔布斯推出智能手机以来，市面上已经有各种各样的牌子不同大小的智能手机，手机的分辨率也各有不同，同时移动互联网的发展，移动端网页技术也开始被人重视，初次接触移动端的同学曾经可能也和我一样迷茫过，在公司要求做一些移动端的网页时，没有足够的移动开发经验和基础知识，慌忙的在网上选择“阿里移动端适配方案”或者“网易移动端适配方案”，网页做完了，可是还是会迷惑为什么传统的网页在不同的手机上表现都如此不同，还有rem是什么，viewport又是什么？\n今天就带大家梳理一下知识点，打好基础的同时选择适合自己的开发方案。\n<!-- more -->\n# 引入问题\n首先我们先看这么一段代码\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Test01</title>\n<style>\n\t*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 640px;\n\t\theight: 1136px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 150px;\n\t\ttext-align: center;\n\t\tline-height: 1136px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\nIphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。![iphone5](/images/mobile-adaptive/mobile-iPhone.png)\n我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？\n同时我们在浏览器模拟手机时，看到工具栏上方还显示这这样一个数据![iphone5](/images/mobile-adaptive/mobile-iPhone1.png)\n为啥会显示320x568呢，还有DPR是什么？\n# 什么是DPR？\nDPR的全程是设备像素缩放比(device PixelRatio)。\n因为屏幕尺寸大小的相同的手机分辨率是不一样的，Iphone5的分辨率为640x1136，这就代表手机的屏幕上有640x1136个物理像素，但是屏幕尺寸320x568那么大，所以需要缩放以显示。\n在这里640÷320=2，同时1136÷568=2，所以DPR=2，我们一般把DPR大于等于2的屏幕称为高清屏(retina屏)。 由此可知，同样像素大小的元素在iPhone5上会缩小一倍。\n## 进一步的疑问\n我们解释了DPR是什么，但是还是会有疑惑，因为从理论上来说，即使这样，黄色方块也应该占满全部屏幕啊，不应该像图片那样，既不占满屏幕，也不是屏幕大小的1/2，更不是屏幕的2倍，这就很让人疑惑。\n而这些呢，也牵扯到一段手机厂商的历史，在手机厂商制造手机时，考虑到自家手机可能会访问一些pc端的网页，为了有一个良好的页面体验，会默认将屏幕的宽度定为某一个默认值，然后在页面超出这个默认值的时候，又会自动缩放，让屏幕的宽度刚好可以适应整个网页。\n在这里我们可以做个实验，如下图![iphone5](/images/mobile-adaptive/mobile-iPhone2.gif)\n从这张图上我们可以看到元素宽度在980px的时候正好占满屏幕，所以iPhone5的默认宽度是980px，而当元素宽度大于980px的时候，从元素的高度可以看出屏幕明显将元素进行了缩放已达到完整显示的目的。\n# 如何控制浏览器缩放？\n可以说手机厂商自作聪明的作法(至少我是这么认为的)给很多前端开发者带来了麻烦，因为手机各自的分辨率不同，默认宽度不同，同样的页面在不同的手机上显示可能就会错位，如果用百分比做度量单位，就无法解决元素高度(高度的百分比是父元素的宽度的比例)还有边框宽度和元素定位等问题。\n在这里我们可以通过meta标签的viewport来控制页面缩放。\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta name=\"viewport\" content=\"width=640\">\n<meta charset=\"UTF-8\">\n<title>Test01</title>\n<style>\n\t*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 640px;\n\t\theight: 1136px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 150px;\n\t\ttext-align: center;\n\t\tline-height: 1136px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\n如图所示，我们在meta头设置了viewport的值为\"width=640\"，这样手机的默认宽度就定成了640px，元素正好覆盖了全部页面。![iphone5](/images/mobile-adaptive/mobile-iPhone3.png)\n可是还有缺陷，就是浏览器还是会自动缩放。\n这时候我们在meta表现中加入这行代码\n```html\n<meta name=\"viewport\" content=\"width=640,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\">\n```\n在这里scale的意思是缩放，maximum-scale和minimum-scale是最大缩放和最小缩放倍数，initial-scale为初始缩放倍数，user-scalable代表用户是否可以缩放。\n此时页面效果变成了下面这样![iphone5](/images/mobile-adaptive/mobile-iPhone4.gif)\n这是因为禁止了页面缩放，而iPhone5的屏幕像素大小只有320，所以页面是屏幕的2倍，且不可缩放。\n如果还是需要达到我们之前满屏的目的，则需要改动viewport的width值和元素的宽度值。\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=320,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\">\n<title>Test01</title>\n<style>\n*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 320px;\n\t\theight: 568px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 50px;\n\t\ttext-align: center;\n\t\tline-height: 568px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\n这样，页面就可以满屏显示了。\n## 不同手机下显示问题\n通过测试我们发现，经过我们的设置黄色方块在不同的手机分辨率下保持了一样的大小，但是有一个小问题，那就是在不管页面内的元素的大小和多少的情况下，如果viewport的width设置一个固定的值，比如320，那么屏幕逻辑像素宽度小于320的手机总是可以左右滑动的，在一般情况下这些不符合我们的预期，所以我们需要给width设置一个特殊值\n```html\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n```\n这样，页面的默认宽度就确定为手机逻辑像素宽度了。\n# 什么是rem\n问题说到现在，似乎还没有解决，我们虽然搞定了手机的缩放问题，但是仍然无法做到让黄色方块在各个手机的分辨率下满屏显示，px在是个精确的度量单位，我们更需要一种按照手机分辨率，按比例缩放的单位！\n而这就是rem存在的意义，rem与我们平常所见的em单位很像，实际上多出来的这个r就是response的意思\nrem就是相对于页面根元素字体大小的度量单位，也就是说如果\n```css\nhtml {\n\tfont-size:16px;\n}\n```\n那么1rem = 16px，2rem = 2x16px，就是这么简单。\n根据这个简单的特性，我们可以通过js先算出当前手机的宽度，然后通过一个事先约定好的比例公式算出的值给html的font-size赋值。这样rem的值就是一个响应式的值了\n这样的代码有很多，在这里我给出一段参考代码\n```javascript\n;(function (doc, win) {\n    var docEl = doc.documentElement,\n            resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n            recalc = function () {\n                var clientWidth = docEl.clientWidth;\n                if (!clientWidth) return;\n                docEl.style.fontSize = 20 * (clientWidth / 375) + 'px';\n            };\n\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n})(document, window);\n```\n这一段代码中是将iPhone6为底稿，所有的元素的像素宽度÷20，得到的值就是元素的rem值\n# 彻底解决问题\n根据前面的知识点，我们来终结之前的满屏问题，因为上述代码是已iPhone6(375x667)为底稿的，所以如果要满屏的话，黄色方块的宽应该设置为375÷20=18.75rem，高设置为667÷20=33.35rem。\n所以最终代码是这样的\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\">\n<title>Test01</title>\n<style>\n*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 18.75rem;\n\t\theight: 33.35rem;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 50px;\n\t\ttext-align: center;\n\t\tline-height: 568px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n<script type=\"text/javascript\">\n\t;(function (doc, win) {\n\t    var docEl = doc.documentElement,\n\t            resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n\t            recalc = function () {\n\t                var clientWidth = docEl.clientWidth;\n\t                if (!clientWidth) return;\n\t                docEl.style.fontSize = 20 * (clientWidth / 375) + 'px';\n\t            };\n\n\t    if (!doc.addEventListener) return;\n\t    win.addEventListener(resizeEvt, recalc, false);\n\t    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n\t})(document, window);\n</script>\n</body>\n</html>\n```\n效果图如下\n![iphone5](/images/mobile-adaptive/mobile-iPhone5.gif)\n# 另一种办法——网易的移动端适配方案\n我们之前说过，如果给viewport的width设置一个固定值，则在不同分辨率下手机会进行自动缩放以适应屏幕，如果我们可以使用js计算出缩放比例，让手机屏幕正好是我们需要的固定值，然后在meta标签中加上计算出的缩放比例，这样是不是也能解决问题呢？\n网易的metahandler.js就是这样实现的，只要在页面中引入js，并在js中结尾设置好需要的宽度\n```javascript\n// 调用自适应屏幕的功能函数，位于182行\nopt.fixViewportWidth(640);\n```\n在页面加载的时候，js就能根据当前的手机智能的计算出缩放比例并加上![iphone5](/images/mobile-adaptive/mobile-iPhone6.gif)\n这是一个不错的想法，但是在使用的过程中有几个小缺陷：\n- 指定宽度需要在js中修改，应该封装出接口供使用者使用，使用者需要自己修改封装一下\n- js没有监听屏幕变化的事件，在手机横屏的时候不能满屏\n\n# 总结\n手机适配的方案有很多，大家可以选择合适自己的，有一些方案，如响应式也是不错的，关键需要看页面的布局和功能复杂度，大家理解了手机适配的原理，在以后可以更好的更快的构建适合自己的移动端网页。\n另外我集合了一点方案在我的git上，欢迎大家star和关注\n[https://github.com/zk-/mobile-response](https://github.com/zk-/mobile-response)","slug":"mobile-adaptive","published":1,"updated":"2017-06-27T02:58:44.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9m000iwsawo4yp3zc9","content":"<p>从乔布斯推出智能手机以来，市面上已经有各种各样的牌子不同大小的智能手机，手机的分辨率也各有不同，同时移动互联网的发展，移动端网页技术也开始被人重视，初次接触移动端的同学曾经可能也和我一样迷茫过，在公司要求做一些移动端的网页时，没有足够的移动开发经验和基础知识，慌忙的在网上选择“阿里移动端适配方案”或者“网易移动端适配方案”，网页做完了，可是还是会迷惑为什么传统的网页在不同的手机上表现都如此不同，还有rem是什么，viewport又是什么？<br>今天就带大家梳理一下知识点，打好基础的同时选择适合自己的开发方案。<br><a id=\"more\"></a></p>\n<h1 id=\"引入问题\"><a href=\"#引入问题\" class=\"headerlink\" title=\"引入问题\"></a>引入问题</h1><p>首先我们先看这么一段代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 640px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 1136px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 1136px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Iphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。<img src=\"/images/mobile-adaptive/mobile-iPhone.png\" alt=\"iphone5\"><br>我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？<br>同时我们在浏览器模拟手机时，看到工具栏上方还显示这这样一个数据<img src=\"/images/mobile-adaptive/mobile-iPhone1.png\" alt=\"iphone5\"><br>为啥会显示320x568呢，还有DPR是什么？</p>\n<h1 id=\"什么是DPR？\"><a href=\"#什么是DPR？\" class=\"headerlink\" title=\"什么是DPR？\"></a>什么是DPR？</h1><p>DPR的全程是设备像素缩放比(device PixelRatio)。<br>因为屏幕尺寸大小的相同的手机分辨率是不一样的，Iphone5的分辨率为640x1136，这就代表手机的屏幕上有640x1136个物理像素，但是屏幕尺寸320x568那么大，所以需要缩放以显示。<br>在这里640÷320=2，同时1136÷568=2，所以DPR=2，我们一般把DPR大于等于2的屏幕称为高清屏(retina屏)。 由此可知，同样像素大小的元素在iPhone5上会缩小一倍。</p>\n<h2 id=\"进一步的疑问\"><a href=\"#进一步的疑问\" class=\"headerlink\" title=\"进一步的疑问\"></a>进一步的疑问</h2><p>我们解释了DPR是什么，但是还是会有疑惑，因为从理论上来说，即使这样，黄色方块也应该占满全部屏幕啊，不应该像图片那样，既不占满屏幕，也不是屏幕大小的1/2，更不是屏幕的2倍，这就很让人疑惑。<br>而这些呢，也牵扯到一段手机厂商的历史，在手机厂商制造手机时，考虑到自家手机可能会访问一些pc端的网页，为了有一个良好的页面体验，会默认将屏幕的宽度定为某一个默认值，然后在页面超出这个默认值的时候，又会自动缩放，让屏幕的宽度刚好可以适应整个网页。<br>在这里我们可以做个实验，如下图<img src=\"/images/mobile-adaptive/mobile-iPhone2.gif\" alt=\"iphone5\"><br>从这张图上我们可以看到元素宽度在980px的时候正好占满屏幕，所以iPhone5的默认宽度是980px，而当元素宽度大于980px的时候，从元素的高度可以看出屏幕明显将元素进行了缩放已达到完整显示的目的。</p>\n<h1 id=\"如何控制浏览器缩放？\"><a href=\"#如何控制浏览器缩放？\" class=\"headerlink\" title=\"如何控制浏览器缩放？\"></a>如何控制浏览器缩放？</h1><p>可以说手机厂商自作聪明的作法(至少我是这么认为的)给很多前端开发者带来了麻烦，因为手机各自的分辨率不同，默认宽度不同，同样的页面在不同的手机上显示可能就会错位，如果用百分比做度量单位，就无法解决元素高度(高度的百分比是父元素的宽度的比例)还有边框宽度和元素定位等问题。<br>在这里我们可以通过meta标签的viewport来控制页面缩放。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=640\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 640px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 1136px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 1136px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如图所示，我们在meta头设置了viewport的值为”width=640”，这样手机的默认宽度就定成了640px，元素正好覆盖了全部页面。<img src=\"/images/mobile-adaptive/mobile-iPhone3.png\" alt=\"iphone5\"><br>可是还有缺陷，就是浏览器还是会自动缩放。<br>这时候我们在meta表现中加入这行代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=640,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在这里scale的意思是缩放，maximum-scale和minimum-scale是最大缩放和最小缩放倍数，initial-scale为初始缩放倍数，user-scalable代表用户是否可以缩放。<br>此时页面效果变成了下面这样<img src=\"/images/mobile-adaptive/mobile-iPhone4.gif\" alt=\"iphone5\"><br>这是因为禁止了页面缩放，而iPhone5的屏幕像素大小只有320，所以页面是屏幕的2倍，且不可缩放。<br>如果还是需要达到我们之前满屏的目的，则需要改动viewport的width值和元素的宽度值。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=320,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 320px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 568px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 568px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，页面就可以满屏显示了。</p>\n<h2 id=\"不同手机下显示问题\"><a href=\"#不同手机下显示问题\" class=\"headerlink\" title=\"不同手机下显示问题\"></a>不同手机下显示问题</h2><p>通过测试我们发现，经过我们的设置黄色方块在不同的手机分辨率下保持了一样的大小，但是有一个小问题，那就是在不管页面内的元素的大小和多少的情况下，如果viewport的width设置一个固定的值，比如320，那么屏幕逻辑像素宽度小于320的手机总是可以左右滑动的，在一般情况下这些不符合我们的预期，所以我们需要给width设置一个特殊值<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，页面的默认宽度就确定为手机逻辑像素宽度了。</p>\n<h1 id=\"什么是rem\"><a href=\"#什么是rem\" class=\"headerlink\" title=\"什么是rem\"></a>什么是rem</h1><p>问题说到现在，似乎还没有解决，我们虽然搞定了手机的缩放问题，但是仍然无法做到让黄色方块在各个手机的分辨率下满屏显示，px在是个精确的度量单位，我们更需要一种按照手机分辨率，按比例缩放的单位！<br>而这就是rem存在的意义，rem与我们平常所见的em单位很像，实际上多出来的这个r就是response的意思<br>rem就是相对于页面根元素字体大小的度量单位，也就是说如果<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么1rem = 16px，2rem = 2x16px，就是这么简单。<br>根据这个简单的特性，我们可以通过js先算出当前手机的宽度，然后通过一个事先约定好的比例公式算出的值给html的font-size赋值。这样rem的值就是一个响应式的值了<br>这样的代码有很多，在这里我给出一段参考代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = doc.documentElement,</span><br><span class=\"line\">            resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span>,</span><br><span class=\"line\">            recalc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                docEl.style.fontSize = <span class=\"number\">20</span> * (clientWidth / <span class=\"number\">375</span>) + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这一段代码中是将iPhone6为底稿，所有的元素的像素宽度÷20，得到的值就是元素的rem值</p>\n<h1 id=\"彻底解决问题\"><a href=\"#彻底解决问题\" class=\"headerlink\" title=\"彻底解决问题\"></a>彻底解决问题</h1><p>根据前面的知识点，我们来终结之前的满屏问题，因为上述代码是已iPhone6(375x667)为底稿的，所以如果要满屏的话，黄色方块的宽应该设置为375÷20=18.75rem，高设置为667÷20=33.35rem。<br>所以最终代码是这样的<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">width</span>: 18<span class=\"selector-class\">.75rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">height</span>: 33<span class=\"selector-class\">.35rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 568px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, win</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t    <span class=\"keyword\">var</span> docEl = doc.documentElement,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            recalc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                docEl.style.fontSize = <span class=\"number\">20</span> * (clientWidth / <span class=\"number\">375</span>) + <span class=\"string\">'px'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t            &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图如下<br><img src=\"/images/mobile-adaptive/mobile-iPhone5.gif\" alt=\"iphone5\"></p>\n<h1 id=\"另一种办法——网易的移动端适配方案\"><a href=\"#另一种办法——网易的移动端适配方案\" class=\"headerlink\" title=\"另一种办法——网易的移动端适配方案\"></a>另一种办法——网易的移动端适配方案</h1><p>我们之前说过，如果给viewport的width设置一个固定值，则在不同分辨率下手机会进行自动缩放以适应屏幕，如果我们可以使用js计算出缩放比例，让手机屏幕正好是我们需要的固定值，然后在meta标签中加上计算出的缩放比例，这样是不是也能解决问题呢？<br>网易的metahandler.js就是这样实现的，只要在页面中引入js，并在js中结尾设置好需要的宽度<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用自适应屏幕的功能函数，位于182行</span></span><br><span class=\"line\">opt.fixViewportWidth(<span class=\"number\">640</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在页面加载的时候，js就能根据当前的手机智能的计算出缩放比例并加上<img src=\"/images/mobile-adaptive/mobile-iPhone6.gif\" alt=\"iphone5\"><br>这是一个不错的想法，但是在使用的过程中有几个小缺陷：</p>\n<ul>\n<li>指定宽度需要在js中修改，应该封装出接口供使用者使用，使用者需要自己修改封装一下</li>\n<li>js没有监听屏幕变化的事件，在手机横屏的时候不能满屏</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>手机适配的方案有很多，大家可以选择合适自己的，有一些方案，如响应式也是不错的，关键需要看页面的布局和功能复杂度，大家理解了手机适配的原理，在以后可以更好的更快的构建适合自己的移动端网页。<br>另外我集合了一点方案在我的git上，欢迎大家star和关注<br><a href=\"https://github.com/zk-/mobile-response\" target=\"_blank\" rel=\"noopener\">https://github.com/zk-/mobile-response</a></p>\n","site":{"data":{}},"excerpt":"<p>从乔布斯推出智能手机以来，市面上已经有各种各样的牌子不同大小的智能手机，手机的分辨率也各有不同，同时移动互联网的发展，移动端网页技术也开始被人重视，初次接触移动端的同学曾经可能也和我一样迷茫过，在公司要求做一些移动端的网页时，没有足够的移动开发经验和基础知识，慌忙的在网上选择“阿里移动端适配方案”或者“网易移动端适配方案”，网页做完了，可是还是会迷惑为什么传统的网页在不同的手机上表现都如此不同，还有rem是什么，viewport又是什么？<br>今天就带大家梳理一下知识点，打好基础的同时选择适合自己的开发方案。<br>","more":"</p>\n<h1 id=\"引入问题\"><a href=\"#引入问题\" class=\"headerlink\" title=\"引入问题\"></a>引入问题</h1><p>首先我们先看这么一段代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 640px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 1136px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 1136px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Iphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。<img src=\"/images/mobile-adaptive/mobile-iPhone.png\" alt=\"iphone5\"><br>我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？<br>同时我们在浏览器模拟手机时，看到工具栏上方还显示这这样一个数据<img src=\"/images/mobile-adaptive/mobile-iPhone1.png\" alt=\"iphone5\"><br>为啥会显示320x568呢，还有DPR是什么？</p>\n<h1 id=\"什么是DPR？\"><a href=\"#什么是DPR？\" class=\"headerlink\" title=\"什么是DPR？\"></a>什么是DPR？</h1><p>DPR的全程是设备像素缩放比(device PixelRatio)。<br>因为屏幕尺寸大小的相同的手机分辨率是不一样的，Iphone5的分辨率为640x1136，这就代表手机的屏幕上有640x1136个物理像素，但是屏幕尺寸320x568那么大，所以需要缩放以显示。<br>在这里640÷320=2，同时1136÷568=2，所以DPR=2，我们一般把DPR大于等于2的屏幕称为高清屏(retina屏)。 由此可知，同样像素大小的元素在iPhone5上会缩小一倍。</p>\n<h2 id=\"进一步的疑问\"><a href=\"#进一步的疑问\" class=\"headerlink\" title=\"进一步的疑问\"></a>进一步的疑问</h2><p>我们解释了DPR是什么，但是还是会有疑惑，因为从理论上来说，即使这样，黄色方块也应该占满全部屏幕啊，不应该像图片那样，既不占满屏幕，也不是屏幕大小的1/2，更不是屏幕的2倍，这就很让人疑惑。<br>而这些呢，也牵扯到一段手机厂商的历史，在手机厂商制造手机时，考虑到自家手机可能会访问一些pc端的网页，为了有一个良好的页面体验，会默认将屏幕的宽度定为某一个默认值，然后在页面超出这个默认值的时候，又会自动缩放，让屏幕的宽度刚好可以适应整个网页。<br>在这里我们可以做个实验，如下图<img src=\"/images/mobile-adaptive/mobile-iPhone2.gif\" alt=\"iphone5\"><br>从这张图上我们可以看到元素宽度在980px的时候正好占满屏幕，所以iPhone5的默认宽度是980px，而当元素宽度大于980px的时候，从元素的高度可以看出屏幕明显将元素进行了缩放已达到完整显示的目的。</p>\n<h1 id=\"如何控制浏览器缩放？\"><a href=\"#如何控制浏览器缩放？\" class=\"headerlink\" title=\"如何控制浏览器缩放？\"></a>如何控制浏览器缩放？</h1><p>可以说手机厂商自作聪明的作法(至少我是这么认为的)给很多前端开发者带来了麻烦，因为手机各自的分辨率不同，默认宽度不同，同样的页面在不同的手机上显示可能就会错位，如果用百分比做度量单位，就无法解决元素高度(高度的百分比是父元素的宽度的比例)还有边框宽度和元素定位等问题。<br>在这里我们可以通过meta标签的viewport来控制页面缩放。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=640\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 640px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 1136px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 1136px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如图所示，我们在meta头设置了viewport的值为”width=640”，这样手机的默认宽度就定成了640px，元素正好覆盖了全部页面。<img src=\"/images/mobile-adaptive/mobile-iPhone3.png\" alt=\"iphone5\"><br>可是还有缺陷，就是浏览器还是会自动缩放。<br>这时候我们在meta表现中加入这行代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=640,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在这里scale的意思是缩放，maximum-scale和minimum-scale是最大缩放和最小缩放倍数，initial-scale为初始缩放倍数，user-scalable代表用户是否可以缩放。<br>此时页面效果变成了下面这样<img src=\"/images/mobile-adaptive/mobile-iPhone4.gif\" alt=\"iphone5\"><br>这是因为禁止了页面缩放，而iPhone5的屏幕像素大小只有320，所以页面是屏幕的2倍，且不可缩放。<br>如果还是需要达到我们之前满屏的目的，则需要改动viewport的width值和元素的宽度值。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=320,maximum-scale=1, minimum-scale=1,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 320px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 568px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 568px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，页面就可以满屏显示了。</p>\n<h2 id=\"不同手机下显示问题\"><a href=\"#不同手机下显示问题\" class=\"headerlink\" title=\"不同手机下显示问题\"></a>不同手机下显示问题</h2><p>通过测试我们发现，经过我们的设置黄色方块在不同的手机分辨率下保持了一样的大小，但是有一个小问题，那就是在不管页面内的元素的大小和多少的情况下，如果viewport的width设置一个固定的值，比如320，那么屏幕逻辑像素宽度小于320的手机总是可以左右滑动的，在一般情况下这些不符合我们的预期，所以我们需要给width设置一个特殊值<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样，页面的默认宽度就确定为手机逻辑像素宽度了。</p>\n<h1 id=\"什么是rem\"><a href=\"#什么是rem\" class=\"headerlink\" title=\"什么是rem\"></a>什么是rem</h1><p>问题说到现在，似乎还没有解决，我们虽然搞定了手机的缩放问题，但是仍然无法做到让黄色方块在各个手机的分辨率下满屏显示，px在是个精确的度量单位，我们更需要一种按照手机分辨率，按比例缩放的单位！<br>而这就是rem存在的意义，rem与我们平常所见的em单位很像，实际上多出来的这个r就是response的意思<br>rem就是相对于页面根元素字体大小的度量单位，也就是说如果<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么1rem = 16px，2rem = 2x16px，就是这么简单。<br>根据这个简单的特性，我们可以通过js先算出当前手机的宽度，然后通过一个事先约定好的比例公式算出的值给html的font-size赋值。这样rem的值就是一个响应式的值了<br>这样的代码有很多，在这里我给出一段参考代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = doc.documentElement,</span><br><span class=\"line\">            resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span>,</span><br><span class=\"line\">            recalc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                docEl.style.fontSize = <span class=\"number\">20</span> * (clientWidth / <span class=\"number\">375</span>) + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这一段代码中是将iPhone6为底稿，所有的元素的像素宽度÷20，得到的值就是元素的rem值</p>\n<h1 id=\"彻底解决问题\"><a href=\"#彻底解决问题\" class=\"headerlink\" title=\"彻底解决问题\"></a>彻底解决问题</h1><p>根据前面的知识点，我们来终结之前的满屏问题，因为上述代码是已iPhone6(375x667)为底稿的，所以如果要满屏的话，黄色方块的宽应该设置为375÷20=18.75rem，高设置为667÷20=33.35rem。<br>所以最终代码是这样的<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">width</span>: 18<span class=\"selector-class\">.75rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">height</span>: 33<span class=\"selector-class\">.35rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 50px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 568px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, win</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t    <span class=\"keyword\">var</span> docEl = doc.documentElement,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t            recalc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t                docEl.style.fontSize = <span class=\"number\">20</span> * (clientWidth / <span class=\"number\">375</span>) + <span class=\"string\">'px'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t            &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">\t    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图如下<br><img src=\"/images/mobile-adaptive/mobile-iPhone5.gif\" alt=\"iphone5\"></p>\n<h1 id=\"另一种办法——网易的移动端适配方案\"><a href=\"#另一种办法——网易的移动端适配方案\" class=\"headerlink\" title=\"另一种办法——网易的移动端适配方案\"></a>另一种办法——网易的移动端适配方案</h1><p>我们之前说过，如果给viewport的width设置一个固定值，则在不同分辨率下手机会进行自动缩放以适应屏幕，如果我们可以使用js计算出缩放比例，让手机屏幕正好是我们需要的固定值，然后在meta标签中加上计算出的缩放比例，这样是不是也能解决问题呢？<br>网易的metahandler.js就是这样实现的，只要在页面中引入js，并在js中结尾设置好需要的宽度<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用自适应屏幕的功能函数，位于182行</span></span><br><span class=\"line\">opt.fixViewportWidth(<span class=\"number\">640</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在页面加载的时候，js就能根据当前的手机智能的计算出缩放比例并加上<img src=\"/images/mobile-adaptive/mobile-iPhone6.gif\" alt=\"iphone5\"><br>这是一个不错的想法，但是在使用的过程中有几个小缺陷：</p>\n<ul>\n<li>指定宽度需要在js中修改，应该封装出接口供使用者使用，使用者需要自己修改封装一下</li>\n<li>js没有监听屏幕变化的事件，在手机横屏的时候不能满屏</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>手机适配的方案有很多，大家可以选择合适自己的，有一些方案，如响应式也是不错的，关键需要看页面的布局和功能复杂度，大家理解了手机适配的原理，在以后可以更好的更快的构建适合自己的移动端网页。<br>另外我集合了一点方案在我的git上，欢迎大家star和关注<br><a href=\"https://github.com/zk-/mobile-response\" target=\"_blank\" rel=\"noopener\">https://github.com/zk-/mobile-response</a></p>"},{"title":"移动端开发教程（一）","date":"2019-01-16T01:23:34.000Z","_content":"第一节课我们主要是讲解移动端前端开发viewport相关的概念和搭建基础\n<!-- more -->\n# viewport的概念\n在平常pc端开发的过程中，我们根据设计师给出的设计稿，按照设计稿里面每个元素的大小，在页面上用px这个单位按原样用css画出来，这在pc端开发是在正常不过的事，但是在手机上的移动端开发，我们却并不能这样。下面是一个例子。\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Test01</title>\n<style>\n\t*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 640px;\n\t\theight: 1136px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 150px;\n\t\ttext-align: center;\n\t\tline-height: 1136px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\nIphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。![iphone5](/images/mobile-adaptive/mobile-iPhone.png)\n我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？\n## 移动端1px并不等于设备的1px\n在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。\n\n但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个津津计较，但在移动设备上，必须弄明白这点。\n\n在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。\n\n其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。\n\n在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。css中的px就可以看做是设备的独立像素，所以通过devicePixelRatio，我们可以知道该设备上一个css像素代表多少个物理像素。例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。下图为devicePixelRatio的兼容性在各个手机浏览器上的表现\n![devicePixelRatio的兼容性](/images/mobile-adaptive/300958496962833.png)\n## 利用viewport对手机缩放进行控制\n关于viewport已经有大神对此有详细的研究（[第一篇](https://www.quirksmode.org/mobile/viewports.html)，[第二篇](http://www.quirksmode.org/mobile/viewports2.html)，[第三篇](http://www.quirksmode.org/mobile/metaviewport/)），有兴趣的同学可以去看一下\n\n我在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我的head标签中\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n```\n该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。\n\n\nmeta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。\nmeta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：\n```\nwidth\t        设置layout viewport  的宽度，为一个正整数，或字符串\"device-width\"\ninitial-scale\t设置页面的初始缩放值，为一个数字，可以带小数\nminimum-scale\t允许用户的最小缩放值，为一个数字，可以带小数\nmaximum-scale\t允许用户的最大缩放值，为一个数字，可以带小数\nheight\t        设置layout viewport  的高度，这个属性对我们并不重要，很少使用\nuser-scalable\t是否允许用户进行缩放，值为\"no\"或\"yes\", no 代表不允许，yes代表允许\n```\n# 利用rem对不同移动端进行适配\n看一个例子\n```html\n.con {\n      width: 10rem;\n      height: 10rem;\n      background-color: red;\n }\n<div class=\"con\">\n        \n</div>\n```\n效果图：\n![rem](/images/mobile-adaptive/555.png)\n我们在修改一下html根元素的font-size\n```html\nhtml {\n    font-size: 25px;\n}\n.con {\n      width: 10rem;\n      height: 10rem;\n      background-color: red;\n }\n<div class=\"con\">\n        \n</div>\n```\n效果图：\n![rem](/images/mobile-adaptive/666.png)\n由此我们可以知道rem的特性是根据根元素的font-size值来改变自身的值，我们可以给html设定不同的值，从而达到我们css样式中的适配效果。\n\n例如我们要是在iPhone6下写一个元素来横向占满整个屏幕，那么代码可以这么写：\n```html\nhtml {\n    font-size: 0.5px;\n}\n.con {\n      width: 750rem;\n      height: 10rem;\n      background-color: red;\n }\n<div class=\"con\">\n        \n</div>\n```\n因为iPhone6的devicePixelRatio的值为2，在根据前面设置的meta，无缩放，我们可知道，在屏幕是1个物理像素为0.5个独立像素，所以设置font-size为0.5即可直接使用设计稿的尺寸。\n\n\n但是这样只是适配了iPhone6，无法适配所有手机，所以在这里我们可以用js动态控制font-size\n```js\nvar dpr = window.devicePixelRatio,\nmeta = document.getElementsByTagName(\"meta\")[1];\nmeta.setAttribute('content', 'initial-scale=' + 1 / dpr + ', maximum-scale=' + 1 / dpr + ', minimum-scale=' + 1 / dpr + ', user-scalable=no');\n; (function (doc, win) {\n    var docEl = doc.documentElement,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n        recalc = function () {\n            var clientWidth = docEl.clientWidth;\n            if (!clientWidth) return;\n            docEl.style.fontSize = clientWidth / 750 + 'px';\n        };\n\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n})(document, window);\n```\n这段代码解决了几个痛点\n> 这样就可以完全按照视觉稿上的尺寸来了。\n\n> 解决了图片高清问题。\n\n> 解决了border 1px问题（我们设置的1px，在iphone上，由于viewport的scale是0.5，所以就自然缩放成0.5px）","source":"_posts/mobile-develop-teach.md","raw":"---\ntitle: 移动端开发教程（一）\ndate: 2019-01-16 09:23:34\ncategories: [博客]\ntags: [移动端]\n---\n第一节课我们主要是讲解移动端前端开发viewport相关的概念和搭建基础\n<!-- more -->\n# viewport的概念\n在平常pc端开发的过程中，我们根据设计师给出的设计稿，按照设计稿里面每个元素的大小，在页面上用px这个单位按原样用css画出来，这在pc端开发是在正常不过的事，但是在手机上的移动端开发，我们却并不能这样。下面是一个例子。\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Test01</title>\n<style>\n\t*{margin: 0;padding: 0}\n\t.pic{\n\t\twidth: 640px;\n\t\theight: 1136px;\n\t\tbackground-color: #FFE872;\n\t\tcolor: white;\n\t\tfont-size: 150px;\n\t\ttext-align: center;\n\t\tline-height: 1136px;\n\t\tfont-family: cursive; \n\t}\n</style>\n</head>\n<body>\n\t<div class=\"pic\"> Yellow </div>\n</body>\n</html>\n```\nIphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。![iphone5](/images/mobile-adaptive/mobile-iPhone.png)\n我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？\n## 移动端1px并不等于设备的1px\n在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。\n\n但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个津津计较，但在移动设备上，必须弄明白这点。\n\n在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。\n\n其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。\n\n在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。css中的px就可以看做是设备的独立像素，所以通过devicePixelRatio，我们可以知道该设备上一个css像素代表多少个物理像素。例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。下图为devicePixelRatio的兼容性在各个手机浏览器上的表现\n![devicePixelRatio的兼容性](/images/mobile-adaptive/300958496962833.png)\n## 利用viewport对手机缩放进行控制\n关于viewport已经有大神对此有详细的研究（[第一篇](https://www.quirksmode.org/mobile/viewports.html)，[第二篇](http://www.quirksmode.org/mobile/viewports2.html)，[第三篇](http://www.quirksmode.org/mobile/metaviewport/)），有兴趣的同学可以去看一下\n\n我在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我的head标签中\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n```\n该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。\n\n\nmeta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。\nmeta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：\n```\nwidth\t        设置layout viewport  的宽度，为一个正整数，或字符串\"device-width\"\ninitial-scale\t设置页面的初始缩放值，为一个数字，可以带小数\nminimum-scale\t允许用户的最小缩放值，为一个数字，可以带小数\nmaximum-scale\t允许用户的最大缩放值，为一个数字，可以带小数\nheight\t        设置layout viewport  的高度，这个属性对我们并不重要，很少使用\nuser-scalable\t是否允许用户进行缩放，值为\"no\"或\"yes\", no 代表不允许，yes代表允许\n```\n# 利用rem对不同移动端进行适配\n看一个例子\n```html\n.con {\n      width: 10rem;\n      height: 10rem;\n      background-color: red;\n }\n<div class=\"con\">\n        \n</div>\n```\n效果图：\n![rem](/images/mobile-adaptive/555.png)\n我们在修改一下html根元素的font-size\n```html\nhtml {\n    font-size: 25px;\n}\n.con {\n      width: 10rem;\n      height: 10rem;\n      background-color: red;\n }\n<div class=\"con\">\n        \n</div>\n```\n效果图：\n![rem](/images/mobile-adaptive/666.png)\n由此我们可以知道rem的特性是根据根元素的font-size值来改变自身的值，我们可以给html设定不同的值，从而达到我们css样式中的适配效果。\n\n例如我们要是在iPhone6下写一个元素来横向占满整个屏幕，那么代码可以这么写：\n```html\nhtml {\n    font-size: 0.5px;\n}\n.con {\n      width: 750rem;\n      height: 10rem;\n      background-color: red;\n }\n<div class=\"con\">\n        \n</div>\n```\n因为iPhone6的devicePixelRatio的值为2，在根据前面设置的meta，无缩放，我们可知道，在屏幕是1个物理像素为0.5个独立像素，所以设置font-size为0.5即可直接使用设计稿的尺寸。\n\n\n但是这样只是适配了iPhone6，无法适配所有手机，所以在这里我们可以用js动态控制font-size\n```js\nvar dpr = window.devicePixelRatio,\nmeta = document.getElementsByTagName(\"meta\")[1];\nmeta.setAttribute('content', 'initial-scale=' + 1 / dpr + ', maximum-scale=' + 1 / dpr + ', minimum-scale=' + 1 / dpr + ', user-scalable=no');\n; (function (doc, win) {\n    var docEl = doc.documentElement,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n        recalc = function () {\n            var clientWidth = docEl.clientWidth;\n            if (!clientWidth) return;\n            docEl.style.fontSize = clientWidth / 750 + 'px';\n        };\n\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n\n})(document, window);\n```\n这段代码解决了几个痛点\n> 这样就可以完全按照视觉稿上的尺寸来了。\n\n> 解决了图片高清问题。\n\n> 解决了border 1px问题（我们设置的1px，在iphone上，由于viewport的scale是0.5，所以就自然缩放成0.5px）","slug":"mobile-develop-teach","published":1,"updated":"2019-01-16T03:13:54.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9o000mwsawb7f1fqh2","content":"<p>第一节课我们主要是讲解移动端前端开发viewport相关的概念和搭建基础<br><a id=\"more\"></a></p>\n<h1 id=\"viewport的概念\"><a href=\"#viewport的概念\" class=\"headerlink\" title=\"viewport的概念\"></a>viewport的概念</h1><p>在平常pc端开发的过程中，我们根据设计师给出的设计稿，按照设计稿里面每个元素的大小，在页面上用px这个单位按原样用css画出来，这在pc端开发是在正常不过的事，但是在手机上的移动端开发，我们却并不能这样。下面是一个例子。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 640px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 1136px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 1136px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Iphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。<img src=\"/images/mobile-adaptive/mobile-iPhone.png\" alt=\"iphone5\"><br>我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？</p>\n<h2 id=\"移动端1px并不等于设备的1px\"><a href=\"#移动端1px并不等于设备的1px\" class=\"headerlink\" title=\"移动端1px并不等于设备的1px\"></a>移动端1px并不等于设备的1px</h2><p>在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。</p>\n<p>但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个津津计较，但在移动设备上，必须弄明白这点。</p>\n<p>在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。</p>\n<p>其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。</p>\n<p>在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。css中的px就可以看做是设备的独立像素，所以通过devicePixelRatio，我们可以知道该设备上一个css像素代表多少个物理像素。例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。下图为devicePixelRatio的兼容性在各个手机浏览器上的表现<br><img src=\"/images/mobile-adaptive/300958496962833.png\" alt=\"devicePixelRatio的兼容性\"></p>\n<h2 id=\"利用viewport对手机缩放进行控制\"><a href=\"#利用viewport对手机缩放进行控制\" class=\"headerlink\" title=\"利用viewport对手机缩放进行控制\"></a>利用viewport对手机缩放进行控制</h2><p>关于viewport已经有大神对此有详细的研究（<a href=\"https://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\" rel=\"noopener\">第一篇</a>，<a href=\"http://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\" rel=\"noopener\">第二篇</a>，<a href=\"http://www.quirksmode.org/mobile/metaviewport/\" target=\"_blank\" rel=\"noopener\">第三篇</a>），有兴趣的同学可以去看一下</p>\n<p>我在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我的head标签中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。</p>\n<p>meta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。<br>meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width\t        设置layout viewport  的宽度，为一个正整数，或字符串&quot;device-width&quot;</span><br><span class=\"line\">initial-scale\t设置页面的初始缩放值，为一个数字，可以带小数</span><br><span class=\"line\">minimum-scale\t允许用户的最小缩放值，为一个数字，可以带小数</span><br><span class=\"line\">maximum-scale\t允许用户的最大缩放值，为一个数字，可以带小数</span><br><span class=\"line\">height\t        设置layout viewport  的高度，这个属性对我们并不重要，很少使用</span><br><span class=\"line\">user-scalable\t是否允许用户进行缩放，值为&quot;no&quot;或&quot;yes&quot;, no 代表不允许，yes代表允许</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"利用rem对不同移动端进行适配\"><a href=\"#利用rem对不同移动端进行适配\" class=\"headerlink\" title=\"利用rem对不同移动端进行适配\"></a>利用rem对不同移动端进行适配</h1><p>看一个例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.con &#123;</span><br><span class=\"line\">      width: 10rem;</span><br><span class=\"line\">      height: 10rem;</span><br><span class=\"line\">      background-color: red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"con\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图：<br><img src=\"/images/mobile-adaptive/555.png\" alt=\"rem\"><br>我们在修改一下html根元素的font-size<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">    font-size: 25px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.con &#123;</span><br><span class=\"line\">      width: 10rem;</span><br><span class=\"line\">      height: 10rem;</span><br><span class=\"line\">      background-color: red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"con\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图：<br><img src=\"/images/mobile-adaptive/666.png\" alt=\"rem\"><br>由此我们可以知道rem的特性是根据根元素的font-size值来改变自身的值，我们可以给html设定不同的值，从而达到我们css样式中的适配效果。</p>\n<p>例如我们要是在iPhone6下写一个元素来横向占满整个屏幕，那么代码可以这么写：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">    font-size: 0.5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.con &#123;</span><br><span class=\"line\">      width: 750rem;</span><br><span class=\"line\">      height: 10rem;</span><br><span class=\"line\">      background-color: red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"con\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>因为iPhone6的devicePixelRatio的值为2，在根据前面设置的meta，无缩放，我们可知道，在屏幕是1个物理像素为0.5个独立像素，所以设置font-size为0.5即可直接使用设计稿的尺寸。</p>\n<p>但是这样只是适配了iPhone6，无法适配所有手机，所以在这里我们可以用js动态控制font-size<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio,</span><br><span class=\"line\">meta = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"meta\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">meta.setAttribute(<span class=\"string\">'content'</span>, <span class=\"string\">'initial-scale='</span> + <span class=\"number\">1</span> / dpr + <span class=\"string\">', maximum-scale='</span> + <span class=\"number\">1</span> / dpr + <span class=\"string\">', minimum-scale='</span> + <span class=\"number\">1</span> / dpr + <span class=\"string\">', user-scalable=no'</span>);</span><br><span class=\"line\">; (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = doc.documentElement,</span><br><span class=\"line\">        resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span>,</span><br><span class=\"line\">        recalc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            docEl.style.fontSize = clientWidth / <span class=\"number\">750</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这段代码解决了几个痛点</p>\n<blockquote>\n<p>这样就可以完全按照视觉稿上的尺寸来了。</p>\n</blockquote>\n<blockquote>\n<p>解决了图片高清问题。</p>\n</blockquote>\n<blockquote>\n<p>解决了border 1px问题（我们设置的1px，在iphone上，由于viewport的scale是0.5，所以就自然缩放成0.5px）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>第一节课我们主要是讲解移动端前端开发viewport相关的概念和搭建基础<br>","more":"</p>\n<h1 id=\"viewport的概念\"><a href=\"#viewport的概念\" class=\"headerlink\" title=\"viewport的概念\"></a>viewport的概念</h1><p>在平常pc端开发的过程中，我们根据设计师给出的设计稿，按照设计稿里面每个元素的大小，在页面上用px这个单位按原样用css画出来，这在pc端开发是在正常不过的事，但是在手机上的移动端开发，我们却并不能这样。下面是一个例子。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test01<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">\t*&#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.pic</span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\twidth: 640px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\theight: 1136px;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#FFE872</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tcolor: white;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-size: 150px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\ttext-align: center;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tline-height: 1136px;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tfont-family: cursive; </span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pic\"</span>&gt;</span> Yellow <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Iphone5手机的分辨率为640x1136，我们在这个页面中用css画出了一个像素为640x1136的黄色方块，按照直觉在手机上应该满屏显示。但是实际效果不是这样，如下图。<img src=\"/images/mobile-adaptive/mobile-iPhone.png\" alt=\"iphone5\"><br>我们看到黄色方块没有预想的那样占满整个屏幕。原因是什么呢？</p>\n<h2 id=\"移动端1px并不等于设备的1px\"><a href=\"#移动端1px并不等于设备的1px\" class=\"headerlink\" title=\"移动端1px并不等于设备的1px\"></a>移动端1px并不等于设备的1px</h2><p>在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，这可能会造成我们的一个错觉，那就是css中的像素就是设备的物理像素。</p>\n<p>但实际情况却并非如此，css中的像素只是一个抽象的单位，在不同的设备或不同的环境中，css中的1px所代表的设备物理像素是不同的。在为桌面浏览器设计的网页中，我们无需对这个津津计较，但在移动设备上，必须弄明白这点。</p>\n<p>在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。</p>\n<p>其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。</p>\n<p>在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。css中的px就可以看做是设备的独立像素，所以通过devicePixelRatio，我们可以知道该设备上一个css像素代表多少个物理像素。例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。下图为devicePixelRatio的兼容性在各个手机浏览器上的表现<br><img src=\"/images/mobile-adaptive/300958496962833.png\" alt=\"devicePixelRatio的兼容性\"></p>\n<h2 id=\"利用viewport对手机缩放进行控制\"><a href=\"#利用viewport对手机缩放进行控制\" class=\"headerlink\" title=\"利用viewport对手机缩放进行控制\"></a>利用viewport对手机缩放进行控制</h2><p>关于viewport已经有大神对此有详细的研究（<a href=\"https://www.quirksmode.org/mobile/viewports.html\" target=\"_blank\" rel=\"noopener\">第一篇</a>，<a href=\"http://www.quirksmode.org/mobile/viewports2.html\" target=\"_blank\" rel=\"noopener\">第二篇</a>，<a href=\"http://www.quirksmode.org/mobile/metaviewport/\" target=\"_blank\" rel=\"noopener\">第三篇</a>），有兴趣的同学可以去看一下</p>\n<p>我在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我的head标签中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。</p>\n<p>meta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。<br>meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width\t        设置layout viewport  的宽度，为一个正整数，或字符串&quot;device-width&quot;</span><br><span class=\"line\">initial-scale\t设置页面的初始缩放值，为一个数字，可以带小数</span><br><span class=\"line\">minimum-scale\t允许用户的最小缩放值，为一个数字，可以带小数</span><br><span class=\"line\">maximum-scale\t允许用户的最大缩放值，为一个数字，可以带小数</span><br><span class=\"line\">height\t        设置layout viewport  的高度，这个属性对我们并不重要，很少使用</span><br><span class=\"line\">user-scalable\t是否允许用户进行缩放，值为&quot;no&quot;或&quot;yes&quot;, no 代表不允许，yes代表允许</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"利用rem对不同移动端进行适配\"><a href=\"#利用rem对不同移动端进行适配\" class=\"headerlink\" title=\"利用rem对不同移动端进行适配\"></a>利用rem对不同移动端进行适配</h1><p>看一个例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.con &#123;</span><br><span class=\"line\">      width: 10rem;</span><br><span class=\"line\">      height: 10rem;</span><br><span class=\"line\">      background-color: red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"con\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图：<br><img src=\"/images/mobile-adaptive/555.png\" alt=\"rem\"><br>我们在修改一下html根元素的font-size<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">    font-size: 25px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.con &#123;</span><br><span class=\"line\">      width: 10rem;</span><br><span class=\"line\">      height: 10rem;</span><br><span class=\"line\">      background-color: red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"con\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>效果图：<br><img src=\"/images/mobile-adaptive/666.png\" alt=\"rem\"><br>由此我们可以知道rem的特性是根据根元素的font-size值来改变自身的值，我们可以给html设定不同的值，从而达到我们css样式中的适配效果。</p>\n<p>例如我们要是在iPhone6下写一个元素来横向占满整个屏幕，那么代码可以这么写：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">    font-size: 0.5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.con &#123;</span><br><span class=\"line\">      width: 750rem;</span><br><span class=\"line\">      height: 10rem;</span><br><span class=\"line\">      background-color: red;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"con\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>因为iPhone6的devicePixelRatio的值为2，在根据前面设置的meta，无缩放，我们可知道，在屏幕是1个物理像素为0.5个独立像素，所以设置font-size为0.5即可直接使用设计稿的尺寸。</p>\n<p>但是这样只是适配了iPhone6，无法适配所有手机，所以在这里我们可以用js动态控制font-size<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio,</span><br><span class=\"line\">meta = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"meta\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">meta.setAttribute(<span class=\"string\">'content'</span>, <span class=\"string\">'initial-scale='</span> + <span class=\"number\">1</span> / dpr + <span class=\"string\">', maximum-scale='</span> + <span class=\"number\">1</span> / dpr + <span class=\"string\">', minimum-scale='</span> + <span class=\"number\">1</span> / dpr + <span class=\"string\">', user-scalable=no'</span>);</span><br><span class=\"line\">; (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">doc, win</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> docEl = doc.documentElement,</span><br><span class=\"line\">        resizeEvt = <span class=\"string\">'orientationchange'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span> ? <span class=\"string\">'orientationchange'</span> : <span class=\"string\">'resize'</span>,</span><br><span class=\"line\">        recalc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clientWidth = docEl.clientWidth;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!clientWidth) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            docEl.style.fontSize = clientWidth / <span class=\"number\">750</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!doc.addEventListener) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    win.addEventListener(resizeEvt, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    doc.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, recalc, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>, <span class=\"built_in\">window</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这段代码解决了几个痛点</p>\n<blockquote>\n<p>这样就可以完全按照视觉稿上的尺寸来了。</p>\n</blockquote>\n<blockquote>\n<p>解决了图片高清问题。</p>\n</blockquote>\n<blockquote>\n<p>解决了border 1px问题（我们设置的1px，在iphone上，由于viewport的scale是0.5，所以就自然缩放成0.5px）</p>\n</blockquote>"},{"title":"postman奇技淫巧","date":"2016-10-22T04:20:19.000Z","_content":"\npostman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。\n<!-- more -->\n# postman介绍\npostman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。\n本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。\n\n# 使用前的准备\n在学习使用前你需要知道以下几个小知识：\n- postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（[文档在这里](https://developer.chrome.com/apps/socket)），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。\n- postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。\n- chrome应用市场[地址](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon)\n- 使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)\n\n# postman基本用法\n首先看整个界面，图1\n![主界面](/images/postman/postman1.jpg)图1\n1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用\n2 用来传递测试数据的，就是用户之间分享构建好的测试数据包\n3 History 记录测试历史，每一次发送数据包就会产生一个历史数据\n4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉\n5 我们主要的工作环境-构建器，稍后会详细说明\n6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies\n7 postman设置，可以设置操作习惯，主题和同步等等\n\n# postman构建器的基本使用\n下面我们就先来尝试构建一个数据包\n这里我们用来做实验的例子是向[多说](https://duoshuo.com/)发送请求获取文章的评论数，以及转发数\n相关的API文档在[这里](http://dev.duoshuo.com/docs/50615732a834c63c56004257)\n\n从文档我们知道有以下几个要点：\n- 请求地址是http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\n- 请求方式是GET\n- 需要两个参数，一个short_name，一个threads\n- 不需要登录\n- 我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/\n\nok,让我们现在开始搞事情 ![搞事情](/images/emotions/gsq.jpg)\n\n见图2\n![构建请求](/images/postman/postman2.jpg)\n1 选择请求方式GET\n2 填入地址\n\n见图3\n![构建请求](/images/postman/postman3.jpg)\n1 点击\n2 填入参数\n\n最后我们点击Send按钮，成功！\n![成功结果](/images/postman/postman4.jpg)\n我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）\n\n# 奇技淫巧（重点）\n前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能\n因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能\n点击这里\n![code](/images/postman/postman5.jpg)\n我们发现postman竟然可以为你提供各种语言版本构建器的代码！\n![code](/images/postman/postman6.jpg)\n点击左上角可以切换语言！\n![code](/images/postman/postman7.jpg)\n如图，nodejs的构建器代码\n\n这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！\n\n文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)","source":"_posts/postman奇技淫巧.md","raw":"---\ntitle: postman奇技淫巧\ndate: 2016-10-22 12:20:19\ncategories: [工具]\ntags: [爬虫,chrome应用,测试]\n---\n\npostman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。\n<!-- more -->\n# postman介绍\npostman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。\n本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。\n\n# 使用前的准备\n在学习使用前你需要知道以下几个小知识：\n- postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（[文档在这里](https://developer.chrome.com/apps/socket)），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。\n- postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。\n- chrome应用市场[地址](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon)\n- 使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)\n\n# postman基本用法\n首先看整个界面，图1\n![主界面](/images/postman/postman1.jpg)图1\n1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用\n2 用来传递测试数据的，就是用户之间分享构建好的测试数据包\n3 History 记录测试历史，每一次发送数据包就会产生一个历史数据\n4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉\n5 我们主要的工作环境-构建器，稍后会详细说明\n6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies\n7 postman设置，可以设置操作习惯，主题和同步等等\n\n# postman构建器的基本使用\n下面我们就先来尝试构建一个数据包\n这里我们用来做实验的例子是向[多说](https://duoshuo.com/)发送请求获取文章的评论数，以及转发数\n相关的API文档在[这里](http://dev.duoshuo.com/docs/50615732a834c63c56004257)\n\n从文档我们知道有以下几个要点：\n- 请求地址是http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\n- 请求方式是GET\n- 需要两个参数，一个short_name，一个threads\n- 不需要登录\n- 我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/\n\nok,让我们现在开始搞事情 ![搞事情](/images/emotions/gsq.jpg)\n\n见图2\n![构建请求](/images/postman/postman2.jpg)\n1 选择请求方式GET\n2 填入地址\n\n见图3\n![构建请求](/images/postman/postman3.jpg)\n1 点击\n2 填入参数\n\n最后我们点击Send按钮，成功！\n![成功结果](/images/postman/postman4.jpg)\n我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）\n\n# 奇技淫巧（重点）\n前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能\n因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能\n点击这里\n![code](/images/postman/postman5.jpg)\n我们发现postman竟然可以为你提供各种语言版本构建器的代码！\n![code](/images/postman/postman6.jpg)\n点击左上角可以切换语言！\n![code](/images/postman/postman7.jpg)\n如图，nodejs的构建器代码\n\n这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！\n\n文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)","slug":"postman奇技淫巧","published":1,"updated":"2016-11-22T09:15:35.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9p000owsawqc1y86nz","content":"<p>postman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。<br><a id=\"more\"></a></p>\n<h1 id=\"postman介绍\"><a href=\"#postman介绍\" class=\"headerlink\" title=\"postman介绍\"></a>postman介绍</h1><p>postman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。<br>本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。</p>\n<h1 id=\"使用前的准备\"><a href=\"#使用前的准备\" class=\"headerlink\" title=\"使用前的准备\"></a>使用前的准备</h1><p>在学习使用前你需要知道以下几个小知识：</p>\n<ul>\n<li>postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（<a href=\"https://developer.chrome.com/apps/socket\" target=\"_blank\" rel=\"noopener\">文档在这里</a>），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。</li>\n<li>postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。</li>\n<li>chrome应用市场<a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n<li>使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)</li>\n</ul>\n<h1 id=\"postman基本用法\"><a href=\"#postman基本用法\" class=\"headerlink\" title=\"postman基本用法\"></a>postman基本用法</h1><p>首先看整个界面，图1<br><img src=\"/images/postman/postman1.jpg\" alt=\"主界面\">图1<br>1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用<br>2 用来传递测试数据的，就是用户之间分享构建好的测试数据包<br>3 History 记录测试历史，每一次发送数据包就会产生一个历史数据<br>4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉<br>5 我们主要的工作环境-构建器，稍后会详细说明<br>6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies<br>7 postman设置，可以设置操作习惯，主题和同步等等</p>\n<h1 id=\"postman构建器的基本使用\"><a href=\"#postman构建器的基本使用\" class=\"headerlink\" title=\"postman构建器的基本使用\"></a>postman构建器的基本使用</h1><p>下面我们就先来尝试构建一个数据包<br>这里我们用来做实验的例子是向<a href=\"https://duoshuo.com/\" target=\"_blank\" rel=\"noopener\">多说</a>发送请求获取文章的评论数，以及转发数<br>相关的API文档在<a href=\"http://dev.duoshuo.com/docs/50615732a834c63c56004257\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>从文档我们知道有以下几个要点：</p>\n<ul>\n<li>请求地址是<a href=\"http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\" target=\"_blank\" rel=\"noopener\">http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）</a></li>\n<li>请求方式是GET</li>\n<li>需要两个参数，一个short_name，一个threads</li>\n<li>不需要登录</li>\n<li>我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/</li>\n</ul>\n<p>ok,让我们现在开始搞事情 <img src=\"/images/emotions/gsq.jpg\" alt=\"搞事情\"></p>\n<p>见图2<br><img src=\"/images/postman/postman2.jpg\" alt=\"构建请求\"><br>1 选择请求方式GET<br>2 填入地址</p>\n<p>见图3<br><img src=\"/images/postman/postman3.jpg\" alt=\"构建请求\"><br>1 点击<br>2 填入参数</p>\n<p>最后我们点击Send按钮，成功！<br><img src=\"/images/postman/postman4.jpg\" alt=\"成功结果\"><br>我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）</p>\n<h1 id=\"奇技淫巧（重点）\"><a href=\"#奇技淫巧（重点）\" class=\"headerlink\" title=\"奇技淫巧（重点）\"></a>奇技淫巧（重点）</h1><p>前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能<br>因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能<br>点击这里<br><img src=\"/images/postman/postman5.jpg\" alt=\"code\"><br>我们发现postman竟然可以为你提供各种语言版本构建器的代码！<br><img src=\"/images/postman/postman6.jpg\" alt=\"code\"><br>点击左上角可以切换语言！<br><img src=\"/images/postman/postman7.jpg\" alt=\"code\"><br>如图，nodejs的构建器代码</p>\n<p>这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！</p>\n<p>文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)</p>\n","site":{"data":{}},"excerpt":"<p>postman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。<br>","more":"</p>\n<h1 id=\"postman介绍\"><a href=\"#postman介绍\" class=\"headerlink\" title=\"postman介绍\"></a>postman介绍</h1><p>postman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。<br>本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。</p>\n<h1 id=\"使用前的准备\"><a href=\"#使用前的准备\" class=\"headerlink\" title=\"使用前的准备\"></a>使用前的准备</h1><p>在学习使用前你需要知道以下几个小知识：</p>\n<ul>\n<li>postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（<a href=\"https://developer.chrome.com/apps/socket\" target=\"_blank\" rel=\"noopener\">文档在这里</a>），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。</li>\n<li>postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。</li>\n<li>chrome应用市场<a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n<li>使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)</li>\n</ul>\n<h1 id=\"postman基本用法\"><a href=\"#postman基本用法\" class=\"headerlink\" title=\"postman基本用法\"></a>postman基本用法</h1><p>首先看整个界面，图1<br><img src=\"/images/postman/postman1.jpg\" alt=\"主界面\">图1<br>1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用<br>2 用来传递测试数据的，就是用户之间分享构建好的测试数据包<br>3 History 记录测试历史，每一次发送数据包就会产生一个历史数据<br>4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉<br>5 我们主要的工作环境-构建器，稍后会详细说明<br>6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies<br>7 postman设置，可以设置操作习惯，主题和同步等等</p>\n<h1 id=\"postman构建器的基本使用\"><a href=\"#postman构建器的基本使用\" class=\"headerlink\" title=\"postman构建器的基本使用\"></a>postman构建器的基本使用</h1><p>下面我们就先来尝试构建一个数据包<br>这里我们用来做实验的例子是向<a href=\"https://duoshuo.com/\" target=\"_blank\" rel=\"noopener\">多说</a>发送请求获取文章的评论数，以及转发数<br>相关的API文档在<a href=\"http://dev.duoshuo.com/docs/50615732a834c63c56004257\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>从文档我们知道有以下几个要点：</p>\n<ul>\n<li>请求地址是<a href=\"http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\" target=\"_blank\" rel=\"noopener\">http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）</a></li>\n<li>请求方式是GET</li>\n<li>需要两个参数，一个short_name，一个threads</li>\n<li>不需要登录</li>\n<li>我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/</li>\n</ul>\n<p>ok,让我们现在开始搞事情 <img src=\"/images/emotions/gsq.jpg\" alt=\"搞事情\"></p>\n<p>见图2<br><img src=\"/images/postman/postman2.jpg\" alt=\"构建请求\"><br>1 选择请求方式GET<br>2 填入地址</p>\n<p>见图3<br><img src=\"/images/postman/postman3.jpg\" alt=\"构建请求\"><br>1 点击<br>2 填入参数</p>\n<p>最后我们点击Send按钮，成功！<br><img src=\"/images/postman/postman4.jpg\" alt=\"成功结果\"><br>我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）</p>\n<h1 id=\"奇技淫巧（重点）\"><a href=\"#奇技淫巧（重点）\" class=\"headerlink\" title=\"奇技淫巧（重点）\"></a>奇技淫巧（重点）</h1><p>前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能<br>因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能<br>点击这里<br><img src=\"/images/postman/postman5.jpg\" alt=\"code\"><br>我们发现postman竟然可以为你提供各种语言版本构建器的代码！<br><img src=\"/images/postman/postman6.jpg\" alt=\"code\"><br>点击左上角可以切换语言！<br><img src=\"/images/postman/postman7.jpg\" alt=\"code\"><br>如图，nodejs的构建器代码</p>\n<p>这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！</p>\n<p>文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)</p>"},{"title":"微信小程序的登录与分享","date":"2019-04-11T05:41:08.000Z","_content":"# 登录\n从微信官方给的文档上给的图看，有点复杂，让人头昏眼花，实际上我们只要理清流程，整个过程并不难。\n<!-- more -->\n![微信小程序](/images/weixinxiaochenxu/api-login.jpg)\n\n首先需要调用微信的登录接口，拿到code\n```javascript\nwx.login({\n  success(res) {\n    if (res.code) {\n      // 发起网络请求\n      console.log(res.code)\n    } else {\n      console.log('登录失败！' + res.errMsg)\n    }\n  }\n})\n```\n然后发送code里的数据到对应的后台\n```javascript\nwx.request({\n    url: 'loginurl', //你对应后台的登录地址\n    data: {\n        code: res.code\n    },\n    success:function(){\n        callback();\n    }\n})\n```\n后台拿到数据与微信后台交互解密，返回解密数据\n```json\n{\n    \"openid\" : \"otsAA5dH45UrTJaBXi-tOemf1-dg\",\n    \"user_3rdsession\" : \"a85d4520e4df47f139c7dd718c179df9\",\n\n    \"status\":\"normal\" //第三方后台自定义状态数据\n}\n```\n小程序拿到数据，存入localstorage\n```javascript\nwx.setStorageSync(\n  'userInfo',\n  {\n      data:'data'\n  }\n)\n```\n封装网络请求函数，在每次发送请求时，使用getStorageSync取出数据，带上数据发送出去，小程序设置用户在没有操作的情况下session过5分钟就会过期，所以需要处理好过期情况\n```javascript\nfunction ajax_curl(url, data, cb, posttype = 'get', func_fail){\n  var userInfo = wx.getStorageSync('userInfo');\n  data = Object.assign(data, userInfo); //合并对象\n  wx.request({\n    url: url,\n    data: data,\n    // method: method_type,  忽略细节\n    // header: {\n    //   'Content-Type': headerset\n    // },\n    success: function (res) {\n      typeof cb == \"function\" && cb(res.data.data);\n    },\n    fail: function (res) {\n      if (res.data.code == -999) { //检测下线，重新登录\n        login(function(){\n          data.user_3rdsession = wx.getStorageSync('userInfo').user_3rdsession\n          ajax_curl(url, data, cb, posttype);\n        });\n      } else {\n        typeof func_fail == \"function\" && func_fail(res);\n          wx.showToast({\n          title: res.message,\n          icon: 'none',\n          duration: 2000\n        })\n      }\n    }\n  })\n}\n```\n# 分享\n小程序的分享有两种形式，一个是通过按钮__button__转发，一个是通过右上角的菜单按钮转发。\n按钮转发需要设置button组件中的open-type属性，此处需要页面设置Page.onShareAppMessage事件才能出发\n```html\n<button open-type=\"share\">分享</button>\n```\n菜单转发就简单很多，只需要在当前页里设置好onShareAppMessage事件\n```javascript\nPage({\n  onShareAppMessage(res) {\n    if (res.from === 'button') {\n      // 来自页面内转发按钮,如果是来自菜单则是menu\n      console.log(res.target)\n    }\n    return {\n      title: '自定义转发标题',\n      path: '/page/user?id=123',\n      imageUrl:'' //可选\n    }\n  }\n})\n```\n## 在微信开发者编辑器中模拟打开分享小程序的场景\n![微信小程序](/images/weixinxiaochenxu/bianyi.png)\n![微信小程序](/images/weixinxiaochenxu/bianyi2.png)\n选择好启动页面，为你分享的那个页面路径，设置好你的启动参数，就可以模拟分享小程序的场景\n## 获取群内转发的一些信息shareTicket\n首先需要使用微信的接口开放shareTicket的设置\n```javascript\nwx.showShareMenu({\n  withShareTicket: true\n})\n```\n在转发的过程中，其他用户打开转发的小程序时，可以通过在 App.onLaunch 或 App.onShow 获取到一个 shareTicket\n```javascript\nApp({\n  onLaunch: function (opt) {\n    console.log(opt.shareTicket) //一个字符串\n  }\n})\n```\n注意，这里可以用我们刚刚学到的知识来模拟分享场景，不过有一个小小的区别，看下图\n![微信小程序](/images/weixinxiaochenxu/ddd.png)\n然后通过调用 wx.getShareInfo 接口传入此 shareTicket 可以获取到转发信息\n```javascript\nwx.getShareInfo({\n    shareTicket: app.globalData.tik,\n    success:function(res){\n        console.log(res)\n    }\n})\n```\n此处获取到的数据，实际上是包含加密字符串的对象，我们还需要将数据发送到对应的第三方服务器中解密，才能拿到正常的数据\n```json\n{\n  \"nickName\": \"Band\",\n  \"gender\": 1,\n  \"language\": \"zh_CN\",\n  \"city\": \"Guangzhou\",\n  \"province\": \"Guangdong\",\n  \"country\": \"CN\",\n  \"avatarUrl\": \"http://wx.qlogo.cn/mmopen/vi_32/1vZvI39NWFQ9XM4LtQpFrQJ1xlgZxx3w7bQxKARol6503Iuswjjn6nIGBiaycAjAtpujxyzYsrztuuICqIM5ibXQ/0\"\n}\n```","source":"_posts/miniprogram-share-and-login.md","raw":"---\ntitle: 微信小程序的登录与分享\ndate: 2019-04-11 13:41:08\ncategories: [博客]\ntags: [微信小程序]\n---\n# 登录\n从微信官方给的文档上给的图看，有点复杂，让人头昏眼花，实际上我们只要理清流程，整个过程并不难。\n<!-- more -->\n![微信小程序](/images/weixinxiaochenxu/api-login.jpg)\n\n首先需要调用微信的登录接口，拿到code\n```javascript\nwx.login({\n  success(res) {\n    if (res.code) {\n      // 发起网络请求\n      console.log(res.code)\n    } else {\n      console.log('登录失败！' + res.errMsg)\n    }\n  }\n})\n```\n然后发送code里的数据到对应的后台\n```javascript\nwx.request({\n    url: 'loginurl', //你对应后台的登录地址\n    data: {\n        code: res.code\n    },\n    success:function(){\n        callback();\n    }\n})\n```\n后台拿到数据与微信后台交互解密，返回解密数据\n```json\n{\n    \"openid\" : \"otsAA5dH45UrTJaBXi-tOemf1-dg\",\n    \"user_3rdsession\" : \"a85d4520e4df47f139c7dd718c179df9\",\n\n    \"status\":\"normal\" //第三方后台自定义状态数据\n}\n```\n小程序拿到数据，存入localstorage\n```javascript\nwx.setStorageSync(\n  'userInfo',\n  {\n      data:'data'\n  }\n)\n```\n封装网络请求函数，在每次发送请求时，使用getStorageSync取出数据，带上数据发送出去，小程序设置用户在没有操作的情况下session过5分钟就会过期，所以需要处理好过期情况\n```javascript\nfunction ajax_curl(url, data, cb, posttype = 'get', func_fail){\n  var userInfo = wx.getStorageSync('userInfo');\n  data = Object.assign(data, userInfo); //合并对象\n  wx.request({\n    url: url,\n    data: data,\n    // method: method_type,  忽略细节\n    // header: {\n    //   'Content-Type': headerset\n    // },\n    success: function (res) {\n      typeof cb == \"function\" && cb(res.data.data);\n    },\n    fail: function (res) {\n      if (res.data.code == -999) { //检测下线，重新登录\n        login(function(){\n          data.user_3rdsession = wx.getStorageSync('userInfo').user_3rdsession\n          ajax_curl(url, data, cb, posttype);\n        });\n      } else {\n        typeof func_fail == \"function\" && func_fail(res);\n          wx.showToast({\n          title: res.message,\n          icon: 'none',\n          duration: 2000\n        })\n      }\n    }\n  })\n}\n```\n# 分享\n小程序的分享有两种形式，一个是通过按钮__button__转发，一个是通过右上角的菜单按钮转发。\n按钮转发需要设置button组件中的open-type属性，此处需要页面设置Page.onShareAppMessage事件才能出发\n```html\n<button open-type=\"share\">分享</button>\n```\n菜单转发就简单很多，只需要在当前页里设置好onShareAppMessage事件\n```javascript\nPage({\n  onShareAppMessage(res) {\n    if (res.from === 'button') {\n      // 来自页面内转发按钮,如果是来自菜单则是menu\n      console.log(res.target)\n    }\n    return {\n      title: '自定义转发标题',\n      path: '/page/user?id=123',\n      imageUrl:'' //可选\n    }\n  }\n})\n```\n## 在微信开发者编辑器中模拟打开分享小程序的场景\n![微信小程序](/images/weixinxiaochenxu/bianyi.png)\n![微信小程序](/images/weixinxiaochenxu/bianyi2.png)\n选择好启动页面，为你分享的那个页面路径，设置好你的启动参数，就可以模拟分享小程序的场景\n## 获取群内转发的一些信息shareTicket\n首先需要使用微信的接口开放shareTicket的设置\n```javascript\nwx.showShareMenu({\n  withShareTicket: true\n})\n```\n在转发的过程中，其他用户打开转发的小程序时，可以通过在 App.onLaunch 或 App.onShow 获取到一个 shareTicket\n```javascript\nApp({\n  onLaunch: function (opt) {\n    console.log(opt.shareTicket) //一个字符串\n  }\n})\n```\n注意，这里可以用我们刚刚学到的知识来模拟分享场景，不过有一个小小的区别，看下图\n![微信小程序](/images/weixinxiaochenxu/ddd.png)\n然后通过调用 wx.getShareInfo 接口传入此 shareTicket 可以获取到转发信息\n```javascript\nwx.getShareInfo({\n    shareTicket: app.globalData.tik,\n    success:function(res){\n        console.log(res)\n    }\n})\n```\n此处获取到的数据，实际上是包含加密字符串的对象，我们还需要将数据发送到对应的第三方服务器中解密，才能拿到正常的数据\n```json\n{\n  \"nickName\": \"Band\",\n  \"gender\": 1,\n  \"language\": \"zh_CN\",\n  \"city\": \"Guangzhou\",\n  \"province\": \"Guangdong\",\n  \"country\": \"CN\",\n  \"avatarUrl\": \"http://wx.qlogo.cn/mmopen/vi_32/1vZvI39NWFQ9XM4LtQpFrQJ1xlgZxx3w7bQxKARol6503Iuswjjn6nIGBiaycAjAtpujxyzYsrztuuICqIM5ibXQ/0\"\n}\n```","slug":"miniprogram-share-and-login","published":1,"updated":"2019-04-11T07:19:42.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9r000swsawmvknqub1","content":"<h1 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h1><p>从微信官方给的文档上给的图看，有点复杂，让人头昏眼花，实际上我们只要理清流程，整个过程并不难。<br><a id=\"more\"></a><br><img src=\"/images/weixinxiaochenxu/api-login.jpg\" alt=\"微信小程序\"></p>\n<p>首先需要调用微信的登录接口，拿到code<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.login(&#123;</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.code) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 发起网络请求</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.code)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'登录失败！'</span> + res.errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>然后发送code里的数据到对应的后台<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'loginurl'</span>, <span class=\"comment\">//你对应后台的登录地址</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        code: res.code</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>后台拿到数据与微信后台交互解密，返回解密数据<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"openid\"</span> : <span class=\"string\">\"otsAA5dH45UrTJaBXi-tOemf1-dg\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"user_3rdsession\"</span> : <span class=\"string\">\"a85d4520e4df47f139c7dd718c179df9\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"status\"</span>:<span class=\"string\">\"normal\"</span> //第三方后台自定义状态数据</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>小程序拿到数据，存入localstorage<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.setStorageSync(</span><br><span class=\"line\">  <span class=\"string\">'userInfo'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      data:<span class=\"string\">'data'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>封装网络请求函数，在每次发送请求时，使用getStorageSync取出数据，带上数据发送出去，小程序设置用户在没有操作的情况下session过5分钟就会过期，所以需要处理好过期情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax_curl</span>(<span class=\"params\">url, data, cb, posttype = <span class=\"string\">'get'</span>, func_fail</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> userInfo = wx.getStorageSync(<span class=\"string\">'userInfo'</span>);</span><br><span class=\"line\">  data = <span class=\"built_in\">Object</span>.assign(data, userInfo); <span class=\"comment\">//合并对象</span></span><br><span class=\"line\">  wx.request(&#123;</span><br><span class=\"line\">    url: url,</span><br><span class=\"line\">    data: data,</span><br><span class=\"line\">    <span class=\"comment\">// method: method_type,  忽略细节</span></span><br><span class=\"line\">    <span class=\"comment\">// header: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   'Content-Type': headerset</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(res.data.data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.data.code == <span class=\"number\">-999</span>) &#123; <span class=\"comment\">//检测下线，重新登录</span></span><br><span class=\"line\">        login(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          data.user_3rdsession = wx.getStorageSync(<span class=\"string\">'userInfo'</span>).user_3rdsession</span><br><span class=\"line\">          ajax_curl(url, data, cb, posttype);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> func_fail == <span class=\"string\">\"function\"</span> &amp;&amp; func_fail(res);</span><br><span class=\"line\">          wx.showToast(&#123;</span><br><span class=\"line\">          title: res.message,</span><br><span class=\"line\">          icon: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">          duration: <span class=\"number\">2000</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h1><p>小程序的分享有两种形式，一个是通过按钮<strong>button</strong>转发，一个是通过右上角的菜单按钮转发。<br>按钮转发需要设置button组件中的open-type属性，此处需要页面设置Page.onShareAppMessage事件才能出发<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">open-type</span>=<span class=\"string\">\"share\"</span>&gt;</span>分享<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>菜单转发就简单很多，只需要在当前页里设置好onShareAppMessage事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  onShareAppMessage(res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.from === <span class=\"string\">'button'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 来自页面内转发按钮,如果是来自菜单则是menu</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'自定义转发标题'</span>,</span><br><span class=\"line\">      path: <span class=\"string\">'/page/user?id=123'</span>,</span><br><span class=\"line\">      imageUrl:<span class=\"string\">''</span> <span class=\"comment\">//可选</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在微信开发者编辑器中模拟打开分享小程序的场景\"><a href=\"#在微信开发者编辑器中模拟打开分享小程序的场景\" class=\"headerlink\" title=\"在微信开发者编辑器中模拟打开分享小程序的场景\"></a>在微信开发者编辑器中模拟打开分享小程序的场景</h2><p><img src=\"/images/weixinxiaochenxu/bianyi.png\" alt=\"微信小程序\"><br><img src=\"/images/weixinxiaochenxu/bianyi2.png\" alt=\"微信小程序\"><br>选择好启动页面，为你分享的那个页面路径，设置好你的启动参数，就可以模拟分享小程序的场景</p>\n<h2 id=\"获取群内转发的一些信息shareTicket\"><a href=\"#获取群内转发的一些信息shareTicket\" class=\"headerlink\" title=\"获取群内转发的一些信息shareTicket\"></a>获取群内转发的一些信息shareTicket</h2><p>首先需要使用微信的接口开放shareTicket的设置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.showShareMenu(&#123;</span><br><span class=\"line\">  withShareTicket: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在转发的过程中，其他用户打开转发的小程序时，可以通过在 App.onLaunch 或 App.onShow 获取到一个 shareTicket<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(opt.shareTicket) <span class=\"comment\">//一个字符串</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>注意，这里可以用我们刚刚学到的知识来模拟分享场景，不过有一个小小的区别，看下图<br><img src=\"/images/weixinxiaochenxu/ddd.png\" alt=\"微信小程序\"><br>然后通过调用 wx.getShareInfo 接口传入此 shareTicket 可以获取到转发信息<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.getShareInfo(&#123;</span><br><span class=\"line\">    shareTicket: app.globalData.tik,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此处获取到的数据，实际上是包含加密字符串的对象，我们还需要将数据发送到对应的第三方服务器中解密，才能拿到正常的数据<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"nickName\"</span>: <span class=\"string\">\"Band\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"gender\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"zh_CN\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Guangzhou\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"province\"</span>: <span class=\"string\">\"Guangdong\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"avatarUrl\"</span>: <span class=\"string\">\"http://wx.qlogo.cn/mmopen/vi_32/1vZvI39NWFQ9XM4LtQpFrQJ1xlgZxx3w7bQxKARol6503Iuswjjn6nIGBiaycAjAtpujxyzYsrztuuICqIM5ibXQ/0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h1><p>从微信官方给的文档上给的图看，有点复杂，让人头昏眼花，实际上我们只要理清流程，整个过程并不难。<br>","more":"<br><img src=\"/images/weixinxiaochenxu/api-login.jpg\" alt=\"微信小程序\"></p>\n<p>首先需要调用微信的登录接口，拿到code<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.login(&#123;</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.code) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 发起网络请求</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.code)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'登录失败！'</span> + res.errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>然后发送code里的数据到对应的后台<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.request(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'loginurl'</span>, <span class=\"comment\">//你对应后台的登录地址</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        code: res.code</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>后台拿到数据与微信后台交互解密，返回解密数据<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"openid\"</span> : <span class=\"string\">\"otsAA5dH45UrTJaBXi-tOemf1-dg\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"user_3rdsession\"</span> : <span class=\"string\">\"a85d4520e4df47f139c7dd718c179df9\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">\"status\"</span>:<span class=\"string\">\"normal\"</span> //第三方后台自定义状态数据</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>小程序拿到数据，存入localstorage<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.setStorageSync(</span><br><span class=\"line\">  <span class=\"string\">'userInfo'</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      data:<span class=\"string\">'data'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>封装网络请求函数，在每次发送请求时，使用getStorageSync取出数据，带上数据发送出去，小程序设置用户在没有操作的情况下session过5分钟就会过期，所以需要处理好过期情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax_curl</span>(<span class=\"params\">url, data, cb, posttype = <span class=\"string\">'get'</span>, func_fail</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> userInfo = wx.getStorageSync(<span class=\"string\">'userInfo'</span>);</span><br><span class=\"line\">  data = <span class=\"built_in\">Object</span>.assign(data, userInfo); <span class=\"comment\">//合并对象</span></span><br><span class=\"line\">  wx.request(&#123;</span><br><span class=\"line\">    url: url,</span><br><span class=\"line\">    data: data,</span><br><span class=\"line\">    <span class=\"comment\">// method: method_type,  忽略细节</span></span><br><span class=\"line\">    <span class=\"comment\">// header: &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   'Content-Type': headerset</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(res.data.data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.data.code == <span class=\"number\">-999</span>) &#123; <span class=\"comment\">//检测下线，重新登录</span></span><br><span class=\"line\">        login(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          data.user_3rdsession = wx.getStorageSync(<span class=\"string\">'userInfo'</span>).user_3rdsession</span><br><span class=\"line\">          ajax_curl(url, data, cb, posttype);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> func_fail == <span class=\"string\">\"function\"</span> &amp;&amp; func_fail(res);</span><br><span class=\"line\">          wx.showToast(&#123;</span><br><span class=\"line\">          title: res.message,</span><br><span class=\"line\">          icon: <span class=\"string\">'none'</span>,</span><br><span class=\"line\">          duration: <span class=\"number\">2000</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h1><p>小程序的分享有两种形式，一个是通过按钮<strong>button</strong>转发，一个是通过右上角的菜单按钮转发。<br>按钮转发需要设置button组件中的open-type属性，此处需要页面设置Page.onShareAppMessage事件才能出发<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">open-type</span>=<span class=\"string\">\"share\"</span>&gt;</span>分享<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>菜单转发就简单很多，只需要在当前页里设置好onShareAppMessage事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  onShareAppMessage(res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.from === <span class=\"string\">'button'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 来自页面内转发按钮,如果是来自菜单则是menu</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'自定义转发标题'</span>,</span><br><span class=\"line\">      path: <span class=\"string\">'/page/user?id=123'</span>,</span><br><span class=\"line\">      imageUrl:<span class=\"string\">''</span> <span class=\"comment\">//可选</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在微信开发者编辑器中模拟打开分享小程序的场景\"><a href=\"#在微信开发者编辑器中模拟打开分享小程序的场景\" class=\"headerlink\" title=\"在微信开发者编辑器中模拟打开分享小程序的场景\"></a>在微信开发者编辑器中模拟打开分享小程序的场景</h2><p><img src=\"/images/weixinxiaochenxu/bianyi.png\" alt=\"微信小程序\"><br><img src=\"/images/weixinxiaochenxu/bianyi2.png\" alt=\"微信小程序\"><br>选择好启动页面，为你分享的那个页面路径，设置好你的启动参数，就可以模拟分享小程序的场景</p>\n<h2 id=\"获取群内转发的一些信息shareTicket\"><a href=\"#获取群内转发的一些信息shareTicket\" class=\"headerlink\" title=\"获取群内转发的一些信息shareTicket\"></a>获取群内转发的一些信息shareTicket</h2><p>首先需要使用微信的接口开放shareTicket的设置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.showShareMenu(&#123;</span><br><span class=\"line\">  withShareTicket: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在转发的过程中，其他用户打开转发的小程序时，可以通过在 App.onLaunch 或 App.onShow 获取到一个 shareTicket<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(opt.shareTicket) <span class=\"comment\">//一个字符串</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>注意，这里可以用我们刚刚学到的知识来模拟分享场景，不过有一个小小的区别，看下图<br><img src=\"/images/weixinxiaochenxu/ddd.png\" alt=\"微信小程序\"><br>然后通过调用 wx.getShareInfo 接口传入此 shareTicket 可以获取到转发信息<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.getShareInfo(&#123;</span><br><span class=\"line\">    shareTicket: app.globalData.tik,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此处获取到的数据，实际上是包含加密字符串的对象，我们还需要将数据发送到对应的第三方服务器中解密，才能拿到正常的数据<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"nickName\"</span>: <span class=\"string\">\"Band\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"gender\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"zh_CN\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"Guangzhou\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"province\"</span>: <span class=\"string\">\"Guangdong\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"avatarUrl\"</span>: <span class=\"string\">\"http://wx.qlogo.cn/mmopen/vi_32/1vZvI39NWFQ9XM4LtQpFrQJ1xlgZxx3w7bQxKARol6503Iuswjjn6nIGBiaycAjAtpujxyzYsrztuuICqIM5ibXQ/0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"requestAnimationFrame 动画(一)","date":"2016-10-21T04:21:35.000Z","_content":"\n让我们写点能动的东西吧!\n<!-- more -->\n今天让我们写点有趣的东西，用js实现动画\n# 动画的定义\n在维基百科里面，动画是这样定义的:\n> 动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。\n\n也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画\n![每秒10帧的动画](/images/requestAnimationFrame/Animexample1.gif)图1\n![每秒2帧的动画](/images/requestAnimationFrame/Animexample2.gif)图2\n\n可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果\n根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms\n# 使用setTimeout实现动画\n在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码\n\n```javascript\nsetTimeout(function() {\n\t// do something here\n\tsetTimeout(arguments.callee)\n}，1000/60)\n```\n\n这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿\n(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)\n# 使用requestAnimationFrame来实现动画\n在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画\n现在我们就用他来实现一个简单的让小球运动的动画:\n```javascript\nvar ball = document.getElementsByTagName('div')[0];\nball.style.left = getComputedStyle(ball)['left']; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.left = (parseFloat(ball.style.left) + 5) +'px';\n\tif (parseFloat(ball.style.left) < 500) {\n\t\trequestAnimationFrame(arguments.callee)\n\t}\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/bwOBPV)\n# 小例子\n是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球\n在此之前，我们要了解以下几个要点:\n- 小球升起时候做减速运动，落下的时候做加速运动\n- 小球如果从地面开是运动，肯定有一个向上的初速度\n- 用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度\n\n好，以下就是成果代码:\n```javascript\nvar ball = document.getElementsByTagName('div')[0];\nvar beginSpeed = 20，speed = 20，a = 0.5;// 设置好小球的初始速度，现速度和加速度\nvar beginHeight = getComputedStyle(ball)['top']\nball.style.top = beginHeight; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.top = (parseFloat(ball.style.top) - speed) +'px';\n\tspeed = speed - a;\n\tif (parseFloat(ball.style.top) >= 500) { //小球回落地面的时候，重置高度和速度\n\t\tball.style.top = beginHeight;\n\t\tspeed = beginSpeed;\n\t}\n\trequestAnimationFrame(arguments.callee)\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/PGXWPw)","source":"_posts/requestAnimationFrame-动画-一.md","raw":"---\ntitle: requestAnimationFrame 动画(一)\ndate: 2016-10-21 12:21:35\ncategories: [博客]\ntags: [js动画]\n---\n\n让我们写点能动的东西吧!\n<!-- more -->\n今天让我们写点有趣的东西，用js实现动画\n# 动画的定义\n在维基百科里面，动画是这样定义的:\n> 动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。\n\n也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画\n![每秒10帧的动画](/images/requestAnimationFrame/Animexample1.gif)图1\n![每秒2帧的动画](/images/requestAnimationFrame/Animexample2.gif)图2\n\n可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果\n根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms\n# 使用setTimeout实现动画\n在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码\n\n```javascript\nsetTimeout(function() {\n\t// do something here\n\tsetTimeout(arguments.callee)\n}，1000/60)\n```\n\n这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿\n(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)\n# 使用requestAnimationFrame来实现动画\n在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画\n现在我们就用他来实现一个简单的让小球运动的动画:\n```javascript\nvar ball = document.getElementsByTagName('div')[0];\nball.style.left = getComputedStyle(ball)['left']; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.left = (parseFloat(ball.style.left) + 5) +'px';\n\tif (parseFloat(ball.style.left) < 500) {\n\t\trequestAnimationFrame(arguments.callee)\n\t}\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/bwOBPV)\n# 小例子\n是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球\n在此之前，我们要了解以下几个要点:\n- 小球升起时候做减速运动，落下的时候做加速运动\n- 小球如果从地面开是运动，肯定有一个向上的初速度\n- 用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度\n\n好，以下就是成果代码:\n```javascript\nvar ball = document.getElementsByTagName('div')[0];\nvar beginSpeed = 20，speed = 20，a = 0.5;// 设置好小球的初始速度，现速度和加速度\nvar beginHeight = getComputedStyle(ball)['top']\nball.style.top = beginHeight; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.top = (parseFloat(ball.style.top) - speed) +'px';\n\tspeed = speed - a;\n\tif (parseFloat(ball.style.top) >= 500) { //小球回落地面的时候，重置高度和速度\n\t\tball.style.top = beginHeight;\n\t\tspeed = beginSpeed;\n\t}\n\trequestAnimationFrame(arguments.callee)\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/PGXWPw)","slug":"requestAnimationFrame-动画-一","published":1,"updated":"2017-06-27T00:52:43.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9s000uwsawdl7w960v","content":"<p>让我们写点能动的东西吧!<br><a id=\"more\"></a><br>今天让我们写点有趣的东西，用js实现动画</p>\n<h1 id=\"动画的定义\"><a href=\"#动画的定义\" class=\"headerlink\" title=\"动画的定义\"></a>动画的定义</h1><p>在维基百科里面，动画是这样定义的:</p>\n<blockquote>\n<p>动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。</p>\n</blockquote>\n<p>也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画<br><img src=\"/images/requestAnimationFrame/Animexample1.gif\" alt=\"每秒10帧的动画\">图1<br><img src=\"/images/requestAnimationFrame/Animexample2.gif\" alt=\"每秒2帧的动画\">图2</p>\n<p>可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果<br>根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms</p>\n<h1 id=\"使用setTimeout实现动画\"><a href=\"#使用setTimeout实现动画\" class=\"headerlink\" title=\"使用setTimeout实现动画\"></a>使用setTimeout实现动画</h1><p>在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\tsetTimeout(<span class=\"built_in\">arguments</span>.callee)</span><br><span class=\"line\">&#125;，<span class=\"number\">1000</span>/<span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n<p>这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿<br>(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)</p>\n<h1 id=\"使用requestAnimationFrame来实现动画\"><a href=\"#使用requestAnimationFrame来实现动画\" class=\"headerlink\" title=\"使用requestAnimationFrame来实现动画\"></a>使用requestAnimationFrame来实现动画</h1><p>在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画<br>现在我们就用他来实现一个简单的让小球运动的动画:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">ball.style.left = getComputedStyle(ball)[<span class=\"string\">'left'</span>]; <span class=\"comment\">//设置好小球的初始值</span></span><br><span class=\"line\">requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tball.style.left = (<span class=\"built_in\">parseFloat</span>(ball.style.left) + <span class=\"number\">5</span>) +<span class=\"string\">'px'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">parseFloat</span>(ball.style.left) &lt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">\t\trequestAnimationFrame(<span class=\"built_in\">arguments</span>.callee)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/bwOBPV\" target=\"_blank\" rel=\"noopener\">点击这里预览效果</a></p>\n<h1 id=\"小例子\"><a href=\"#小例子\" class=\"headerlink\" title=\"小例子\"></a>小例子</h1><p>是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球<br>在此之前，我们要了解以下几个要点:</p>\n<ul>\n<li>小球升起时候做减速运动，落下的时候做加速运动</li>\n<li>小球如果从地面开是运动，肯定有一个向上的初速度</li>\n<li>用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度</li>\n</ul>\n<p>好，以下就是成果代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> beginSpeed = <span class=\"number\">20</span>，speed = <span class=\"number\">20</span>，a = <span class=\"number\">0.5</span>;<span class=\"comment\">// 设置好小球的初始速度，现速度和加速度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> beginHeight = getComputedStyle(ball)[<span class=\"string\">'top'</span>]</span><br><span class=\"line\">ball.style.top = beginHeight; <span class=\"comment\">//设置好小球的初始值</span></span><br><span class=\"line\">requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tball.style.top = (<span class=\"built_in\">parseFloat</span>(ball.style.top) - speed) +<span class=\"string\">'px'</span>;</span><br><span class=\"line\">\tspeed = speed - a;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">parseFloat</span>(ball.style.top) &gt;= <span class=\"number\">500</span>) &#123; <span class=\"comment\">//小球回落地面的时候，重置高度和速度</span></span><br><span class=\"line\">\t\tball.style.top = beginHeight;</span><br><span class=\"line\">\t\tspeed = beginSpeed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trequestAnimationFrame(<span class=\"built_in\">arguments</span>.callee)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/PGXWPw\" target=\"_blank\" rel=\"noopener\">点击这里预览效果</a></p>\n","site":{"data":{}},"excerpt":"<p>让我们写点能动的东西吧!<br>","more":"<br>今天让我们写点有趣的东西，用js实现动画</p>\n<h1 id=\"动画的定义\"><a href=\"#动画的定义\" class=\"headerlink\" title=\"动画的定义\"></a>动画的定义</h1><p>在维基百科里面，动画是这样定义的:</p>\n<blockquote>\n<p>动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。</p>\n</blockquote>\n<p>也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画<br><img src=\"/images/requestAnimationFrame/Animexample1.gif\" alt=\"每秒10帧的动画\">图1<br><img src=\"/images/requestAnimationFrame/Animexample2.gif\" alt=\"每秒2帧的动画\">图2</p>\n<p>可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果<br>根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms</p>\n<h1 id=\"使用setTimeout实现动画\"><a href=\"#使用setTimeout实现动画\" class=\"headerlink\" title=\"使用setTimeout实现动画\"></a>使用setTimeout实现动画</h1><p>在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something here</span></span><br><span class=\"line\">\tsetTimeout(<span class=\"built_in\">arguments</span>.callee)</span><br><span class=\"line\">&#125;，<span class=\"number\">1000</span>/<span class=\"number\">60</span>)</span><br></pre></td></tr></table></figure>\n<p>这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿<br>(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)</p>\n<h1 id=\"使用requestAnimationFrame来实现动画\"><a href=\"#使用requestAnimationFrame来实现动画\" class=\"headerlink\" title=\"使用requestAnimationFrame来实现动画\"></a>使用requestAnimationFrame来实现动画</h1><p>在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画<br>现在我们就用他来实现一个简单的让小球运动的动画:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">ball.style.left = getComputedStyle(ball)[<span class=\"string\">'left'</span>]; <span class=\"comment\">//设置好小球的初始值</span></span><br><span class=\"line\">requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tball.style.left = (<span class=\"built_in\">parseFloat</span>(ball.style.left) + <span class=\"number\">5</span>) +<span class=\"string\">'px'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">parseFloat</span>(ball.style.left) &lt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">\t\trequestAnimationFrame(<span class=\"built_in\">arguments</span>.callee)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/bwOBPV\" target=\"_blank\" rel=\"noopener\">点击这里预览效果</a></p>\n<h1 id=\"小例子\"><a href=\"#小例子\" class=\"headerlink\" title=\"小例子\"></a>小例子</h1><p>是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球<br>在此之前，我们要了解以下几个要点:</p>\n<ul>\n<li>小球升起时候做减速运动，落下的时候做加速运动</li>\n<li>小球如果从地面开是运动，肯定有一个向上的初速度</li>\n<li>用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度</li>\n</ul>\n<p>好，以下就是成果代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ball = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> beginSpeed = <span class=\"number\">20</span>，speed = <span class=\"number\">20</span>，a = <span class=\"number\">0.5</span>;<span class=\"comment\">// 设置好小球的初始速度，现速度和加速度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> beginHeight = getComputedStyle(ball)[<span class=\"string\">'top'</span>]</span><br><span class=\"line\">ball.style.top = beginHeight; <span class=\"comment\">//设置好小球的初始值</span></span><br><span class=\"line\">requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tball.style.top = (<span class=\"built_in\">parseFloat</span>(ball.style.top) - speed) +<span class=\"string\">'px'</span>;</span><br><span class=\"line\">\tspeed = speed - a;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">parseFloat</span>(ball.style.top) &gt;= <span class=\"number\">500</span>) &#123; <span class=\"comment\">//小球回落地面的时候，重置高度和速度</span></span><br><span class=\"line\">\t\tball.style.top = beginHeight;</span><br><span class=\"line\">\t\tspeed = beginSpeed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trequestAnimationFrame(<span class=\"built_in\">arguments</span>.callee)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/PGXWPw\" target=\"_blank\" rel=\"noopener\">点击这里预览效果</a></p>"},{"title":"微信小程序的知识补充和答疑","date":"2019-04-17T01:04:47.000Z","_content":"通过9节课培训的结果，了解到了部分同学还存在某些小程序相关的疑问，在这里补充一下相关的知识，以及答疑。\n<!-- more -->\n# 布局问题\n在这里我们主要讨论行内元素、块级元素、以及行内块级元素，元素的浮动在小程序里面会有怪异的表现，这里就不讨论了\n\n行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列。\n块级元素各占据一行（默认宽度是它本身父容器的100%（和父元素的宽度一致），与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行。\n行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。\n而行内块级元素即可以设置宽高的特性，同时又具有 inline 元素默认不换行的特性\n```html\n<text class='ha'>行内元素a</text>\n<text class='hb'>行内元素设置了宽高b</text>\n<view class='ka'>块级元素a</view>\n<view class='kb'>块级元素设置了宽高b</view><view class='oa'>行内块级元素a</view><view class='ob'>行内块级元素b</view>\n```\n```css\n.ha{\n  color: red;\n}\n.hb{\n  width: 200rpx;\n  height: 200rpx;\n}\n.ka{\n  background: red;\n}\n.kb{\n  width: 200rpx;\n  height: 200rpx;\n  background: blue;\n}\n.oa{\n  display: inline-block;\n  width: 200rpx;\n  height: 200rpx;\n  background: red;\n}\n.ob{\n  display: inline-block;\n  width: 400rpx;\n  height: 400rpx;\n  background: blue;\n}\n.ka,.kb,.oa,.ob{\n  color: white;\n  vertical-align: top;\n}\n```\n![微信小程序](/images/weixinxiaochenxu/block.png)\n\n在上一节课，有同学问我，有时候设计图，想让一个元素居右，要怎么写，虽然小程序里面float不好用，但是想实现的方法还是有很多的，先结合本篇文章说一个方法\n第一种方法，通过填充的方式使元素居右\n```html\n<view class='a'></view>\n<view class='b'></view>\n```\n```css\n.a{\n  width: 60%;\n  height: 50rpx;\n  background: red;\n  display: inline-block;\n}\n.b{\n  width: 40%;\n  height: 50rpx;\n  background: blue;\n  display: inline-block;\n}\n```\n第二种，巧用行内元素的text-align属性\n```html\n<view class='a'>\n  <view class='b'></view>\n</view>\n```\n```css\n.a{\n  text-align: right;\n}\n.b{\n  width: 50rpx;\n  height: 50rpx;\n  background: blue;\n  display: inline-block;\n}\n```\n第三种方法，就是使用flex布局实现，具体知识可以看我以前的文章[flex布局](http://www.jackfred.cn/2019/01/22/flex-mobile/)\n```html\n<view class='a'>\n  <view class='b'></view>\n</view>\n```\n```css\n.a{\n  display: flex;\n  justify-content: flex-end;\n}\n.b{\n  width: 50rpx;\n  height: 50rpx;\n  background: blue;\n}\n```\n# this指向问题\n在小程序中，全局环境下，this指向的是undefined（与js不同）\n当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。\n```javascript\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。\n```javascript\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// 第一个参数是作为‘this’使用的对象\n// 后续参数作为参数传递给函数调用\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n```\n想了解更多关于this的知识，可以看看我以前的文章：[js的继承](http://www.jackfred.cn/2016/10/26/js%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8C%E6%84%8F%E4%B9%89/)\n# wxs用法\n这是对于小程序方面知识介绍的最后一点补充\nwxs是在小程序中一个比较鸡肋的功能（个人见解），其作用就是可以让你在wxml文件中插入js脚本，js脚本需要统一的通过module.exports来输出一个对象或者值。在后面的代码中则可以调用它。\n```html\n<wxs module=\"test\">\nmodule.exports = {\n    test:function(a){\n        return a + ' test';\n    }\n}\n</wxs>\n<view>{{test.test(data)}}</view>\n```\n这个功能不能从上下文中获取页面的数据，只能内部自定义一些数据，使用上和声明一个函数没什么区别，而且插在wxml文件中还会增加代码的混乱度，所以我觉得是个比较鸡肋的功能，但是在微信小程序官方文档里，它依旧给了不少的篇幅介绍，所以我在这里补充一下。","source":"_posts/wechat-css.md","raw":"---\ntitle: 微信小程序的知识补充和答疑\ndate: 2019-04-17 09:04:47\ncategories: [博客]\ntags: [微信小程序]\n---\n通过9节课培训的结果，了解到了部分同学还存在某些小程序相关的疑问，在这里补充一下相关的知识，以及答疑。\n<!-- more -->\n# 布局问题\n在这里我们主要讨论行内元素、块级元素、以及行内块级元素，元素的浮动在小程序里面会有怪异的表现，这里就不讨论了\n\n行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列。\n块级元素各占据一行（默认宽度是它本身父容器的100%（和父元素的宽度一致），与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行。\n行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。\n而行内块级元素即可以设置宽高的特性，同时又具有 inline 元素默认不换行的特性\n```html\n<text class='ha'>行内元素a</text>\n<text class='hb'>行内元素设置了宽高b</text>\n<view class='ka'>块级元素a</view>\n<view class='kb'>块级元素设置了宽高b</view><view class='oa'>行内块级元素a</view><view class='ob'>行内块级元素b</view>\n```\n```css\n.ha{\n  color: red;\n}\n.hb{\n  width: 200rpx;\n  height: 200rpx;\n}\n.ka{\n  background: red;\n}\n.kb{\n  width: 200rpx;\n  height: 200rpx;\n  background: blue;\n}\n.oa{\n  display: inline-block;\n  width: 200rpx;\n  height: 200rpx;\n  background: red;\n}\n.ob{\n  display: inline-block;\n  width: 400rpx;\n  height: 400rpx;\n  background: blue;\n}\n.ka,.kb,.oa,.ob{\n  color: white;\n  vertical-align: top;\n}\n```\n![微信小程序](/images/weixinxiaochenxu/block.png)\n\n在上一节课，有同学问我，有时候设计图，想让一个元素居右，要怎么写，虽然小程序里面float不好用，但是想实现的方法还是有很多的，先结合本篇文章说一个方法\n第一种方法，通过填充的方式使元素居右\n```html\n<view class='a'></view>\n<view class='b'></view>\n```\n```css\n.a{\n  width: 60%;\n  height: 50rpx;\n  background: red;\n  display: inline-block;\n}\n.b{\n  width: 40%;\n  height: 50rpx;\n  background: blue;\n  display: inline-block;\n}\n```\n第二种，巧用行内元素的text-align属性\n```html\n<view class='a'>\n  <view class='b'></view>\n</view>\n```\n```css\n.a{\n  text-align: right;\n}\n.b{\n  width: 50rpx;\n  height: 50rpx;\n  background: blue;\n  display: inline-block;\n}\n```\n第三种方法，就是使用flex布局实现，具体知识可以看我以前的文章[flex布局](http://www.jackfred.cn/2019/01/22/flex-mobile/)\n```html\n<view class='a'>\n  <view class='b'></view>\n</view>\n```\n```css\n.a{\n  display: flex;\n  justify-content: flex-end;\n}\n.b{\n  width: 50rpx;\n  height: 50rpx;\n  background: blue;\n}\n```\n# this指向问题\n在小程序中，全局环境下，this指向的是undefined（与js不同）\n当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。\n```javascript\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。\n```javascript\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// 第一个参数是作为‘this’使用的对象\n// 后续参数作为参数传递给函数调用\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n```\n想了解更多关于this的知识，可以看看我以前的文章：[js的继承](http://www.jackfred.cn/2016/10/26/js%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8C%E6%84%8F%E4%B9%89/)\n# wxs用法\n这是对于小程序方面知识介绍的最后一点补充\nwxs是在小程序中一个比较鸡肋的功能（个人见解），其作用就是可以让你在wxml文件中插入js脚本，js脚本需要统一的通过module.exports来输出一个对象或者值。在后面的代码中则可以调用它。\n```html\n<wxs module=\"test\">\nmodule.exports = {\n    test:function(a){\n        return a + ' test';\n    }\n}\n</wxs>\n<view>{{test.test(data)}}</view>\n```\n这个功能不能从上下文中获取页面的数据，只能内部自定义一些数据，使用上和声明一个函数没什么区别，而且插在wxml文件中还会增加代码的混乱度，所以我觉得是个比较鸡肋的功能，但是在微信小程序官方文档里，它依旧给了不少的篇幅介绍，所以我在这里补充一下。","slug":"wechat-css","published":1,"updated":"2019-04-17T06:15:06.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9u000wwsawtuef5ugm","content":"<p>通过9节课培训的结果，了解到了部分同学还存在某些小程序相关的疑问，在这里补充一下相关的知识，以及答疑。<br><a id=\"more\"></a></p>\n<h1 id=\"布局问题\"><a href=\"#布局问题\" class=\"headerlink\" title=\"布局问题\"></a>布局问题</h1><p>在这里我们主要讨论行内元素、块级元素、以及行内块级元素，元素的浮动在小程序里面会有怪异的表现，这里就不讨论了</p>\n<p>行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列。<br>块级元素各占据一行（默认宽度是它本身父容器的100%（和父元素的宽度一致），与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行。<br>行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。<br>而行内块级元素即可以设置宽高的特性，同时又具有 inline 元素默认不换行的特性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'ha'</span>&gt;</span>行内元素a<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'hb'</span>&gt;</span>行内元素设置了宽高b<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'ka'</span>&gt;</span>块级元素a<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'kb'</span>&gt;</span>块级元素设置了宽高b<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'oa'</span>&gt;</span>行内块级元素a<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'ob'</span>&gt;</span>行内块级元素b<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ha</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.hb</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ka</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.kb</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.oa</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ob</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ka</span>,<span class=\"selector-class\">.kb</span>,<span class=\"selector-class\">.oa</span>,<span class=\"selector-class\">.ob</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/weixinxiaochenxu/block.png\" alt=\"微信小程序\"></p>\n<p>在上一节课，有同学问我，有时候设计图，想让一个元素居右，要怎么写，虽然小程序里面float不好用，但是想实现的方法还是有很多的，先结合本篇文章说一个方法<br>第一种方法，通过填充的方式使元素居右<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'a'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'b'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.b</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种，巧用行内元素的text-align属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'a'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'b'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.b</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三种方法，就是使用flex布局实现，具体知识可以看我以前的文章<a href=\"http://www.jackfred.cn/2019/01/22/flex-mobile/\">flex布局</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'a'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'b'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-end;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.b</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"this指向问题\"><a href=\"#this指向问题\" class=\"headerlink\" title=\"this指向问题\"></a>this指向问题</h1><p>在小程序中，全局环境下，this指向的是undefined（与js不同）<br>当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  prop: <span class=\"number\">37</span>,</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// logs 37</span></span><br></pre></td></tr></table></figure></p>\n<p>当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">c, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b + c + d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数是作为‘this’使用的对象</span></span><br><span class=\"line\"><span class=\"comment\">// 后续参数作为参数传递给函数调用</span></span><br><span class=\"line\">add.call(o, <span class=\"number\">5</span>, <span class=\"number\">7</span>); <span class=\"comment\">// 1 + 3 + 5 + 7 = 16</span></span><br></pre></td></tr></table></figure></p>\n<p>想了解更多关于this的知识，可以看看我以前的文章：<a href=\"http://www.jackfred.cn/2016/10/26/js%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8C%E6%84%8F%E4%B9%89/\">js的继承</a></p>\n<h1 id=\"wxs用法\"><a href=\"#wxs用法\" class=\"headerlink\" title=\"wxs用法\"></a>wxs用法</h1><p>这是对于小程序方面知识介绍的最后一点补充<br>wxs是在小程序中一个比较鸡肋的功能（个人见解），其作用就是可以让你在wxml文件中插入js脚本，js脚本需要统一的通过module.exports来输出一个对象或者值。在后面的代码中则可以调用它。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">wxs</span> <span class=\"attr\">module</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    test:function(a)&#123;</span><br><span class=\"line\">        return a + ' test';</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">wxs</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;test.test(data)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这个功能不能从上下文中获取页面的数据，只能内部自定义一些数据，使用上和声明一个函数没什么区别，而且插在wxml文件中还会增加代码的混乱度，所以我觉得是个比较鸡肋的功能，但是在微信小程序官方文档里，它依旧给了不少的篇幅介绍，所以我在这里补充一下。</p>\n","site":{"data":{}},"excerpt":"<p>通过9节课培训的结果，了解到了部分同学还存在某些小程序相关的疑问，在这里补充一下相关的知识，以及答疑。<br>","more":"</p>\n<h1 id=\"布局问题\"><a href=\"#布局问题\" class=\"headerlink\" title=\"布局问题\"></a>布局问题</h1><p>在这里我们主要讨论行内元素、块级元素、以及行内块级元素，元素的浮动在小程序里面会有怪异的表现，这里就不讨论了</p>\n<p>行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列。<br>块级元素各占据一行（默认宽度是它本身父容器的100%（和父元素的宽度一致），与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行。<br>行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。<br>而行内块级元素即可以设置宽高的特性，同时又具有 inline 元素默认不换行的特性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'ha'</span>&gt;</span>行内元素a<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'hb'</span>&gt;</span>行内元素设置了宽高b<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'ka'</span>&gt;</span>块级元素a<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'kb'</span>&gt;</span>块级元素设置了宽高b<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'oa'</span>&gt;</span>行内块级元素a<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'ob'</span>&gt;</span>行内块级元素b<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ha</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.hb</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ka</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.kb</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.oa</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ob</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ka</span>,<span class=\"selector-class\">.kb</span>,<span class=\"selector-class\">.oa</span>,<span class=\"selector-class\">.ob</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/weixinxiaochenxu/block.png\" alt=\"微信小程序\"></p>\n<p>在上一节课，有同学问我，有时候设计图，想让一个元素居右，要怎么写，虽然小程序里面float不好用，但是想实现的方法还是有很多的，先结合本篇文章说一个方法<br>第一种方法，通过填充的方式使元素居右<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'a'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'b'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.b</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种，巧用行内元素的text-align属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'a'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'b'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.b</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第三种方法，就是使用flex布局实现，具体知识可以看我以前的文章<a href=\"http://www.jackfred.cn/2019/01/22/flex-mobile/\">flex布局</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'a'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'b'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-end;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.b</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"this指向问题\"><a href=\"#this指向问题\" class=\"headerlink\" title=\"this指向问题\"></a>this指向问题</h1><p>在小程序中，全局环境下，this指向的是undefined（与js不同）<br>当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  prop: <span class=\"number\">37</span>,</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.f()); <span class=\"comment\">// logs 37</span></span><br></pre></td></tr></table></figure></p>\n<p>当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">c, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a + <span class=\"keyword\">this</span>.b + c + d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数是作为‘this’使用的对象</span></span><br><span class=\"line\"><span class=\"comment\">// 后续参数作为参数传递给函数调用</span></span><br><span class=\"line\">add.call(o, <span class=\"number\">5</span>, <span class=\"number\">7</span>); <span class=\"comment\">// 1 + 3 + 5 + 7 = 16</span></span><br></pre></td></tr></table></figure></p>\n<p>想了解更多关于this的知识，可以看看我以前的文章：<a href=\"http://www.jackfred.cn/2016/10/26/js%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%E5%92%8C%E6%84%8F%E4%B9%89/\">js的继承</a></p>\n<h1 id=\"wxs用法\"><a href=\"#wxs用法\" class=\"headerlink\" title=\"wxs用法\"></a>wxs用法</h1><p>这是对于小程序方面知识介绍的最后一点补充<br>wxs是在小程序中一个比较鸡肋的功能（个人见解），其作用就是可以让你在wxml文件中插入js脚本，js脚本需要统一的通过module.exports来输出一个对象或者值。在后面的代码中则可以调用它。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">wxs</span> <span class=\"attr\">module</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    test:function(a)&#123;</span><br><span class=\"line\">        return a + ' test';</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">wxs</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;test.test(data)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这个功能不能从上下文中获取页面的数据，只能内部自定义一些数据，使用上和声明一个函数没什么区别，而且插在wxml文件中还会增加代码的混乱度，所以我觉得是个比较鸡肋的功能，但是在微信小程序官方文档里，它依旧给了不少的篇幅介绍，所以我在这里补充一下。</p>"},{"title":"react分享与入门","date":"2017-03-24T01:50:08.000Z","_content":"视频投稿在了b站，一共分了3p，有错误和遗漏欢迎大家弹幕指出\n<!-- more -->\n{% cq %}\n{% raw %}\n<embed height=\"415\" width=\"544\" quality=\"high\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" src=\"//static.hdslb.com/miniloader.swf\" flashvars=\"aid=9352249&page=1\" pluginspage=\"//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\"></embed>\n{% endraw%}\n{% endcq %}","source":"_posts/react-share.md","raw":"---\ntitle: react分享与入门\ndate: 2017-03-24 09:50:08\ncategories: [博客]\ntags: [react]\n---\n视频投稿在了b站，一共分了3p，有错误和遗漏欢迎大家弹幕指出\n<!-- more -->\n{% cq %}\n{% raw %}\n<embed height=\"415\" width=\"544\" quality=\"high\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" src=\"//static.hdslb.com/miniloader.swf\" flashvars=\"aid=9352249&page=1\" pluginspage=\"//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\"></embed>\n{% endraw%}\n{% endcq %}","slug":"react-share","published":1,"updated":"2017-04-24T02:03:15.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9w000zwsawup8u57xy","content":"<p>视频投稿在了b站，一共分了3p，有错误和遗漏欢迎大家弹幕指出<br><a id=\"more\"></a><br><blockquote class=\"blockquote-center\"><embed height=\"415\" width=\"544\" quality=\"high\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" src=\"//static.hdslb.com/miniloader.swf\" flashvars=\"aid=9352249&page=1\" pluginspage=\"//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\">\n</blockquote></p>\n","site":{"data":{}},"excerpt":"<p>视频投稿在了b站，一共分了3p，有错误和遗漏欢迎大家弹幕指出<br>","more":"<br><blockquote class=\"blockquote-center\"><embed height=\"415\" width=\"544\" quality=\"high\" allowfullscreen=\"true\" type=\"application/x-shockwave-flash\" src=\"//static.hdslb.com/miniloader.swf\" flashvars=\"aid=9352249&page=1\" pluginspage=\"//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\">\n</blockquote></p>"},{"title":"用脚本锁住百度云下载加速倒计时,从而实现无限加速","date":"2017-01-06T01:03:36.000Z","_content":"百度云本来是会员可以加速，后来要超级会员才能加速，有点烦，最近手头又有一个大文件要下载，限速真心不爽，所以做了个小工具，现在简单说说原理。\n<!-- more -->\n# 作用\n如题，锁住百度云下载倒计时，实现无限时间加速\n# 下载地址\n[点击这里下载](https://git.oschina.net/zk-/test/raw/master/LockTime.EXE)\n# 用法\n- 运行百度云\n- 打开小程序\n- 下载文件，出现免费加速时，点击免费加速，然后按F2，即可锁住时间\n\n# 平台\n在我的win10 32位小本子上测试正常，其他平台没有机子做测试，有问题的同学可以评论告诉我\n百度云版本为当前时间最新版本5.5.2，是否兼容老版本以及未来的新版本主要看百度云改不改逻辑了\n# 原理\n原理很简单，百度云没有在服务器端对免费云加速时间做校验，所以本地修改逻辑就可以了\n# 思路\n有两种方法可以实现\n一种是找到控制时间变量的基址以及算出偏移量，把数值改大即可，但是考虑到如果百度云更新版本的话基址可能就会变掉，这样就失效了，所以不采用\n还有一种是找到对时间变量做写操作的地址，注入脚本改写操作，让时间不减少就可以了，考虑到百度云近期不会对这一块有改动，如果做成工具，可以兼容多个版本\n在小工具的使用体验上\n一种是我直接把改好的小程序导出出来，做成一个修改版的百度云\n还有一种是写成一个小工具，在用户需要时候使用\n因为第一个是破坏式的方法，而第二个给了用户的选择权，使用完重启百度云，就会恢复正常，不影响其他使用，还可以兼容部分版本百度云，所以综合考虑用了第二个方案","source":"_posts/用脚本锁住百度云下载加速倒计时-从而实现无限加速.md","raw":"---\ntitle: '用脚本锁住百度云下载加速倒计时,从而实现无限加速'\ndate: 2017-01-06 09:03:36\ncategories: [工具]\ntags: [百度云,汇编]\n---\n百度云本来是会员可以加速，后来要超级会员才能加速，有点烦，最近手头又有一个大文件要下载，限速真心不爽，所以做了个小工具，现在简单说说原理。\n<!-- more -->\n# 作用\n如题，锁住百度云下载倒计时，实现无限时间加速\n# 下载地址\n[点击这里下载](https://git.oschina.net/zk-/test/raw/master/LockTime.EXE)\n# 用法\n- 运行百度云\n- 打开小程序\n- 下载文件，出现免费加速时，点击免费加速，然后按F2，即可锁住时间\n\n# 平台\n在我的win10 32位小本子上测试正常，其他平台没有机子做测试，有问题的同学可以评论告诉我\n百度云版本为当前时间最新版本5.5.2，是否兼容老版本以及未来的新版本主要看百度云改不改逻辑了\n# 原理\n原理很简单，百度云没有在服务器端对免费云加速时间做校验，所以本地修改逻辑就可以了\n# 思路\n有两种方法可以实现\n一种是找到控制时间变量的基址以及算出偏移量，把数值改大即可，但是考虑到如果百度云更新版本的话基址可能就会变掉，这样就失效了，所以不采用\n还有一种是找到对时间变量做写操作的地址，注入脚本改写操作，让时间不减少就可以了，考虑到百度云近期不会对这一块有改动，如果做成工具，可以兼容多个版本\n在小工具的使用体验上\n一种是我直接把改好的小程序导出出来，做成一个修改版的百度云\n还有一种是写成一个小工具，在用户需要时候使用\n因为第一个是破坏式的方法，而第二个给了用户的选择权，使用完重启百度云，就会恢复正常，不影响其他使用，还可以兼容部分版本百度云，所以综合考虑用了第二个方案","slug":"用脚本锁住百度云下载加速倒计时-从而实现无限加速","published":1,"updated":"2017-01-06T01:28:04.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktot9y0011wsawfzg6gdjc","content":"<p>百度云本来是会员可以加速，后来要超级会员才能加速，有点烦，最近手头又有一个大文件要下载，限速真心不爽，所以做了个小工具，现在简单说说原理。<br><a id=\"more\"></a></p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>如题，锁住百度云下载倒计时，实现无限时间加速</p>\n<h1 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h1><p><a href=\"https://git.oschina.net/zk-/test/raw/master/LockTime.EXE\" target=\"_blank\" rel=\"noopener\">点击这里下载</a></p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><ul>\n<li>运行百度云</li>\n<li>打开小程序</li>\n<li>下载文件，出现免费加速时，点击免费加速，然后按F2，即可锁住时间</li>\n</ul>\n<h1 id=\"平台\"><a href=\"#平台\" class=\"headerlink\" title=\"平台\"></a>平台</h1><p>在我的win10 32位小本子上测试正常，其他平台没有机子做测试，有问题的同学可以评论告诉我<br>百度云版本为当前时间最新版本5.5.2，是否兼容老版本以及未来的新版本主要看百度云改不改逻辑了</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>原理很简单，百度云没有在服务器端对免费云加速时间做校验，所以本地修改逻辑就可以了</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>有两种方法可以实现<br>一种是找到控制时间变量的基址以及算出偏移量，把数值改大即可，但是考虑到如果百度云更新版本的话基址可能就会变掉，这样就失效了，所以不采用<br>还有一种是找到对时间变量做写操作的地址，注入脚本改写操作，让时间不减少就可以了，考虑到百度云近期不会对这一块有改动，如果做成工具，可以兼容多个版本<br>在小工具的使用体验上<br>一种是我直接把改好的小程序导出出来，做成一个修改版的百度云<br>还有一种是写成一个小工具，在用户需要时候使用<br>因为第一个是破坏式的方法，而第二个给了用户的选择权，使用完重启百度云，就会恢复正常，不影响其他使用，还可以兼容部分版本百度云，所以综合考虑用了第二个方案</p>\n","site":{"data":{}},"excerpt":"<p>百度云本来是会员可以加速，后来要超级会员才能加速，有点烦，最近手头又有一个大文件要下载，限速真心不爽，所以做了个小工具，现在简单说说原理。<br>","more":"</p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>如题，锁住百度云下载倒计时，实现无限时间加速</p>\n<h1 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h1><p><a href=\"https://git.oschina.net/zk-/test/raw/master/LockTime.EXE\" target=\"_blank\" rel=\"noopener\">点击这里下载</a></p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><ul>\n<li>运行百度云</li>\n<li>打开小程序</li>\n<li>下载文件，出现免费加速时，点击免费加速，然后按F2，即可锁住时间</li>\n</ul>\n<h1 id=\"平台\"><a href=\"#平台\" class=\"headerlink\" title=\"平台\"></a>平台</h1><p>在我的win10 32位小本子上测试正常，其他平台没有机子做测试，有问题的同学可以评论告诉我<br>百度云版本为当前时间最新版本5.5.2，是否兼容老版本以及未来的新版本主要看百度云改不改逻辑了</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>原理很简单，百度云没有在服务器端对免费云加速时间做校验，所以本地修改逻辑就可以了</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>有两种方法可以实现<br>一种是找到控制时间变量的基址以及算出偏移量，把数值改大即可，但是考虑到如果百度云更新版本的话基址可能就会变掉，这样就失效了，所以不采用<br>还有一种是找到对时间变量做写操作的地址，注入脚本改写操作，让时间不减少就可以了，考虑到百度云近期不会对这一块有改动，如果做成工具，可以兼容多个版本<br>在小工具的使用体验上<br>一种是我直接把改好的小程序导出出来，做成一个修改版的百度云<br>还有一种是写成一个小工具，在用户需要时候使用<br>因为第一个是破坏式的方法，而第二个给了用户的选择权，使用完重启百度云，就会恢复正常，不影响其他使用，还可以兼容部分版本百度云，所以综合考虑用了第二个方案</p>"},{"title":"函数式编程:用自带的js原型链方法解决问题","date":"2016-10-23T04:28:21.000Z","_content":"\n凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！\n<!-- more -->\n其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。\n当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。\n# 前提\n本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。\n# 数组\n在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。\n## Array.prototype.every()\n这个方法是用来测试数组的所有元素是否都通过了指定函数的测试\n> every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。\n> callback 被调用时传入三个参数：元素值，元素的索引，原数组。\n\n举个例子\n\n```javascript\n// 检测数组中是否全都小于100的数字\nvar flag = [1，32，55，67，98，101，33，44，43].every(function(item， index， array){\n\treturn item <= 100\n})\nconsole.log(flag) //结果为false，101大于100\n```\n\n通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用\n我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现\n\n```javascript\nvar allCheckBoxDom = document.getElementsByClassName('quanxuan')[0] //获取全选复选框\nvar childrenCheckBoxDoms = document.getElementsByClassName('zixuanze') //获取子选择框组，这是一个类数组\nvar flag = [].every.call(childrenCheckBoxDoms， function(item， index， array) {\n\titem.checked === true\n})\nif(flag){\n\tallCheckBoxDom.checked = true;\n}else{\n\tallCheckBoxDom.checked = false;\n}\n```\n\n这样就方便的实现了这个功能\n> 对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了\n## Array.prototype.map()\n这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。\n举个例子\n我们通过ajax获取到的一组数据，类似这样的\n```javascript\nvar jobs = [\n\t{name:'zk'，age:22}\n\t{name:'ab'，age:12}\n\t{name:'cd'，age:33}\n\t{name:'pol'，age:5}\n]\n```\n如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做\n```javascript\nvar nameList = jobs.map(function(item， index， array){\n\treturn item.name\n})\n```\n## Array.prototype.reduce()\n这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。\n也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是\npreviousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）\ncurrentValue 数组中当前被处理的元素\nindex 当前元素在数组中的索引\narray 调用 reduce 的数组\n另外reduce还可以接受一个初始值\n举个例子\n```javascript\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n})\n```\n其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值\n```javascript\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n}，5)\n```\n这样子结果就是15\n# Math\nMath是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。\n## Math.max\n看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值\n```javascript\nconsole.log(Math.max(1，2，4，5，6，7)) //输出7\n```\n但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）\n```javascript\nvar array = [44，12，42，11，87，33，49，3，487，111]\nvar maxNum = Math.max.call(Math， array)\nconsole.log(maxNum) //输出487\n```\n## Math.min\n和Math.max用法相同，不再赘述\n\n# 结语\n函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。","source":"_posts/函数式编程-用自带的js原型链方法解决问题.md","raw":"---\ntitle: '函数式编程:用自带的js原型链方法解决问题'\ndate: 2016-10-23 12:28:21\ncategories: [博客]\ntags: [数组,Math,函数式编程,原型链]\n---\n\n凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！\n<!-- more -->\n其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。\n当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。\n# 前提\n本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。\n# 数组\n在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。\n## Array.prototype.every()\n这个方法是用来测试数组的所有元素是否都通过了指定函数的测试\n> every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。\n> callback 被调用时传入三个参数：元素值，元素的索引，原数组。\n\n举个例子\n\n```javascript\n// 检测数组中是否全都小于100的数字\nvar flag = [1，32，55，67，98，101，33，44，43].every(function(item， index， array){\n\treturn item <= 100\n})\nconsole.log(flag) //结果为false，101大于100\n```\n\n通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用\n我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现\n\n```javascript\nvar allCheckBoxDom = document.getElementsByClassName('quanxuan')[0] //获取全选复选框\nvar childrenCheckBoxDoms = document.getElementsByClassName('zixuanze') //获取子选择框组，这是一个类数组\nvar flag = [].every.call(childrenCheckBoxDoms， function(item， index， array) {\n\titem.checked === true\n})\nif(flag){\n\tallCheckBoxDom.checked = true;\n}else{\n\tallCheckBoxDom.checked = false;\n}\n```\n\n这样就方便的实现了这个功能\n> 对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了\n## Array.prototype.map()\n这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。\n举个例子\n我们通过ajax获取到的一组数据，类似这样的\n```javascript\nvar jobs = [\n\t{name:'zk'，age:22}\n\t{name:'ab'，age:12}\n\t{name:'cd'，age:33}\n\t{name:'pol'，age:5}\n]\n```\n如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做\n```javascript\nvar nameList = jobs.map(function(item， index， array){\n\treturn item.name\n})\n```\n## Array.prototype.reduce()\n这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。\n也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是\npreviousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）\ncurrentValue 数组中当前被处理的元素\nindex 当前元素在数组中的索引\narray 调用 reduce 的数组\n另外reduce还可以接受一个初始值\n举个例子\n```javascript\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n})\n```\n其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值\n```javascript\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n}，5)\n```\n这样子结果就是15\n# Math\nMath是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。\n## Math.max\n看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值\n```javascript\nconsole.log(Math.max(1，2，4，5，6，7)) //输出7\n```\n但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）\n```javascript\nvar array = [44，12，42，11，87，33，49，3，487，111]\nvar maxNum = Math.max.call(Math， array)\nconsole.log(maxNum) //输出487\n```\n## Math.min\n和Math.max用法相同，不再赘述\n\n# 结语\n函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。","slug":"函数式编程-用自带的js原型链方法解决问题","published":1,"updated":"2017-06-27T00:57:59.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktota00014wsawyfuz59xo","content":"<p>凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！<br><a id=\"more\"></a><br>其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。<br>当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。</p>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。</p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。</p>\n<h2 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h2><p>这个方法是用来测试数组的所有元素是否都通过了指定函数的测试</p>\n<blockquote>\n<p>every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。<br>callback 被调用时传入三个参数：元素值，元素的索引，原数组。</p>\n</blockquote>\n<p>举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测数组中是否全都小于100的数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = [<span class=\"number\">1</span>，<span class=\"number\">32</span>，<span class=\"number\">55</span>，<span class=\"number\">67</span>，<span class=\"number\">98</span>，<span class=\"number\">101</span>，<span class=\"number\">33</span>，<span class=\"number\">44</span>，<span class=\"number\">43</span>].every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item &lt;= <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag) <span class=\"comment\">//结果为false，101大于100</span></span><br></pre></td></tr></table></figure>\n<p>通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用<br>我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> allCheckBoxDom = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'quanxuan'</span>)[<span class=\"number\">0</span>] <span class=\"comment\">//获取全选复选框</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> childrenCheckBoxDoms = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'zixuanze'</span>) <span class=\"comment\">//获取子选择框组，这是一个类数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = [].every.call(childrenCheckBoxDoms， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item， index， array</span>) </span>&#123;</span><br><span class=\"line\">\titem.checked === <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">\tallCheckBoxDom.checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tallCheckBoxDom.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就方便的实现了这个功能</p>\n<blockquote>\n<p>对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了</p>\n</blockquote>\n<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><p>这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。<br>举个例子<br>我们通过ajax获取到的一组数据，类似这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jobs = [</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'zk'</span>，age:<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'ab'</span>，age:<span class=\"number\">12</span>&#125;</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'cd'</span>，age:<span class=\"number\">33</span>&#125;</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'pol'</span>，age:<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nameList = jobs.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item.name</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Array-prototype-reduce\"><a href=\"#Array-prototype-reduce\" class=\"headerlink\" title=\"Array.prototype.reduce()\"></a>Array.prototype.reduce()</h2><p>这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。<br>也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是<br>previousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>currentValue 数组中当前被处理的元素<br>index 当前元素在数组中的索引<br>array 调用 reduce 的数组<br>另外reduce还可以接受一个初始值<br>举个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue， currentValue， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> previousValue + currentValue</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue， currentValue， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> previousValue + currentValue</span><br><span class=\"line\">&#125;，<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这样子结果就是15</p>\n<h1 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h1><p>Math是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。</p>\n<h2 id=\"Math-max\"><a href=\"#Math-max\" class=\"headerlink\" title=\"Math.max\"></a>Math.max</h2><p>看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>，<span class=\"number\">6</span>，<span class=\"number\">7</span>)) <span class=\"comment\">//输出7</span></span><br></pre></td></tr></table></figure></p>\n<p>但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">44</span>，<span class=\"number\">12</span>，<span class=\"number\">42</span>，<span class=\"number\">11</span>，<span class=\"number\">87</span>，<span class=\"number\">33</span>，<span class=\"number\">49</span>，<span class=\"number\">3</span>，<span class=\"number\">487</span>，<span class=\"number\">111</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>， array)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maxNum) <span class=\"comment\">//输出487</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Math-min\"><a href=\"#Math-min\" class=\"headerlink\" title=\"Math.min\"></a>Math.min</h2><p>和Math.max用法相同，不再赘述</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。</p>\n","site":{"data":{}},"excerpt":"<p>凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！<br>","more":"<br>其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。<br>当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。</p>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。</p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。</p>\n<h2 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h2><p>这个方法是用来测试数组的所有元素是否都通过了指定函数的测试</p>\n<blockquote>\n<p>every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。<br>callback 被调用时传入三个参数：元素值，元素的索引，原数组。</p>\n</blockquote>\n<p>举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测数组中是否全都小于100的数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = [<span class=\"number\">1</span>，<span class=\"number\">32</span>，<span class=\"number\">55</span>，<span class=\"number\">67</span>，<span class=\"number\">98</span>，<span class=\"number\">101</span>，<span class=\"number\">33</span>，<span class=\"number\">44</span>，<span class=\"number\">43</span>].every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item &lt;= <span class=\"number\">100</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag) <span class=\"comment\">//结果为false，101大于100</span></span><br></pre></td></tr></table></figure>\n<p>通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用<br>我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> allCheckBoxDom = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'quanxuan'</span>)[<span class=\"number\">0</span>] <span class=\"comment\">//获取全选复选框</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> childrenCheckBoxDoms = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'zixuanze'</span>) <span class=\"comment\">//获取子选择框组，这是一个类数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flag = [].every.call(childrenCheckBoxDoms， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item， index， array</span>) </span>&#123;</span><br><span class=\"line\">\titem.checked === <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">\tallCheckBoxDom.checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tallCheckBoxDom.checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就方便的实现了这个功能</p>\n<blockquote>\n<p>对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了</p>\n</blockquote>\n<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><p>这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。<br>举个例子<br>我们通过ajax获取到的一组数据，类似这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jobs = [</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'zk'</span>，age:<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'ab'</span>，age:<span class=\"number\">12</span>&#125;</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'cd'</span>，age:<span class=\"number\">33</span>&#125;</span><br><span class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'pol'</span>，age:<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nameList = jobs.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item.name</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Array-prototype-reduce\"><a href=\"#Array-prototype-reduce\" class=\"headerlink\" title=\"Array.prototype.reduce()\"></a>Array.prototype.reduce()</h2><p>这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。<br>也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是<br>previousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>currentValue 数组中当前被处理的元素<br>index 当前元素在数组中的索引<br>array 调用 reduce 的数组<br>另外reduce还可以接受一个初始值<br>举个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue， currentValue， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> previousValue + currentValue</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue， currentValue， index， array</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> previousValue + currentValue</span><br><span class=\"line\">&#125;，<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这样子结果就是15</p>\n<h1 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h1><p>Math是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。</p>\n<h2 id=\"Math-max\"><a href=\"#Math-max\" class=\"headerlink\" title=\"Math.max\"></a>Math.max</h2><p>看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">4</span>，<span class=\"number\">5</span>，<span class=\"number\">6</span>，<span class=\"number\">7</span>)) <span class=\"comment\">//输出7</span></span><br></pre></td></tr></table></figure></p>\n<p>但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">44</span>，<span class=\"number\">12</span>，<span class=\"number\">42</span>，<span class=\"number\">11</span>，<span class=\"number\">87</span>，<span class=\"number\">33</span>，<span class=\"number\">49</span>，<span class=\"number\">3</span>，<span class=\"number\">487</span>，<span class=\"number\">111</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxNum = <span class=\"built_in\">Math</span>.max.call(<span class=\"built_in\">Math</span>， array)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maxNum) <span class=\"comment\">//输出487</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Math-min\"><a href=\"#Math-min\" class=\"headerlink\" title=\"Math.min\"></a>Math.min</h2><p>和Math.max用法相同，不再赘述</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。</p>"},{"title":"第一篇博客是不是要说一句hello world?","date":"2016-10-18T08:11:18.000Z","_content":"\n  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。\n<!-- more -->\n  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。\n# 16/10/20\n  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。\n  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。\n  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。\n  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。\n  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?","source":"_posts/第一篇博客.md","raw":"---\ntitle: 第一篇博客是不是要说一句hello world?\ndate: 2016-10-18 16:11:18\ncategories: [博客]\ntags: [随想]\n---\n\n  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。\n<!-- more -->\n  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。\n# 16/10/20\n  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。\n  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。\n  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。\n  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。\n  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?","slug":"第一篇博客","published":1,"updated":"2016-11-22T09:15:35.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktota10017wsawz59wl9cv","content":"<p>  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。<br><a id=\"more\"></a><br>  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。</p>\n<h1 id=\"16-10-20\"><a href=\"#16-10-20\" class=\"headerlink\" title=\"16/10/20\"></a>16/10/20</h1><p>  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。<br>  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。<br>  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。<br>  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。<br>  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?</p>\n","site":{"data":{}},"excerpt":"<p>  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。<br>","more":"<br>  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。</p>\n<h1 id=\"16-10-20\"><a href=\"#16-10-20\" class=\"headerlink\" title=\"16/10/20\"></a>16/10/20</h1><p>  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。<br>  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。<br>  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。<br>  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。<br>  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?</p>"},{"title":"深入理解微信小程序","date":"2016-11-22T15:00:30.000Z","_content":"一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。\n<!-- more -->\n# 概述\n微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。\n小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。\n下面就开始说一说小程序的基本内容\n# 文档地址\n微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击**[这里](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122)**访问。\n# 目录结构\n首先看一眼一个基础小程序的目录结构\n```\nE:\\TEST\n│  app.js  //入口函数，程序生命周期函数声明的地方\n│  app.json  //全局配置，程序声明获取权限的地方\n│  app.wxss  //全局样式，程序定义公共样式的地方\n│\n├─pages\n│  ├─index\n│  │      index.js\n│  │      index.wxml\n│  │      index.wxss\n│  │\n│  └─logs\n│          logs.js  //逻辑层代码，包含小程序数据和行为\n│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置\n│          logs.wxml  //视图层，小程序页面承载内容的地方\n│          logs.wxss  //小程序页面样式，向上覆盖\n│\n└─utils\n        util.js  //自定义公共函数，文件夹和文件的名字随意\n```\n一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。\n小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。\n**可以看到小程序的文件结构非常的简单，我们学习它也很容易**\n# 权限获取\n权限获取分两个方面，一个是根目录下app.json的权限获取\n```\n属性\t\t\t类型\t\t\t必填\t描述\npages\t\t\tString Array\t\t是\t设置页面路径\nwindow\t\t\tObject\t\t\t否\t设置默认页面的窗口表现\ntabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现\nnetworkTimeout\t\tObject\t\t\t否\t设置网络超时时间\ndebug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式\n```\n其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。\n# 视图层组件\n小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。\n例如&lt;image>必须有对应的&lt;/image>，而且大小写敏感，写成&lt;/Image>是不可以的。\n页面标签我总结了一下从功能上可以分为三类\n第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。\n```\n// pages/test/test.wxml\n<view>{{testData}}</view>  //直接使用在js的data下声明的数据\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  ···省略\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu1.png)\n承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例\n```\n// pages/test/test.wxml\n<view bindtap=\"testtap\">{{testData}}</view>  //绑定testtap函数\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  testtap:function(event){  //点击时执行的函数\n    wx.showToast({\n      title: 'hello world',\n      icon: 'success',\n      duration: 2000\n    })\n  },\n  ···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu2.gif)\n\n第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例\n```\n// pages/test/test.wxml\n<picker bindchange=\"bindPickerChange\" value=\"1\" range=\"{{pickerData}}\">\n    <view class=\"picker\">\n        选择\n    </view>\n</picker>\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!',\n    pickerData:[1,2,3]\n  },\n  bindPickerChange: function(event){\n    console.log('test')\n  }···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu3.gif)\n\n第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。\n```\n// templete/test.wxml\n<template name=\"test\">\n  <text>{{number}}</text>\n</template>\n```\n我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据\n```\n// pages/test/test.wxml\n<import src=\"../templete/test.wxml\"/>\n<template is=\"test\" data=\"{{number: '1'}}\"/>\n<template is=\"test\" data=\"{{number: '2'}}\"/>\n<template is=\"test\" data=\"{{number: '3'}}\"/>\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu4.png)\n__是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方__\n# 逻辑层\n逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。\n每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量\n## 注册程序\n程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。\n```\nApp({\n  onLaunch: function() {\n    // Do something initial when launch.\n  },\n  onShow: function() {\n      // Do something when show.\n  },\n  onHide: function() {\n      // Do something when hide.\n  },\n  globalData: 'I am global data'\n})\n```\n## 注册页面\n页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。\nonLoad为生命周期函数，页面加载是触发\nonReady为生命周期函数，页面初次渲染完成时触发\nonShow为生命周期函数，监听页面显示时触发\nonHide为生命周期函数，监听页面隐藏时触发\nonUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)\nonPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发\nonReachBottom为页面相关事件处理函数，页面上拉触底时触发\n补一张官方给出的页面生命周期图\n![微信小程序](https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122)\n\n# 样式\n样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位\n一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素\n一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。\n在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用__@import \"common.wxss\"__导入其他文件，app.wcss默认给所有页面导入进去。\n\n# 其他\n在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。\n# 总结\n小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。","source":"_posts/深入理解微信小程序.md","raw":"---\ntitle: 深入理解微信小程序\ndate: 2016-11-22 23:00:30\ncategories: [博客]\ntags: [微信小程序]\n---\n一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。\n<!-- more -->\n# 概述\n微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。\n小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。\n下面就开始说一说小程序的基本内容\n# 文档地址\n微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击**[这里](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122)**访问。\n# 目录结构\n首先看一眼一个基础小程序的目录结构\n```\nE:\\TEST\n│  app.js  //入口函数，程序生命周期函数声明的地方\n│  app.json  //全局配置，程序声明获取权限的地方\n│  app.wxss  //全局样式，程序定义公共样式的地方\n│\n├─pages\n│  ├─index\n│  │      index.js\n│  │      index.wxml\n│  │      index.wxss\n│  │\n│  └─logs\n│          logs.js  //逻辑层代码，包含小程序数据和行为\n│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置\n│          logs.wxml  //视图层，小程序页面承载内容的地方\n│          logs.wxss  //小程序页面样式，向上覆盖\n│\n└─utils\n        util.js  //自定义公共函数，文件夹和文件的名字随意\n```\n一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。\n小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。\n**可以看到小程序的文件结构非常的简单，我们学习它也很容易**\n# 权限获取\n权限获取分两个方面，一个是根目录下app.json的权限获取\n```\n属性\t\t\t类型\t\t\t必填\t描述\npages\t\t\tString Array\t\t是\t设置页面路径\nwindow\t\t\tObject\t\t\t否\t设置默认页面的窗口表现\ntabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现\nnetworkTimeout\t\tObject\t\t\t否\t设置网络超时时间\ndebug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式\n```\n其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。\n# 视图层组件\n小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。\n例如&lt;image>必须有对应的&lt;/image>，而且大小写敏感，写成&lt;/Image>是不可以的。\n页面标签我总结了一下从功能上可以分为三类\n第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。\n```\n// pages/test/test.wxml\n<view>{{testData}}</view>  //直接使用在js的data下声明的数据\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  ···省略\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu1.png)\n承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例\n```\n// pages/test/test.wxml\n<view bindtap=\"testtap\">{{testData}}</view>  //绑定testtap函数\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  testtap:function(event){  //点击时执行的函数\n    wx.showToast({\n      title: 'hello world',\n      icon: 'success',\n      duration: 2000\n    })\n  },\n  ···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu2.gif)\n\n第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例\n```\n// pages/test/test.wxml\n<picker bindchange=\"bindPickerChange\" value=\"1\" range=\"{{pickerData}}\">\n    <view class=\"picker\">\n        选择\n    </view>\n</picker>\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!',\n    pickerData:[1,2,3]\n  },\n  bindPickerChange: function(event){\n    console.log('test')\n  }···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu3.gif)\n\n第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。\n```\n// templete/test.wxml\n<template name=\"test\">\n  <text>{{number}}</text>\n</template>\n```\n我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据\n```\n// pages/test/test.wxml\n<import src=\"../templete/test.wxml\"/>\n<template is=\"test\" data=\"{{number: '1'}}\"/>\n<template is=\"test\" data=\"{{number: '2'}}\"/>\n<template is=\"test\" data=\"{{number: '3'}}\"/>\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu4.png)\n__是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方__\n# 逻辑层\n逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。\n每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量\n## 注册程序\n程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。\n```\nApp({\n  onLaunch: function() {\n    // Do something initial when launch.\n  },\n  onShow: function() {\n      // Do something when show.\n  },\n  onHide: function() {\n      // Do something when hide.\n  },\n  globalData: 'I am global data'\n})\n```\n## 注册页面\n页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。\nonLoad为生命周期函数，页面加载是触发\nonReady为生命周期函数，页面初次渲染完成时触发\nonShow为生命周期函数，监听页面显示时触发\nonHide为生命周期函数，监听页面隐藏时触发\nonUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)\nonPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发\nonReachBottom为页面相关事件处理函数，页面上拉触底时触发\n补一张官方给出的页面生命周期图\n![微信小程序](https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122)\n\n# 样式\n样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位\n一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素\n一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。\n在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用__@import \"common.wxss\"__导入其他文件，app.wcss默认给所有页面导入进去。\n\n# 其他\n在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。\n# 总结\n小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。","slug":"深入理解微信小程序","published":1,"updated":"2017-06-27T00:57:37.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktota3001bwsaw5xaatw5p","content":"<p>一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。<br><a id=\"more\"></a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。<br>小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。<br>下面就开始说一说小程序的基本内容</p>\n<h1 id=\"文档地址\"><a href=\"#文档地址\" class=\"headerlink\" title=\"文档地址\"></a>文档地址</h1><p>微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击<strong><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122\" target=\"_blank\" rel=\"noopener\">这里</a></strong>访问。</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p>首先看一眼一个基础小程序的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\TEST</span><br><span class=\"line\">│  app.js  //入口函数，程序生命周期函数声明的地方</span><br><span class=\"line\">│  app.json  //全局配置，程序声明获取权限的地方</span><br><span class=\"line\">│  app.wxss  //全局样式，程序定义公共样式的地方</span><br><span class=\"line\">│</span><br><span class=\"line\">├─pages</span><br><span class=\"line\">│  ├─index</span><br><span class=\"line\">│  │      index.js</span><br><span class=\"line\">│  │      index.wxml</span><br><span class=\"line\">│  │      index.wxss</span><br><span class=\"line\">│  │</span><br><span class=\"line\">│  └─logs</span><br><span class=\"line\">│          logs.js  //逻辑层代码，包含小程序数据和行为</span><br><span class=\"line\">│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置</span><br><span class=\"line\">│          logs.wxml  //视图层，小程序页面承载内容的地方</span><br><span class=\"line\">│          logs.wxss  //小程序页面样式，向上覆盖</span><br><span class=\"line\">│</span><br><span class=\"line\">└─utils</span><br><span class=\"line\">        util.js  //自定义公共函数，文件夹和文件的名字随意</span><br></pre></td></tr></table></figure></p>\n<p>一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。<br>小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。<br><strong>可以看到小程序的文件结构非常的简单，我们学习它也很容易</strong></p>\n<h1 id=\"权限获取\"><a href=\"#权限获取\" class=\"headerlink\" title=\"权限获取\"></a>权限获取</h1><p>权限获取分两个方面，一个是根目录下app.json的权限获取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性\t\t\t类型\t\t\t必填\t描述</span><br><span class=\"line\">pages\t\t\tString Array\t\t是\t设置页面路径</span><br><span class=\"line\">window\t\t\tObject\t\t\t否\t设置默认页面的窗口表现</span><br><span class=\"line\">tabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现</span><br><span class=\"line\">networkTimeout\t\tObject\t\t\t否\t设置网络超时时间</span><br><span class=\"line\">debug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式</span><br></pre></td></tr></table></figure></p>\n<p>其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。</p>\n<h1 id=\"视图层组件\"><a href=\"#视图层组件\" class=\"headerlink\" title=\"视图层组件\"></a>视图层组件</h1><p>小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。<br>例如&lt;image&gt;必须有对应的&lt;/image&gt;，而且大小写敏感，写成&lt;/Image&gt;是不可以的。<br>页面标签我总结了一下从功能上可以分为三类<br>第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //直接使用在js的data下声明的数据</span><br><span class=\"line\"></span><br><span class=\"line\">// pages/test/test.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    testData:&apos;hello world!&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ···省略</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu1.png\" alt=\"微信小程序\"><br>承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;view bindtap=&quot;testtap&quot;&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //绑定testtap函数</span><br><span class=\"line\"></span><br><span class=\"line\">// pages/test/test.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    testData:&apos;hello world!&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  testtap:function(event)&#123;  //点击时执行的函数</span><br><span class=\"line\">    wx.showToast(&#123;</span><br><span class=\"line\">      title: &apos;hello world&apos;,</span><br><span class=\"line\">      icon: &apos;success&apos;,</span><br><span class=\"line\">      duration: 2000</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu2.gif\" alt=\"微信小程序\"></p>\n<p>第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;1&quot; range=&quot;&#123;&#123;pickerData&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;view class=&quot;picker&quot;&gt;</span><br><span class=\"line\">        选择</span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">&lt;/picker&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// pages/test/test.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    testData:&apos;hello world!&apos;,</span><br><span class=\"line\">    pickerData:[1,2,3]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bindPickerChange: function(event)&#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;)</span><br><span class=\"line\">  &#125;···</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu3.gif\" alt=\"微信小程序\"></p>\n<p>第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// templete/test.wxml</span><br><span class=\"line\">&lt;template name=&quot;test&quot;&gt;</span><br><span class=\"line\">  &lt;text&gt;&#123;&#123;number&#125;&#125;&lt;/text&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;import src=&quot;../templete/test.wxml&quot;/&gt;</span><br><span class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;1&apos;&#125;&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;2&apos;&#125;&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;3&apos;&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu4.png\" alt=\"微信小程序\"><br><strong>是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方</strong></p>\n<h1 id=\"逻辑层\"><a href=\"#逻辑层\" class=\"headerlink\" title=\"逻辑层\"></a>逻辑层</h1><p>逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。<br>每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量</p>\n<h2 id=\"注册程序\"><a href=\"#注册程序\" class=\"headerlink\" title=\"注册程序\"></a>注册程序</h2><p>程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function() &#123;</span><br><span class=\"line\">    // Do something initial when launch.</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShow: function() &#123;</span><br><span class=\"line\">      // Do something when show.</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onHide: function() &#123;</span><br><span class=\"line\">      // Do something when hide.</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  globalData: &apos;I am global data&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注册页面\"><a href=\"#注册页面\" class=\"headerlink\" title=\"注册页面\"></a>注册页面</h2><p>页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。<br>onLoad为生命周期函数，页面加载是触发<br>onReady为生命周期函数，页面初次渲染完成时触发<br>onShow为生命周期函数，监听页面显示时触发<br>onHide为生命周期函数，监听页面隐藏时触发<br>onUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)<br>onPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发<br>onReachBottom为页面相关事件处理函数，页面上拉触底时触发<br>补一张官方给出的页面生命周期图<br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122\" alt=\"微信小程序\"></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位<br>一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素<br>一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。<br>在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用<strong>@import “common.wxss”</strong>导入其他文件，app.wcss默认给所有页面导入进去。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。</p>\n","site":{"data":{}},"excerpt":"<p>一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。<br>","more":"</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。<br>小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。<br>下面就开始说一说小程序的基本内容</p>\n<h1 id=\"文档地址\"><a href=\"#文档地址\" class=\"headerlink\" title=\"文档地址\"></a>文档地址</h1><p>微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击<strong><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122\" target=\"_blank\" rel=\"noopener\">这里</a></strong>访问。</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p>首先看一眼一个基础小程序的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\TEST</span><br><span class=\"line\">│  app.js  //入口函数，程序生命周期函数声明的地方</span><br><span class=\"line\">│  app.json  //全局配置，程序声明获取权限的地方</span><br><span class=\"line\">│  app.wxss  //全局样式，程序定义公共样式的地方</span><br><span class=\"line\">│</span><br><span class=\"line\">├─pages</span><br><span class=\"line\">│  ├─index</span><br><span class=\"line\">│  │      index.js</span><br><span class=\"line\">│  │      index.wxml</span><br><span class=\"line\">│  │      index.wxss</span><br><span class=\"line\">│  │</span><br><span class=\"line\">│  └─logs</span><br><span class=\"line\">│          logs.js  //逻辑层代码，包含小程序数据和行为</span><br><span class=\"line\">│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置</span><br><span class=\"line\">│          logs.wxml  //视图层，小程序页面承载内容的地方</span><br><span class=\"line\">│          logs.wxss  //小程序页面样式，向上覆盖</span><br><span class=\"line\">│</span><br><span class=\"line\">└─utils</span><br><span class=\"line\">        util.js  //自定义公共函数，文件夹和文件的名字随意</span><br></pre></td></tr></table></figure></p>\n<p>一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。<br>小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。<br><strong>可以看到小程序的文件结构非常的简单，我们学习它也很容易</strong></p>\n<h1 id=\"权限获取\"><a href=\"#权限获取\" class=\"headerlink\" title=\"权限获取\"></a>权限获取</h1><p>权限获取分两个方面，一个是根目录下app.json的权限获取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性\t\t\t类型\t\t\t必填\t描述</span><br><span class=\"line\">pages\t\t\tString Array\t\t是\t设置页面路径</span><br><span class=\"line\">window\t\t\tObject\t\t\t否\t设置默认页面的窗口表现</span><br><span class=\"line\">tabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现</span><br><span class=\"line\">networkTimeout\t\tObject\t\t\t否\t设置网络超时时间</span><br><span class=\"line\">debug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式</span><br></pre></td></tr></table></figure></p>\n<p>其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。</p>\n<h1 id=\"视图层组件\"><a href=\"#视图层组件\" class=\"headerlink\" title=\"视图层组件\"></a>视图层组件</h1><p>小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。<br>例如&lt;image&gt;必须有对应的&lt;/image&gt;，而且大小写敏感，写成&lt;/Image&gt;是不可以的。<br>页面标签我总结了一下从功能上可以分为三类<br>第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //直接使用在js的data下声明的数据</span><br><span class=\"line\"></span><br><span class=\"line\">// pages/test/test.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    testData:&apos;hello world!&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ···省略</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu1.png\" alt=\"微信小程序\"><br>承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;view bindtap=&quot;testtap&quot;&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //绑定testtap函数</span><br><span class=\"line\"></span><br><span class=\"line\">// pages/test/test.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    testData:&apos;hello world!&apos;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  testtap:function(event)&#123;  //点击时执行的函数</span><br><span class=\"line\">    wx.showToast(&#123;</span><br><span class=\"line\">      title: &apos;hello world&apos;,</span><br><span class=\"line\">      icon: &apos;success&apos;,</span><br><span class=\"line\">      duration: 2000</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu2.gif\" alt=\"微信小程序\"></p>\n<p>第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;1&quot; range=&quot;&#123;&#123;pickerData&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;view class=&quot;picker&quot;&gt;</span><br><span class=\"line\">        选择</span><br><span class=\"line\">    &lt;/view&gt;</span><br><span class=\"line\">&lt;/picker&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// pages/test/test.js</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    testData:&apos;hello world!&apos;,</span><br><span class=\"line\">    pickerData:[1,2,3]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bindPickerChange: function(event)&#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;)</span><br><span class=\"line\">  &#125;···</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu3.gif\" alt=\"微信小程序\"></p>\n<p>第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// templete/test.wxml</span><br><span class=\"line\">&lt;template name=&quot;test&quot;&gt;</span><br><span class=\"line\">  &lt;text&gt;&#123;&#123;number&#125;&#125;&lt;/text&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// pages/test/test.wxml</span><br><span class=\"line\">&lt;import src=&quot;../templete/test.wxml&quot;/&gt;</span><br><span class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;1&apos;&#125;&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;2&apos;&#125;&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;3&apos;&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu4.png\" alt=\"微信小程序\"><br><strong>是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方</strong></p>\n<h1 id=\"逻辑层\"><a href=\"#逻辑层\" class=\"headerlink\" title=\"逻辑层\"></a>逻辑层</h1><p>逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。<br>每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量</p>\n<h2 id=\"注册程序\"><a href=\"#注册程序\" class=\"headerlink\" title=\"注册程序\"></a>注册程序</h2><p>程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function() &#123;</span><br><span class=\"line\">    // Do something initial when launch.</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onShow: function() &#123;</span><br><span class=\"line\">      // Do something when show.</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onHide: function() &#123;</span><br><span class=\"line\">      // Do something when hide.</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  globalData: &apos;I am global data&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注册页面\"><a href=\"#注册页面\" class=\"headerlink\" title=\"注册页面\"></a>注册页面</h2><p>页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。<br>onLoad为生命周期函数，页面加载是触发<br>onReady为生命周期函数，页面初次渲染完成时触发<br>onShow为生命周期函数，监听页面显示时触发<br>onHide为生命周期函数，监听页面隐藏时触发<br>onUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)<br>onPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发<br>onReachBottom为页面相关事件处理函数，页面上拉触底时触发<br>补一张官方给出的页面生命周期图<br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122\" alt=\"微信小程序\"></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位<br>一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素<br>一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。<br>在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用<strong>@import “common.wxss”</strong>导入其他文件，app.wcss默认给所有页面导入进去。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。</p>"},{"title":"关于博客内容的想法","date":"2016-10-24T06:57:00.000Z","_content":"说点感想\n<!-- more -->\n从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候\n常常不知道怎么写\n写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我\n还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸\n还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大\n\n但是\n每一个阅读我博客的人，我觉得应该对你们负责\n如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正\n如果你们觉得我说的有错误，欢迎打脸\n\n对你们负责也是对我自己负责。","source":"_posts/关于博客内容的想法.md","raw":"---\ntitle: 关于博客内容的想法\ndate: 2016-10-24 14:57:00\ncategories: [博客]\ntags: [随想]\n---\n说点感想\n<!-- more -->\n从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候\n常常不知道怎么写\n写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我\n还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸\n还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大\n\n但是\n每一个阅读我博客的人，我觉得应该对你们负责\n如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正\n如果你们觉得我说的有错误，欢迎打脸\n\n对你们负责也是对我自己负责。","slug":"关于博客内容的想法","published":1,"updated":"2016-11-22T09:15:35.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktota4001ewsawqgm8eum2","content":"<p>说点感想<br><a id=\"more\"></a><br>从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候<br>常常不知道怎么写<br>写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我<br>还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸<br>还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大</p>\n<p>但是<br>每一个阅读我博客的人，我觉得应该对你们负责<br>如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正<br>如果你们觉得我说的有错误，欢迎打脸</p>\n<p>对你们负责也是对我自己负责。</p>\n","site":{"data":{}},"excerpt":"<p>说点感想<br>","more":"<br>从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候<br>常常不知道怎么写<br>写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我<br>还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸<br>还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大</p>\n<p>但是<br>每一个阅读我博客的人，我觉得应该对你们负责<br>如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正<br>如果你们觉得我说的有错误，欢迎打脸</p>\n<p>对你们负责也是对我自己负责。</p>"},{"title":"读书笔记:单例模式","date":"2016-10-24T07:34:26.000Z","_content":"单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。\n<!-- more -->\n# 定义\n单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。\n# 构建思路\n用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建\n# 初步实现\n```javascript\nvar createH1 = (function(){\n\tvar flag;\t//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它\n\treturn function(){\n\t\tif(flag){\t//判断是否有值,如果有,就返回对该值的引用\n\t\t\treturn flag\n\t\t}else{\n\t\t\tflag = document.createElement('h1');\n\t\t\tflag.innerHTML = 'test';\n\t\t\tdocument.body.appendChild(flag);\n\t\t}\n\t}\n})()\n```\ncreateH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。\n测试结果\n![单例模式](/images/moshi/moshi1.jpg)\n在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。\n# 实战题\n这是一个来自[codewars](https://www.codewars.com)的题目\n> Description:\n> Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.\n> You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?\n> The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + ... + 1^3 = m if such a n exists or -1 if there is no such n.\n> Examples:\n> findNb(1071225) --> 45\n> findNb(91716553919377) --> -1\n\n大意就是给出一个很大的数字,找到他的\"基数\"。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + ... + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1\n这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：\n```javascript\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(jisuan(i)==m){\n            result = i;\n            break;\n        }else if(jisuan(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回\n重新构建的代码\n```javascript\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\nvar getResult = (function(){\n    var cache = {};\n    return function(num){\n        if(cache[num]){\n            return cache[num]\n        }else{\n            return cache[num] = jisuan(num)\n        }\n    }\n})()\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(getResult(i)==m){\n            result = i;\n            break;\n        }else if(getResult(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n让我们看看执行的效率\n![单例模式](/images/moshi/moshi2.jpg)\n# 结语\n单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。","source":"_posts/读书笔记-单例模式.md","raw":"---\ntitle: '读书笔记:单例模式'\ndate: 2016-10-24 15:34:26\ncategories: [博客]\ntags: [模式设计,读书笔记]\n---\n单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。\n<!-- more -->\n# 定义\n单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。\n# 构建思路\n用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建\n# 初步实现\n```javascript\nvar createH1 = (function(){\n\tvar flag;\t//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它\n\treturn function(){\n\t\tif(flag){\t//判断是否有值,如果有,就返回对该值的引用\n\t\t\treturn flag\n\t\t}else{\n\t\t\tflag = document.createElement('h1');\n\t\t\tflag.innerHTML = 'test';\n\t\t\tdocument.body.appendChild(flag);\n\t\t}\n\t}\n})()\n```\ncreateH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。\n测试结果\n![单例模式](/images/moshi/moshi1.jpg)\n在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。\n# 实战题\n这是一个来自[codewars](https://www.codewars.com)的题目\n> Description:\n> Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.\n> You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?\n> The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + ... + 1^3 = m if such a n exists or -1 if there is no such n.\n> Examples:\n> findNb(1071225) --> 45\n> findNb(91716553919377) --> -1\n\n大意就是给出一个很大的数字,找到他的\"基数\"。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + ... + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1\n这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：\n```javascript\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(jisuan(i)==m){\n            result = i;\n            break;\n        }else if(jisuan(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回\n重新构建的代码\n```javascript\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\nvar getResult = (function(){\n    var cache = {};\n    return function(num){\n        if(cache[num]){\n            return cache[num]\n        }else{\n            return cache[num] = jisuan(num)\n        }\n    }\n})()\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(getResult(i)==m){\n            result = i;\n            break;\n        }else if(getResult(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n让我们看看执行的效率\n![单例模式](/images/moshi/moshi2.jpg)\n# 结语\n单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。","slug":"读书笔记-单例模式","published":1,"updated":"2017-06-27T00:56:37.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktota6001iwsawdfluhxcf","content":"<p>单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。<br><a id=\"more\"></a></p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p>\n<h1 id=\"构建思路\"><a href=\"#构建思路\" class=\"headerlink\" title=\"构建思路\"></a>构建思路</h1><p>用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建</p>\n<h1 id=\"初步实现\"><a href=\"#初步实现\" class=\"headerlink\" title=\"初步实现\"></a>初步实现</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> createH1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> flag;\t<span class=\"comment\">//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)&#123;\t<span class=\"comment\">//判断是否有值,如果有,就返回对该值的引用</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> flag</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\">\t\t\tflag.innerHTML = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.appendChild(flag);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>createH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。<br>测试结果<br><img src=\"/images/moshi/moshi1.jpg\" alt=\"单例模式\"><br>在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。</p>\n<h1 id=\"实战题\"><a href=\"#实战题\" class=\"headerlink\" title=\"实战题\"></a>实战题</h1><p>这是一个来自<a href=\"https://www.codewars.com\" target=\"_blank\" rel=\"noopener\">codewars</a>的题目</p>\n<blockquote>\n<p>Description:<br>Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.<br>You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?<br>The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.<br>Examples:<br>findNb(1071225) –&gt; 45<br>findNb(91716553919377) –&gt; -1</p>\n</blockquote>\n<p>大意就是给出一个很大的数字,找到他的”基数”。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + … + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1<br>这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jisuan = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = num;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        sum = sum + i*i*i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findNb</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&gt;<span class=\"number\">0</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(jisuan(i)==m)&#123;</span><br><span class=\"line\">            result = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(jisuan(i)&gt;m)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回<br>重新构建的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jisuan = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = num;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        sum = sum + i*i*i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getResult = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cache[num])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache[num]</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache[num] = jisuan(num)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findNb</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&gt;<span class=\"number\">0</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getResult(i)==m)&#123;</span><br><span class=\"line\">            result = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(getResult(i)&gt;m)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>让我们看看执行的效率<br><img src=\"/images/moshi/moshi2.jpg\" alt=\"单例模式\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。</p>\n","site":{"data":{}},"excerpt":"<p>单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。<br>","more":"</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p>\n<h1 id=\"构建思路\"><a href=\"#构建思路\" class=\"headerlink\" title=\"构建思路\"></a>构建思路</h1><p>用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建</p>\n<h1 id=\"初步实现\"><a href=\"#初步实现\" class=\"headerlink\" title=\"初步实现\"></a>初步实现</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> createH1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> flag;\t<span class=\"comment\">//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)&#123;\t<span class=\"comment\">//判断是否有值,如果有,就返回对该值的引用</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> flag</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'h1'</span>);</span><br><span class=\"line\">\t\t\tflag.innerHTML = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.appendChild(flag);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>createH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。<br>测试结果<br><img src=\"/images/moshi/moshi1.jpg\" alt=\"单例模式\"><br>在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。</p>\n<h1 id=\"实战题\"><a href=\"#实战题\" class=\"headerlink\" title=\"实战题\"></a>实战题</h1><p>这是一个来自<a href=\"https://www.codewars.com\" target=\"_blank\" rel=\"noopener\">codewars</a>的题目</p>\n<blockquote>\n<p>Description:<br>Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.<br>You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?<br>The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.<br>Examples:<br>findNb(1071225) –&gt; 45<br>findNb(91716553919377) –&gt; -1</p>\n</blockquote>\n<p>大意就是给出一个很大的数字,找到他的”基数”。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + … + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1<br>这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jisuan = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = num;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        sum = sum + i*i*i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findNb</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&gt;<span class=\"number\">0</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(jisuan(i)==m)&#123;</span><br><span class=\"line\">            result = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(jisuan(i)&gt;m)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回<br>重新构建的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jisuan = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = num;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        sum = sum + i*i*i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getResult = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cache[num])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache[num]</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache[num] = jisuan(num)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findNb</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&gt;<span class=\"number\">0</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(getResult(i)==m)&#123;</span><br><span class=\"line\">            result = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(getResult(i)&gt;m)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>让我们看看执行的效率<br><img src=\"/images/moshi/moshi2.jpg\" alt=\"单例模式\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。</p>"},{"title":"ES6新特性初探","date":"2016-11-30T02:34:35.000Z","_content":"最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！\n这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。\n<!-- more -->\n这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更__清晰__的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。\n# 开始前的准备\n因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本\n首先安装es6转码器babel提供的命令行工具\n```\nnpm install --global babel-cli\n```\n因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集\n```\nnpm install --save-dev babel-preset-es2015\n```\n然后在我们的项目下新建一个.babelrc文件并写入\n```javascript\n{\n    \"presets\": [\n      \"es2015\"\n    ],\n    \"plugins\": []\n  }\n```\n这一步是为了让babel在执行的时候采用上面安装的规则集。\n这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本\n一个是 babel yourprogarm.js\n这个可以直接在命令行输出翻译出来的脚本\n一个是 babel-node yourprogarm.js (用node直接输出也可以)\n这个可以直接运行你的脚本，输出结果\n一个是 babel yourprogarm.js -o compiled.js\n将你的脚本转成es5语法并保存到指定文件里面\n大家各取所需\n# 块作用声明let以及常量声明const\n废话不多说，直接先看代码\n```javascript\nif (true) {\n\tvar a = 4\n}\nconsole.log(a)  //4\n```\n我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的__缺陷__。在es6中，我们有了let这个块级声明，再也不用担心这类问题了\n```javascript\nif (true) {\n\tlet a = 4\n}\nconsole.log(a)  //undefined\n```\n另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量\n```javascript\nconst a = 4;\na = 5;  //error\n```\n这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的\n在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的\n拿第二段的代码举例，翻译后是这样的\n![es6](/images/es6/es6.png)\n翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug\n# 解构\n英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）\n实际意思是一种新的赋值模式，叫解构\n解构赋值提供了一种位赋值\n```javascript\nvar [a, b] = [1, 2]\nconsole.log(a, b)  //输出结果1 2\n```\n大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现\n```javascript\n[a, b] = [b, a]\n```\n解构赋值还提供了一种提取属性的赋值方法\n```javascript\nvar pt = {x: 123, y: 444};\nvar {x, y} = pt;\nconsole.log(x, y); // 123 444\n```\n结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了\n```javascript\nvar pt = {x: 123, y: 444};\nvar {x:myvalue, y} = pt;\nconsole.log(y); // 444\nconsole.log(x); // undefined\nconsole.log(myvalue); // 123\n```\n# 字面量属性可计算\n这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的\n```javascript\nvar b = 'example';\nvar a = {};\na[b + 'A'] = 4\nconsole.log(a['exampleA'])  //4\n```\n在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性\n```javascript\nvar a = {\n\t['example' + 'A']:6\n}\nconsole.log(a.exampleA)  //6\n```\n# 箭头函数 =>\n说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法\n一般函数声明是这样的\n```javascript\nfunction abc(){\n\t// your code here\n}\n```\n而es6的语法是这样的\n```javascript\nvar abc = () => {\n\t//your code here\n}\n```\n这个__()__就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样\n```javascript\nsetTimeout(()=>{console.log('123')},1000)\n```\n就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。\n```javascript\nconsole.log(a) //undefined\nvar a = () => {\n\t// your code here\n}\n```\n# REST AND SPREAD(延展运算符)\n上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个\n在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。\n可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写\n```javascript\nvar abc = (...args) => {\n\tconsole.log(args)\n}\nabc(1, 2, 3, 4)  //1 2 3 4\n```\n前面的三个点表示任意多的参数，我们还可以给参数赋默认值\n```javascript\nvar abc = (a = 6) => {\n\tconsole.log(a)\n}\nabc()  //6\nabc(4)  //4\n```\n利用这些特性我们可以很方便的取到多余的参数\n```javascript\nvar abc = (a, b, ...args) => {\n\tconsole.log(a + b)\n\tconsole.log(args)\n}\nabc(1, 2)  //3 []\nabc(1, 2, 3, 4)  //3 [3, 4]\n```\n# 模版\n说模版实际上es6给定义的模版功能比较弱，模版文本用 __`__ 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 __${}__ 表示，所以基本用法如下所示\n```javascript\nvar name = 'zk';\nvar templateString = `my name is ${name}, and I know 1 + 1 = ${1 + 1}`\nconsole.log(templateString)  //my name is zk, and I know 1 + 1 = 2\n```\n在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。\n# class类\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\njs面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种\n![突然消沉](/images/emotions/trxc.jpg)\n不管了，最起码写写代码的体验上提升了很多。\n> 有对js对象继承不太理解的同学，可以看看这篇我的文章__[js继承的方式和意义](https://zk-.github.io/2016/10/26/js继承的方式和意义/)__\n\n上代码\n```javascript\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\tconsole.log('my name is ' + this.name)\n\t}\n}\nvar parent = new Parent('parent')\nconsole.log(parent.name)  //parent\nparent.sayHello()  //my name is parent\n```\n继承的写法也很容易，用关键词extends，父类用super表示\n```javascript\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\treturn 'my name is ' + this.name\n\t}\n}\n\nclass Child extends Parent{\n\tconstructor(name, sex){\n\t\tsuper(name);  //构造器继承\n\t\tthis.sex = sex;\n\t}\n\tsayHello(){\n\t\tconsole.log('i am a child,' + super.sayHello())  //原型链继承\n\t}\n\tsaySex(){\n\t\tconsole.log(this.sex)\n\t}\n}\n\nvar child = new Child('baby','male')\nconsole.log(child.name)  //baby\nconsole.log(child.sex)  //male\nchild.sayHello()  //i am a child,my name is baby\nchild.saySex()  //male\n```\n# 模块module\n模块加载在es6中得到了原生支持\n```javascript\n// Message.js\nexport const message = 'Hello Babel';\n\n// other.js\nimport {message} from './Message';\nconsole.log(message); // Hello Babel\n```\n导出可以实名导出也可以默认导出\n```javascript\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport const obj = {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport default {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// other.js\nimport {greeting, name, version} from './Message';\n```\n# 迭代器\n这是一个大内容，下一篇开始说这个概念吧。。。","source":"_posts/ES6新特性初探.md","raw":"---\ntitle: ES6新特性初探\ndate: 2016-11-30 10:34:35\ncategories: [博客]\ntags: [ES6]\n---\n最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！\n这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。\n<!-- more -->\n这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更__清晰__的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。\n# 开始前的准备\n因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本\n首先安装es6转码器babel提供的命令行工具\n```\nnpm install --global babel-cli\n```\n因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集\n```\nnpm install --save-dev babel-preset-es2015\n```\n然后在我们的项目下新建一个.babelrc文件并写入\n```javascript\n{\n    \"presets\": [\n      \"es2015\"\n    ],\n    \"plugins\": []\n  }\n```\n这一步是为了让babel在执行的时候采用上面安装的规则集。\n这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本\n一个是 babel yourprogarm.js\n这个可以直接在命令行输出翻译出来的脚本\n一个是 babel-node yourprogarm.js (用node直接输出也可以)\n这个可以直接运行你的脚本，输出结果\n一个是 babel yourprogarm.js -o compiled.js\n将你的脚本转成es5语法并保存到指定文件里面\n大家各取所需\n# 块作用声明let以及常量声明const\n废话不多说，直接先看代码\n```javascript\nif (true) {\n\tvar a = 4\n}\nconsole.log(a)  //4\n```\n我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的__缺陷__。在es6中，我们有了let这个块级声明，再也不用担心这类问题了\n```javascript\nif (true) {\n\tlet a = 4\n}\nconsole.log(a)  //undefined\n```\n另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量\n```javascript\nconst a = 4;\na = 5;  //error\n```\n这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的\n在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的\n拿第二段的代码举例，翻译后是这样的\n![es6](/images/es6/es6.png)\n翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug\n# 解构\n英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）\n实际意思是一种新的赋值模式，叫解构\n解构赋值提供了一种位赋值\n```javascript\nvar [a, b] = [1, 2]\nconsole.log(a, b)  //输出结果1 2\n```\n大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现\n```javascript\n[a, b] = [b, a]\n```\n解构赋值还提供了一种提取属性的赋值方法\n```javascript\nvar pt = {x: 123, y: 444};\nvar {x, y} = pt;\nconsole.log(x, y); // 123 444\n```\n结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了\n```javascript\nvar pt = {x: 123, y: 444};\nvar {x:myvalue, y} = pt;\nconsole.log(y); // 444\nconsole.log(x); // undefined\nconsole.log(myvalue); // 123\n```\n# 字面量属性可计算\n这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的\n```javascript\nvar b = 'example';\nvar a = {};\na[b + 'A'] = 4\nconsole.log(a['exampleA'])  //4\n```\n在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性\n```javascript\nvar a = {\n\t['example' + 'A']:6\n}\nconsole.log(a.exampleA)  //6\n```\n# 箭头函数 =>\n说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法\n一般函数声明是这样的\n```javascript\nfunction abc(){\n\t// your code here\n}\n```\n而es6的语法是这样的\n```javascript\nvar abc = () => {\n\t//your code here\n}\n```\n这个__()__就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样\n```javascript\nsetTimeout(()=>{console.log('123')},1000)\n```\n就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。\n```javascript\nconsole.log(a) //undefined\nvar a = () => {\n\t// your code here\n}\n```\n# REST AND SPREAD(延展运算符)\n上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个\n在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。\n可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写\n```javascript\nvar abc = (...args) => {\n\tconsole.log(args)\n}\nabc(1, 2, 3, 4)  //1 2 3 4\n```\n前面的三个点表示任意多的参数，我们还可以给参数赋默认值\n```javascript\nvar abc = (a = 6) => {\n\tconsole.log(a)\n}\nabc()  //6\nabc(4)  //4\n```\n利用这些特性我们可以很方便的取到多余的参数\n```javascript\nvar abc = (a, b, ...args) => {\n\tconsole.log(a + b)\n\tconsole.log(args)\n}\nabc(1, 2)  //3 []\nabc(1, 2, 3, 4)  //3 [3, 4]\n```\n# 模版\n说模版实际上es6给定义的模版功能比较弱，模版文本用 __`__ 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 __${}__ 表示，所以基本用法如下所示\n```javascript\nvar name = 'zk';\nvar templateString = `my name is ${name}, and I know 1 + 1 = ${1 + 1}`\nconsole.log(templateString)  //my name is zk, and I know 1 + 1 = 2\n```\n在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。\n# class类\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\njs面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种\n![突然消沉](/images/emotions/trxc.jpg)\n不管了，最起码写写代码的体验上提升了很多。\n> 有对js对象继承不太理解的同学，可以看看这篇我的文章__[js继承的方式和意义](https://zk-.github.io/2016/10/26/js继承的方式和意义/)__\n\n上代码\n```javascript\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\tconsole.log('my name is ' + this.name)\n\t}\n}\nvar parent = new Parent('parent')\nconsole.log(parent.name)  //parent\nparent.sayHello()  //my name is parent\n```\n继承的写法也很容易，用关键词extends，父类用super表示\n```javascript\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\treturn 'my name is ' + this.name\n\t}\n}\n\nclass Child extends Parent{\n\tconstructor(name, sex){\n\t\tsuper(name);  //构造器继承\n\t\tthis.sex = sex;\n\t}\n\tsayHello(){\n\t\tconsole.log('i am a child,' + super.sayHello())  //原型链继承\n\t}\n\tsaySex(){\n\t\tconsole.log(this.sex)\n\t}\n}\n\nvar child = new Child('baby','male')\nconsole.log(child.name)  //baby\nconsole.log(child.sex)  //male\nchild.sayHello()  //i am a child,my name is baby\nchild.saySex()  //male\n```\n# 模块module\n模块加载在es6中得到了原生支持\n```javascript\n// Message.js\nexport const message = 'Hello Babel';\n\n// other.js\nimport {message} from './Message';\nconsole.log(message); // Hello Babel\n```\n导出可以实名导出也可以默认导出\n```javascript\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport const obj = {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport default {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// other.js\nimport {greeting, name, version} from './Message';\n```\n# 迭代器\n这是一个大内容，下一篇开始说这个概念吧。。。","slug":"ES6新特性初探","published":1,"updated":"2017-06-27T00:56:18.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuktota7001lwsawppdru39l","content":"<p>最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！<br>这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。<br><a id=\"more\"></a><br>这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更<strong>清晰</strong>的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。</p>\n<h1 id=\"开始前的准备\"><a href=\"#开始前的准备\" class=\"headerlink\" title=\"开始前的准备\"></a>开始前的准备</h1><p>因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本<br>首先安装es6转码器babel提供的命令行工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global babel-cli</span><br></pre></td></tr></table></figure></p>\n<p>因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure></p>\n<p>然后在我们的项目下新建一个.babelrc文件并写入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"es2015\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"plugins\"</span>: []</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这一步是为了让babel在执行的时候采用上面安装的规则集。<br>这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本<br>一个是 babel yourprogarm.js<br>这个可以直接在命令行输出翻译出来的脚本<br>一个是 babel-node yourprogarm.js (用node直接输出也可以)<br>这个可以直接运行你的脚本，输出结果<br>一个是 babel yourprogarm.js -o compiled.js<br>将你的脚本转成es5语法并保存到指定文件里面<br>大家各取所需</p>\n<h1 id=\"块作用声明let以及常量声明const\"><a href=\"#块作用声明let以及常量声明const\" class=\"headerlink\" title=\"块作用声明let以及常量声明const\"></a>块作用声明let以及常量声明const</h1><p>废话不多说，直接先看代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure></p>\n<p>我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的<strong>缺陷</strong>。在es6中，我们有了let这个块级声明，再也不用担心这类问题了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">a = <span class=\"number\">5</span>;  <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure></p>\n<p>这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的<br>在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的<br>拿第二段的代码举例，翻译后是这样的<br><img src=\"/images/es6/es6.png\" alt=\"es6\"><br>翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug</p>\n<h1 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h1><p>英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）<br>实际意思是一种新的赋值模式，叫解构<br>解构赋值提供了一种位赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b)  <span class=\"comment\">//输出结果1 2</span></span><br></pre></td></tr></table></figure></p>\n<p>大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[a, b] = [b, a]</span><br></pre></td></tr></table></figure></p>\n<p>解构赋值还提供了一种提取属性的赋值方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pt = &#123;<span class=\"attr\">x</span>: <span class=\"number\">123</span>, <span class=\"attr\">y</span>: <span class=\"number\">444</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y&#125; = pt;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// 123 444</span></span><br></pre></td></tr></table></figure></p>\n<p>结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pt = &#123;<span class=\"attr\">x</span>: <span class=\"number\">123</span>, <span class=\"attr\">y</span>: <span class=\"number\">444</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>:myvalue, y&#125; = pt;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// 444</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myvalue); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字面量属性可计算\"><a href=\"#字面量属性可计算\" class=\"headerlink\" title=\"字面量属性可计算\"></a>字面量属性可计算</h1><p>这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'example'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">a[b + <span class=\"string\">'A'</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"string\">'exampleA'</span>])  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure></p>\n<p>在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">\t[<span class=\"string\">'example'</span> + <span class=\"string\">'A'</span>]:<span class=\"number\">6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.exampleA)  <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h1><p>说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法<br>一般函数声明是这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// your code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而es6的语法是这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//your code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<strong>()</strong>就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'123'</span>)&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// your code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"REST-AND-SPREAD-延展运算符\"><a href=\"#REST-AND-SPREAD-延展运算符\" class=\"headerlink\" title=\"REST AND SPREAD(延展运算符)\"></a>REST AND SPREAD(延展运算符)</h1><p>上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个<br>在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。<br>可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  <span class=\"comment\">//1 2 3 4</span></span><br></pre></td></tr></table></figure></p>\n<p>前面的三个点表示任意多的参数，我们还可以给参数赋默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\">(<span class=\"params\">a = <span class=\"number\">6</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abc()  <span class=\"comment\">//6</span></span><br><span class=\"line\">abc(<span class=\"number\">4</span>)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure></p>\n<p>利用这些特性我们可以很方便的取到多余的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\">(<span class=\"params\">a, b, ...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abc(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\">//3 []</span></span><br><span class=\"line\">abc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  <span class=\"comment\">//3 [3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h1><p>说模版实际上es6给定义的模版功能比较弱，模版文本用 <strong>`</strong> 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 <strong>${}</strong> 表示，所以基本用法如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'zk'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> templateString = <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>, and I know 1 + 1 = <span class=\"subst\">$&#123;<span class=\"number\">1</span> + <span class=\"number\">1</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(templateString)  <span class=\"comment\">//my name is zk, and I know 1 + 1 = 2</span></span><br></pre></td></tr></table></figure></p>\n<p>在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。</p>\n<h1 id=\"class类\"><a href=\"#class类\" class=\"headerlink\" title=\"class类\"></a>class类</h1><p><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br>js面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种<br><img src=\"/images/emotions/trxc.jpg\" alt=\"突然消沉\"><br>不管了，最起码写写代码的体验上提升了很多。</p>\n<blockquote>\n<p>有对js对象继承不太理解的同学，可以看看这篇我的文章<strong><a href=\"https://zk-.github.io/2016/10/26/js继承的方式和意义/\" target=\"_blank\" rel=\"noopener\">js继承的方式和意义</a></strong></p>\n</blockquote>\n<p>上代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name)&#123;\t<span class=\"comment\">//这是构造器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsayHello()&#123;\t\t<span class=\"comment\">//这是原型方法</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'parent'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parent.name)  <span class=\"comment\">//parent</span></span><br><span class=\"line\">parent.sayHello()  <span class=\"comment\">//my name is parent</span></span><br></pre></td></tr></table></figure></p>\n<p>继承的写法也很容易，用关键词extends，父类用super表示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name)&#123;\t<span class=\"comment\">//这是构造器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsayHello()&#123;\t\t<span class=\"comment\">//这是原型方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name, sex)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);  <span class=\"comment\">//构造器继承</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsayHello()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'i am a child,'</span> + <span class=\"keyword\">super</span>.sayHello())  <span class=\"comment\">//原型链继承</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsaySex()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.sex)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'baby'</span>,<span class=\"string\">'male'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name)  <span class=\"comment\">//baby</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.sex)  <span class=\"comment\">//male</span></span><br><span class=\"line\">child.sayHello()  <span class=\"comment\">//i am a child,my name is baby</span></span><br><span class=\"line\">child.saySex()  <span class=\"comment\">//male</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"模块module\"><a href=\"#模块module\" class=\"headerlink\" title=\"模块module\"></a>模块module</h1><p>模块加载在es6中得到了原生支持<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Message.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> message = <span class=\"string\">'Hello Babel'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Message'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message); <span class=\"comment\">// Hello Babel</span></span><br></pre></td></tr></table></figure></p>\n<p>导出可以实名导出也可以默认导出<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Message.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Babel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"string\">'v5.0'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  greeting: greeting,</span><br><span class=\"line\">  name: name,</span><br><span class=\"line\">  version: version</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Message.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Babel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"string\">'v5.0'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  greeting: greeting,</span><br><span class=\"line\">  name: name,</span><br><span class=\"line\">  version: version</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;greeting, name, version&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Message'</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>这是一个大内容，下一篇开始说这个概念吧。。。</p>\n","site":{"data":{}},"excerpt":"<p>最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！<br>这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。<br>","more":"<br>这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更<strong>清晰</strong>的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。</p>\n<h1 id=\"开始前的准备\"><a href=\"#开始前的准备\" class=\"headerlink\" title=\"开始前的准备\"></a>开始前的准备</h1><p>因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本<br>首先安装es6转码器babel提供的命令行工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global babel-cli</span><br></pre></td></tr></table></figure></p>\n<p>因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure></p>\n<p>然后在我们的项目下新建一个.babelrc文件并写入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"es2015\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"plugins\"</span>: []</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这一步是为了让babel在执行的时候采用上面安装的规则集。<br>这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本<br>一个是 babel yourprogarm.js<br>这个可以直接在命令行输出翻译出来的脚本<br>一个是 babel-node yourprogarm.js (用node直接输出也可以)<br>这个可以直接运行你的脚本，输出结果<br>一个是 babel yourprogarm.js -o compiled.js<br>将你的脚本转成es5语法并保存到指定文件里面<br>大家各取所需</p>\n<h1 id=\"块作用声明let以及常量声明const\"><a href=\"#块作用声明let以及常量声明const\" class=\"headerlink\" title=\"块作用声明let以及常量声明const\"></a>块作用声明let以及常量声明const</h1><p>废话不多说，直接先看代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure></p>\n<p>我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的<strong>缺陷</strong>。在es6中，我们有了let这个块级声明，再也不用担心这类问题了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">a = <span class=\"number\">5</span>;  <span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure></p>\n<p>这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的<br>在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的<br>拿第二段的代码举例，翻译后是这样的<br><img src=\"/images/es6/es6.png\" alt=\"es6\"><br>翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug</p>\n<h1 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h1><p>英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）<br>实际意思是一种新的赋值模式，叫解构<br>解构赋值提供了一种位赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b)  <span class=\"comment\">//输出结果1 2</span></span><br></pre></td></tr></table></figure></p>\n<p>大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[a, b] = [b, a]</span><br></pre></td></tr></table></figure></p>\n<p>解构赋值还提供了一种提取属性的赋值方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pt = &#123;<span class=\"attr\">x</span>: <span class=\"number\">123</span>, <span class=\"attr\">y</span>: <span class=\"number\">444</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y&#125; = pt;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">// 123 444</span></span><br></pre></td></tr></table></figure></p>\n<p>结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pt = &#123;<span class=\"attr\">x</span>: <span class=\"number\">123</span>, <span class=\"attr\">y</span>: <span class=\"number\">444</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>:myvalue, y&#125; = pt;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// 444</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myvalue); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"字面量属性可计算\"><a href=\"#字面量属性可计算\" class=\"headerlink\" title=\"字面量属性可计算\"></a>字面量属性可计算</h1><p>这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'example'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\">a[b + <span class=\"string\">'A'</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"string\">'exampleA'</span>])  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure></p>\n<p>在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">\t[<span class=\"string\">'example'</span> + <span class=\"string\">'A'</span>]:<span class=\"number\">6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.exampleA)  <span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h1><p>说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法<br>一般函数声明是这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// your code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而es6的语法是这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//your code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个<strong>()</strong>就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'123'</span>)&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n<p>就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// your code here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"REST-AND-SPREAD-延展运算符\"><a href=\"#REST-AND-SPREAD-延展运算符\" class=\"headerlink\" title=\"REST AND SPREAD(延展运算符)\"></a>REST AND SPREAD(延展运算符)</h1><p>上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个<br>在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。<br>可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  <span class=\"comment\">//1 2 3 4</span></span><br></pre></td></tr></table></figure></p>\n<p>前面的三个点表示任意多的参数，我们还可以给参数赋默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\">(<span class=\"params\">a = <span class=\"number\">6</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abc()  <span class=\"comment\">//6</span></span><br><span class=\"line\">abc(<span class=\"number\">4</span>)  <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure></p>\n<p>利用这些特性我们可以很方便的取到多余的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\">(<span class=\"params\">a, b, ...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abc(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\">//3 []</span></span><br><span class=\"line\">abc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  <span class=\"comment\">//3 [3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h1><p>说模版实际上es6给定义的模版功能比较弱，模版文本用 <strong>`</strong> 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 <strong>${}</strong> 表示，所以基本用法如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'zk'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> templateString = <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>, and I know 1 + 1 = <span class=\"subst\">$&#123;<span class=\"number\">1</span> + <span class=\"number\">1</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(templateString)  <span class=\"comment\">//my name is zk, and I know 1 + 1 = 2</span></span><br></pre></td></tr></table></figure></p>\n<p>在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。</p>\n<h1 id=\"class类\"><a href=\"#class类\" class=\"headerlink\" title=\"class类\"></a>class类</h1><p><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br>js面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种<br><img src=\"/images/emotions/trxc.jpg\" alt=\"突然消沉\"><br>不管了，最起码写写代码的体验上提升了很多。</p>\n<blockquote>\n<p>有对js对象继承不太理解的同学，可以看看这篇我的文章<strong><a href=\"https://zk-.github.io/2016/10/26/js继承的方式和意义/\" target=\"_blank\" rel=\"noopener\">js继承的方式和意义</a></strong></p>\n</blockquote>\n<p>上代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name)&#123;\t<span class=\"comment\">//这是构造器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsayHello()&#123;\t\t<span class=\"comment\">//这是原型方法</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'parent'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(parent.name)  <span class=\"comment\">//parent</span></span><br><span class=\"line\">parent.sayHello()  <span class=\"comment\">//my name is parent</span></span><br></pre></td></tr></table></figure></p>\n<p>继承的写法也很容易，用关键词extends，父类用super表示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name)&#123;\t<span class=\"comment\">//这是构造器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsayHello()&#123;\t\t<span class=\"comment\">//这是原型方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(name, sex)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);  <span class=\"comment\">//构造器继承</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsayHello()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'i am a child,'</span> + <span class=\"keyword\">super</span>.sayHello())  <span class=\"comment\">//原型链继承</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsaySex()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.sex)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'baby'</span>,<span class=\"string\">'male'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.name)  <span class=\"comment\">//baby</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.sex)  <span class=\"comment\">//male</span></span><br><span class=\"line\">child.sayHello()  <span class=\"comment\">//i am a child,my name is baby</span></span><br><span class=\"line\">child.saySex()  <span class=\"comment\">//male</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"模块module\"><a href=\"#模块module\" class=\"headerlink\" title=\"模块module\"></a>模块module</h1><p>模块加载在es6中得到了原生支持<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Message.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> message = <span class=\"string\">'Hello Babel'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;message&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Message'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(message); <span class=\"comment\">// Hello Babel</span></span><br></pre></td></tr></table></figure></p>\n<p>导出可以实名导出也可以默认导出<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Message.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Babel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"string\">'v5.0'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  greeting: greeting,</span><br><span class=\"line\">  name: name,</span><br><span class=\"line\">  version: version</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Message.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Babel'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"string\">'v5.0'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  greeting: greeting,</span><br><span class=\"line\">  name: name,</span><br><span class=\"line\">  version: version</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;greeting, name, version&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Message'</span>;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>这是一个大内容，下一篇开始说这个概念吧。。。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuktot8y0001wsaw8qpvmj3h","category_id":"cjuktot950004wsawdc1yv5mc","_id":"cjuktot9j000ewsawvr4buc67"},{"post_id":"cjuktot930003wsawtyng55rp","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9n000kwsaw8sjsebg6"},{"post_id":"cjuktot9i000dwsawianbqz47","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9p000nwsawctjay80f"},{"post_id":"cjuktot9l000hwsawz3a53s07","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9q000qwsawm3q1w7li"},{"post_id":"cjuktot980006wsawens5ztiz","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9s000twsawgy748p6q"},{"post_id":"cjuktot9m000iwsawo4yp3zc9","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9t000vwsawds4crqbw"},{"post_id":"cjuktot9o000mwsawb7f1fqh2","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9v000ywsawb2foiakl"},{"post_id":"cjuktot9a0007wsawrc5kj5p3","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktot9x0010wsawyfn25yqm"},{"post_id":"cjuktot9p000owsawqc1y86nz","category_id":"cjuktot950004wsawdc1yv5mc","_id":"cjuktot9z0012wsawyyuefplr"},{"post_id":"cjuktot9r000swsawmvknqub1","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktota10016wsaw5lzfmmdw"},{"post_id":"cjuktot9b0008wsaw5wfhionb","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktota20019wsawabz35ncu"},{"post_id":"cjuktot9s000uwsawdl7w960v","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktota4001dwsawcidkqh8v"},{"post_id":"cjuktot9u000wwsawtuef5ugm","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktota5001gwsawfh4y7okx"},{"post_id":"cjuktot9w000zwsawup8u57xy","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktota7001kwsaw13n8l05t"},{"post_id":"cjuktot9y0011wsawfzg6gdjc","category_id":"cjuktot950004wsawdc1yv5mc","_id":"cjuktota9001mwsawz3g2hlq1"},{"post_id":"cjuktota00014wsawyfuz59xo","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktotab001owsaw6nkt5eie"},{"post_id":"cjuktota10017wsawz59wl9cv","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktotab001pwsawqzoy34ol"},{"post_id":"cjuktota3001bwsaw5xaatw5p","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktotac001rwsawcd5tb3mq"},{"post_id":"cjuktota4001ewsawqgm8eum2","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktotac001swsaw0h0zy0m0"},{"post_id":"cjuktota6001iwsawdfluhxcf","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktotad001vwsaw212itv9h"},{"post_id":"cjuktota7001lwsawppdru39l","category_id":"cjuktot9c0009wsawmw0gmjw3","_id":"cjuktotad001xwsawdrikccx8"}],"PostTag":[{"post_id":"cjuktot8y0001wsaw8qpvmj3h","tag_id":"cjuktot970005wsawcvj32qzt","_id":"cjuktot9f000bwsawjhr771zu"},{"post_id":"cjuktot930003wsawtyng55rp","tag_id":"cjuktot9e000awsawyq2kst0f","_id":"cjuktota00015wsawmlajukln"},{"post_id":"cjuktot930003wsawtyng55rp","tag_id":"cjuktot9j000gwsawqb2jsmra","_id":"cjuktota20018wsawxx9s44ma"},{"post_id":"cjuktot930003wsawtyng55rp","tag_id":"cjuktot9n000lwsawjuey2mfg","_id":"cjuktota3001cwsawsqw3g5pj"},{"post_id":"cjuktot930003wsawtyng55rp","tag_id":"cjuktot9q000rwsawnklbcqe6","_id":"cjuktota5001fwsawn998mw39"},{"post_id":"cjuktot930003wsawtyng55rp","tag_id":"cjuktot9v000xwsawwes0rqpo","_id":"cjuktota6001jwsawzmkgw0fo"},{"post_id":"cjuktot980006wsawens5ztiz","tag_id":"cjuktot9e000awsawyq2kst0f","_id":"cjuktotac001uwsawgz4fdirx"},{"post_id":"cjuktot980006wsawens5ztiz","tag_id":"cjuktot9j000gwsawqb2jsmra","_id":"cjuktotad001wwsawrwaovnc4"},{"post_id":"cjuktot980006wsawens5ztiz","tag_id":"cjuktot9n000lwsawjuey2mfg","_id":"cjuktotad001zwsawvk3qnxoc"},{"post_id":"cjuktot980006wsawens5ztiz","tag_id":"cjuktot9q000rwsawnklbcqe6","_id":"cjuktotae0020wsawney5i5kh"},{"post_id":"cjuktot980006wsawens5ztiz","tag_id":"cjuktot9v000xwsawwes0rqpo","_id":"cjuktotae0022wsawuadcx3zn"},{"post_id":"cjuktot9a0007wsawrc5kj5p3","tag_id":"cjuktotac001twsawbnswojr2","_id":"cjuktotae0023wsaw74j1lnyh"},{"post_id":"cjuktot9a0007wsawrc5kj5p3","tag_id":"cjuktotad001ywsawii0ewokh","_id":"cjuktotaf0025wsaw1647nwki"},{"post_id":"cjuktot9b0008wsaw5wfhionb","tag_id":"cjuktotae0021wsawk4mo0qkp","_id":"cjuktotaf0026wsawtobyv4nh"},{"post_id":"cjuktot9f000cwsawkdirt6xj","tag_id":"cjuktotae0024wsawaf7jhxcq","_id":"cjuktotag0028wsaw5biiayi9"},{"post_id":"cjuktot9i000dwsawianbqz47","tag_id":"cjuktotaf0027wsaw3r0degod","_id":"cjuktotag002awsawc4pf99n5"},{"post_id":"cjuktot9l000hwsawz3a53s07","tag_id":"cjuktotag0029wsawl48rn961","_id":"cjuktotai002ewsaw7ri2h3uo"},{"post_id":"cjuktot9l000hwsawz3a53s07","tag_id":"cjuktotah002bwsawgv2tf04v","_id":"cjuktotai002fwsawdxcqo0qu"},{"post_id":"cjuktot9l000hwsawz3a53s07","tag_id":"cjuktotah002cwsawvy52dvih","_id":"cjuktotai002hwsawh86joa7j"},{"post_id":"cjuktot9m000iwsawo4yp3zc9","tag_id":"cjuktotaf0027wsaw3r0degod","_id":"cjuktotaj002iwsawc1u5k6si"},{"post_id":"cjuktot9o000mwsawb7f1fqh2","tag_id":"cjuktotaf0027wsaw3r0degod","_id":"cjuktotaj002kwsawk486fsbs"},{"post_id":"cjuktot9p000owsawqc1y86nz","tag_id":"cjuktotaj002jwsawskalfrmh","_id":"cjuktotal002owsawo8pxz1jp"},{"post_id":"cjuktot9p000owsawqc1y86nz","tag_id":"cjuktotak002lwsawuyzs3yyz","_id":"cjuktotal002pwsawtqzt0lq8"},{"post_id":"cjuktot9p000owsawqc1y86nz","tag_id":"cjuktotak002mwsawmen0345e","_id":"cjuktotam002rwsawyiejtv9u"},{"post_id":"cjuktot9r000swsawmvknqub1","tag_id":"cjuktotak002nwsawhk4aw2qh","_id":"cjuktotam002swsawmgfzio7n"},{"post_id":"cjuktot9s000uwsawdl7w960v","tag_id":"cjuktotal002qwsaw1yzdl6sp","_id":"cjuktotao002uwsaw6zvyhzo2"},{"post_id":"cjuktot9u000wwsawtuef5ugm","tag_id":"cjuktotak002nwsawhk4aw2qh","_id":"cjuktotao002wwsawn7iiaped"},{"post_id":"cjuktot9w000zwsawup8u57xy","tag_id":"cjuktotao002vwsaw7s0iv0h9","_id":"cjuktotap002ywsawozehfq4m"},{"post_id":"cjuktot9y0011wsawfzg6gdjc","tag_id":"cjuktotap002xwsaw9fwammx9","_id":"cjuktotaq0031wsaweyioqaq9"},{"post_id":"cjuktot9y0011wsawfzg6gdjc","tag_id":"cjuktotap002zwsawj1epfacx","_id":"cjuktotaq0032wsawvr3732g0"},{"post_id":"cjuktota00014wsawyfuz59xo","tag_id":"cjuktotap0030wsaweva8rqsh","_id":"cjuktotau0037wsawbydl4ipo"},{"post_id":"cjuktota00014wsawyfuz59xo","tag_id":"cjuktotar0033wsawn8z791ek","_id":"cjuktotau0038wsaw75v25sfq"},{"post_id":"cjuktota00014wsawyfuz59xo","tag_id":"cjuktotas0034wsawgi3euhoq","_id":"cjuktotaw003awsawlgr8aj7d"},{"post_id":"cjuktota00014wsawyfuz59xo","tag_id":"cjuktotat0035wsaw4feviwqg","_id":"cjuktotax003bwsawuk76pan9"},{"post_id":"cjuktota10017wsawz59wl9cv","tag_id":"cjuktotat0036wsawix3ktzqk","_id":"cjuktotay003dwsawgcq36871"},{"post_id":"cjuktota3001bwsaw5xaatw5p","tag_id":"cjuktotak002nwsawhk4aw2qh","_id":"cjuktotay003ewsawyfnrh0dj"},{"post_id":"cjuktota4001ewsawqgm8eum2","tag_id":"cjuktotat0036wsawix3ktzqk","_id":"cjuktotaz003gwsaw30w1dn63"},{"post_id":"cjuktota6001iwsawdfluhxcf","tag_id":"cjuktotaz003fwsawin79e38y","_id":"cjuktotb0003jwsaw9s5n1m5v"},{"post_id":"cjuktota6001iwsawdfluhxcf","tag_id":"cjuktotaz003hwsaworkr4w0u","_id":"cjuktotb0003kwsaw926ctg25"},{"post_id":"cjuktota7001lwsawppdru39l","tag_id":"cjuktotb0003iwsawajc5dfb2","_id":"cjuktotb0003lwsaw5doro5m1"}],"Tag":[{"name":"hosts","_id":"cjuktot970005wsawcvj32qzt"},{"name":"canvas","_id":"cjuktot9e000awsawyq2kst0f"},{"name":"高斯模糊","_id":"cjuktot9j000gwsawqb2jsmra"},{"name":"灰度处理","_id":"cjuktot9n000lwsawjuey2mfg"},{"name":"反色","_id":"cjuktot9q000rwsawnklbcqe6"},{"name":"图像处理","_id":"cjuktot9v000xwsawwes0rqpo"},{"name":"impress","_id":"cjuktotac001twsawbnswojr2"},{"name":"js框架","_id":"cjuktotad001ywsawii0ewokh"},{"name":"bug","_id":"cjuktotae0021wsawk4mo0qkp"},{"name":"bug,jquery","_id":"cjuktotae0024wsawaf7jhxcq"},{"name":"移动端","_id":"cjuktotaf0027wsaw3r0degod"},{"name":"js","_id":"cjuktotag0029wsawl48rn961"},{"name":"继承","_id":"cjuktotah002bwsawgv2tf04v"},{"name":"面向对象","_id":"cjuktotah002cwsawvy52dvih"},{"name":"爬虫","_id":"cjuktotaj002jwsawskalfrmh"},{"name":"chrome应用","_id":"cjuktotak002lwsawuyzs3yyz"},{"name":"测试","_id":"cjuktotak002mwsawmen0345e"},{"name":"微信小程序","_id":"cjuktotak002nwsawhk4aw2qh"},{"name":"js动画","_id":"cjuktotal002qwsaw1yzdl6sp"},{"name":"react","_id":"cjuktotao002vwsaw7s0iv0h9"},{"name":"百度云","_id":"cjuktotap002xwsaw9fwammx9"},{"name":"汇编","_id":"cjuktotap002zwsawj1epfacx"},{"name":"数组","_id":"cjuktotap0030wsaweva8rqsh"},{"name":"Math","_id":"cjuktotar0033wsawn8z791ek"},{"name":"函数式编程","_id":"cjuktotas0034wsawgi3euhoq"},{"name":"原型链","_id":"cjuktotat0035wsaw4feviwqg"},{"name":"随想","_id":"cjuktotat0036wsawix3ktzqk"},{"name":"模式设计","_id":"cjuktotaz003fwsawin79e38y"},{"name":"读书笔记","_id":"cjuktotaz003hwsaworkr4w0u"},{"name":"ES6","_id":"cjuktotb0003iwsawajc5dfb2"}]}}