{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/README.rst","path":"README.rst","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.old.gif","path":"images/avatar.old.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/emotions/gsq.jpg","path":"images/emotions/gsq.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman1.jpg","path":"images/postman/postman1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman4.jpg","path":"images/postman/postman4.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman2.jpg","path":"images/postman/postman2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman5.jpg","path":"images/postman/postman5.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/moshi/moshi1.jpg","path":"images/moshi/moshi1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman6.jpg","path":"images/postman/postman6.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/moshi/moshi2.jpg","path":"images/moshi/moshi2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman7.jpg","path":"images/postman/postman7.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/postman/postman3.jpg","path":"images/postman/postman3.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample1.gif","path":"images/requestAnimationFrame/Animexample1.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu2.gif","path":"images/weixinxiaochenxu/weixinxiaochenxu2.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample2.gif","path":"images/requestAnimationFrame/Animexample2.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian1.png","path":"images/yuanxinglian/yuanxinglian1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian2.png","path":"images/yuanxinglian/yuanxinglian2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian3.png","path":"images/yuanxinglian/yuanxinglian3.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu1.png","path":"images/weixinxiaochenxu/weixinxiaochenxu1.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu3.gif","path":"images/weixinxiaochenxu/weixinxiaochenxu3.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu4.png","path":"images/weixinxiaochenxu/weixinxiaochenxu4.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/emotions/trxc.jpg","path":"images/emotions/trxc.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/es6/es6.png","path":"images/es6/es6.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1479806135304},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479806135304},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1479806135307},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479806135307},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1479806135307},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479806135308},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479806135308},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479806135308},{"_id":"themes/next/_config.yml","hash":"3c907fdea66b7fb8a4311baccbb35ecfff1fdbca","modified":1479806135309},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1479806135309},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1479806135309},{"_id":"source/_posts/js继承的方式和意义.md","hash":"b27ce0634b69f5f7d759dfa5b6944d836fbc5a59","modified":1479806135300},{"_id":"source/_posts/github以及github-page访问缓慢的解决办法.md","hash":"f71065d6cf406c6dad4547b576ff6c3ec4c90d81","modified":1480491176678},{"_id":"source/_posts/postman奇技淫巧.md","hash":"d189948fe1ab08e19bcb13daba0aeb95d985880b","modified":1479806135300},{"_id":"source/_posts/requestAnimationFrame-动画-一.md","hash":"125a47ba775df2bf64b758b621992d83a9d5db1c","modified":1479806135301},{"_id":"source/_posts/函数式编程-用自带的js原型链方法解决问题.md","hash":"5538c04dbc3a8d71f0c490d8510177dbe7ae4d01","modified":1479806135302},{"_id":"source/_posts/用脚本锁住百度云下载加速倒计时-从而实现无限加速.md","hash":"f27a602a19affd6149ac07a5c39649379eccdef0","modified":1483664617008},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1479806135322},{"_id":"source/_posts/关于博客内容的想法.md","hash":"0ac2ca6b279ac30ae8742ee1a845f055754816cb","modified":1479806135301},{"_id":"source/_posts/第一篇博客.md","hash":"f013ec3f166cf589f9b447558759c0db64d54026","modified":1479806135303},{"_id":"source/_posts/读书笔记-单例模式.md","hash":"6ef61f918cea21f3b3244d3f7c8f8063d30f2657","modified":1479806135303},{"_id":"source/tags/index.md","hash":"2c95031ab8e4fde14d4115d656346917ad03bcac","modified":1479806135304},{"_id":"source/categories/index.md","hash":"8943054d91f0550ba6a01cdd1a530640a737f03f","modified":1479806135303},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479806135305},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479806135305},{"_id":"source/_posts/impress简易教程.md","hash":"ef44d9c826f4df3a51dd7ec43af0c98a33dda85f","modified":1482462532134},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1479806135309},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1479806135309},{"_id":"source/_posts/ES6新特性初探.md","hash":"4cfba96e821b2ec803deb822fc82059491f0951c","modified":1480557518649},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1479806135310},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1479806135310},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1479806135310},{"_id":"source/_posts/深入理解微信小程序.md","hash":"9a64e37c8f7308aa6f350a246bc0ecc75b865bdc","modified":1479949927791},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1479806135310},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1479806135311},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1479806135310},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1479806135311},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1479806135311},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1479806135311},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1479806135311},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479806135321},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479806135321},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1479806135321},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479806135321},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479806135322},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479806135321},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479806135321},{"_id":"themes/next/source/README.rst","hash":"31862be68404927cc7db07dd44a78aa4c0c3725f","modified":1479806135323},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1479806135383},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135346},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1479806135313},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479806135313},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1479806135313},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1479806135314},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479806135314},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1479806135314},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479806135312},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1479806135314},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1479806135312},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479806135312},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1479806135313},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1479806135316},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479806135316},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479806135316},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1479806135312},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479806135383},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479806135383},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479806135322},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1479806135322},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479806135323},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479806135345},{"_id":"themes/next/source/images/avatar.old.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479806135346},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479806135347},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479806135347},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479806135347},{"_id":"themes/next/source/images/avatar.gif","hash":"390b708822e6db7f497a895befebc2d21fb6bf80","modified":1479806135346},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479806135348},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479806135350},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479806135348},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479806135348},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479806135348},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479806135351},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479806135353},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479806135354},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479806135354},{"_id":"themes/next/source/favicon.ico","hash":"7fd8ec7f4eabae2e3f7ac4f481a26f1a4f0d0b95","modified":1479806135345},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135317},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135317},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479806135320},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135337},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135337},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135344},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135338},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479806135345},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1479806135315},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479806135314},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1479806135315},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479806135315},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479806135315},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479806135315},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479806135315},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1479806135317},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479806135316},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1479806135320},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1479806135320},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479806135320},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479806135317},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479806135317},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479806135337},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479806135344},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479806135337},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1479806135344},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1479806135345},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479806135337},{"_id":"themes/next/source/images/emotions/gsq.jpg","hash":"664cf9f97e9eac82f313413230e4df29e3649d2d","modified":1479806135350},{"_id":"themes/next/source/images/postman/postman1.jpg","hash":"1367e20300950d7fb4d183f584d61ad50f75a22f","modified":1479806135351},{"_id":"themes/next/source/images/postman/postman4.jpg","hash":"0a84db8cb14fc2d2a18f6377d09809488e9cae01","modified":1479806135352},{"_id":"themes/next/source/images/postman/postman2.jpg","hash":"4532b64ae150d1862e2ff6d0f052c9258bbd6243","modified":1479806135352},{"_id":"themes/next/source/images/postman/postman5.jpg","hash":"8453395bd7ffb261db0f09370bf324470ade429d","modified":1479806135352},{"_id":"themes/next/source/images/moshi/moshi1.jpg","hash":"962c7b22f42cbf5554e7dffb59cf39983b7286f6","modified":1479806135350},{"_id":"themes/next/source/images/postman/postman6.jpg","hash":"77f7ab635d55bf7da3d12e62d5c20410b7f8ae88","modified":1479806135353},{"_id":"themes/next/source/images/moshi/moshi2.jpg","hash":"caf8b913af5daf45a6c9038b5caded01033906d1","modified":1479806135351},{"_id":"themes/next/source/images/postman/postman7.jpg","hash":"8659bd414c9d250b4e4ebbf28192ddaf35c661b1","modified":1479806135353},{"_id":"themes/next/source/images/postman/postman3.jpg","hash":"8a92c363dae150c35275e068961a0155156b2f92","modified":1479806135352},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample1.gif","hash":"12235bda6bba2afdd42c19a154d59d5f3176e835","modified":1479806135354},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu2.gif","hash":"f9365cc48749cb60791ddfb611eb8097f9087f7f","modified":1479869204668},{"_id":"themes/next/source/images/requestAnimationFrame/Animexample2.gif","hash":"24a567b42bc0d67378877059457788203cfc42f6","modified":1479806135354},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian1.png","hash":"700e91578ab8895241df9ac54765a46a9f0ab18e","modified":1479806135355},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian2.png","hash":"92d95e36b79f45564411e84db1dd8a3fe15caf99","modified":1479806135355},{"_id":"themes/next/source/images/yuanxinglian/yuanxinglian3.png","hash":"d8909352164449224f0c8a0e454773a35be44530","modified":1479806135355},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479806135356},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479806135356},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479806135356},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479806135356},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479806135357},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479806135357},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1479806135357},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479806135363},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu1.png","hash":"be3aa9a8c0a14d9f3f2da1abe9508be009f1bc36","modified":1479868353036},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479806135363},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479806135364},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479806135363},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1479806135365},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479806135365},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu3.gif","hash":"418ca361aa44751242918299e8e41913aad08751","modified":1479869996692},{"_id":"themes/next/source/images/weixinxiaochenxu/weixinxiaochenxu4.png","hash":"ce0a235b492613d866dfbd687866838def2df63b","modified":1479871490144},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479806135377},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479806135376},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479806135377},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479806135376},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479806135378},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479806135379},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479806135378},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479806135379},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479806135375},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479806135382},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479806135382},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479806135382},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1479806135318},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1479806135319},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479806135319},{"_id":"themes/next/source/images/emotions/trxc.jpg","hash":"17430632ea12008b4ba90f3da36c43f24966b2d4","modified":1480487029306},{"_id":"themes/next/source/images/es6/es6.png","hash":"c56f13d3d77132716bc2c8b040f1bdf8b626a5a1","modified":1480484365075},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479806135336},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479806135336},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479806135323},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479806135336},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479806135324},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479806135336},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479806135336},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479806135323},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479806135332},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479806135335},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479806135338},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479806135338},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479806135338},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479806135339},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479806135344},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1479806135342},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479806135343},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479806135343},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479806135344},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479806135357},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479806135359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479806135359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479806135360},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1479806135362},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1479806135363},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479806135364},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479806135364},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1479806135362},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1479806135366},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479806135366},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1479806135368},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479806135376},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1479806135375},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479806135378},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479806135378},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1479806135369},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1479806135370},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1479806135380},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1479806135374},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479806135324},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479806135325},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479806135327},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479806135328},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479806135331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479806135332},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479806135332},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479806135333},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479806135330},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479806135335},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479806135333},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1479806135335},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479806135334},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1479806135335},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479806135341},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479806135341},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1479806135325},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479806135342},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1479806135326},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479806135334},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1479806135361},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1479806135362},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1479806135374},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1479806135372},{"_id":"public/search.xml","hash":"203086de3b83ddecd52bfce662ef1a922526afe2","modified":1483664638705},{"_id":"public/atom.xml","hash":"c09f32764d30dfbf902aa1f050abc9129e55b782","modified":1483664638720},{"_id":"public/sitemap.xml","hash":"8f268595881894ee94c756591db030e31dca51fd","modified":1483664638720},{"_id":"public/categories/index.html","hash":"8837375e144ef621f283a2825f7b9fc52bd49d29","modified":1483664638814},{"_id":"public/tags/index.html","hash":"1af6ea23554c816cdbb7b7743da73a44c29dc32d","modified":1483664638814},{"_id":"public/2016/12/23/impress简易教程/index.html","hash":"8014aaee971aefb8c0bc21afb51bfb43f0e863f5","modified":1483664638814},{"_id":"public/2016/11/30/github以及github-page访问缓慢的解决办法/index.html","hash":"a27ec1e36077da6779adcb10f675b8638bbcc8dc","modified":1483664638814},{"_id":"public/2016/11/30/ES6新特性初探/index.html","hash":"4b24ccd0d0e8aa3546d668bd340c5db975d1b0c8","modified":1483664638814},{"_id":"public/2016/10/26/js继承的方式和意义/index.html","hash":"4c32ab968b389c62c07e2dbf355f70a1104e9dc9","modified":1483664638814},{"_id":"public/2016/10/24/关于博客内容的想法/index.html","hash":"a0274951d86b522de54013f8a44c490588b1c56d","modified":1483664638814},{"_id":"public/2016/11/22/深入理解微信小程序/index.html","hash":"0f5904d40e99ba34a2ecd33817caa79efa91747e","modified":1483664638814},{"_id":"public/2016/10/22/postman奇技淫巧/index.html","hash":"4f899e790ff7eb67b8d670a4e16e2bb7b33d9b9e","modified":1483664638814},{"_id":"public/2016/10/21/requestAnimationFrame-动画-一/index.html","hash":"dff00ed16cec10327c1cd5add99c3e28d43ddce4","modified":1483664638814},{"_id":"public/2016/10/18/第一篇博客/index.html","hash":"5cb9f400f2930e23fc1c4066557ac486ba2130bb","modified":1483664638814},{"_id":"public/archives/index.html","hash":"1c84ffdc99c76a5d87ce41823b145f44ad21aaea","modified":1483664638814},{"_id":"public/archives/page/2/index.html","hash":"7c9e91871e56b0988b6c7da4e0f985f527172f25","modified":1483664638814},{"_id":"public/archives/2016/index.html","hash":"90ecac16dd082734e21a7ed6231c0020e0ee1d50","modified":1483664638814},{"_id":"public/archives/2016/page/2/index.html","hash":"c079cf80ca16b3c15969e3774cb496c78f74981e","modified":1483664638814},{"_id":"public/archives/2016/10/index.html","hash":"85e202b6d11e49ea83b13c3eef5ca0964b7ae630","modified":1483664638814},{"_id":"public/archives/2016/11/index.html","hash":"3d0e0cc241abaedfa894fbf1f2e0b033f02725d8","modified":1483664638814},{"_id":"public/2016/10/24/读书笔记-单例模式/index.html","hash":"d0a7c599c7d313beac707862da5aec3aaea73a67","modified":1483664638814},{"_id":"public/archives/2016/12/index.html","hash":"50b4692c37515d6a1b9a39ae5876cb7045337990","modified":1483664638814},{"_id":"public/categories/博客/index.html","hash":"c48ce8288cfbdc718a960ce54ab5b74b5c6d7eab","modified":1483664638814},{"_id":"public/categories/工具/index.html","hash":"a44575e394347b3cc72c50b132ba7c51b78e614c","modified":1483664638814},{"_id":"public/index.html","hash":"f4a90b3cf76f0f9592bfba8f69f2dbbeee43c70c","modified":1483664638814},{"_id":"public/page/2/index.html","hash":"d055a2f141203420373f19c1dd6b94d825c664fb","modified":1483664638814},{"_id":"public/tags/js/index.html","hash":"fbf8fdcb8f139bc85b73f764cb1c8a31c6a61f1b","modified":1483664638814},{"_id":"public/tags/继承/index.html","hash":"aff758728b7bb2608dddc37d3cb035c25e4143be","modified":1483664638814},{"_id":"public/tags/面向对象/index.html","hash":"2ab2cb24387ee1b510b623cf716585c4b883b61b","modified":1483664638814},{"_id":"public/tags/hosts/index.html","hash":"bc7134a5845f47ef5a4e40c158f7cef6ba72ddde","modified":1483664638814},{"_id":"public/2016/10/23/函数式编程-用自带的js原型链方法解决问题/index.html","hash":"0972906d32f69b620ff5c36f5b60dd1e95156e65","modified":1483664638814},{"_id":"public/tags/爬虫/index.html","hash":"d9a43304b518f5e3618e11ba8b31591a4d4830cf","modified":1483664638814},{"_id":"public/tags/chrome应用/index.html","hash":"eb79b3c0428521f065675fbada7144001bd4ce7b","modified":1483664638814},{"_id":"public/tags/测试/index.html","hash":"9f525195e24717717b3e8f74a0aa247b2d459aa3","modified":1483664638814},{"_id":"public/tags/数组/index.html","hash":"0bd5c3c8eabbfcfc4a9bf15f795c4b68ac10e5b0","modified":1483664638814},{"_id":"public/tags/Math/index.html","hash":"26cedea675b795fc74c7eb74cdde5b149cc73449","modified":1483664638814},{"_id":"public/tags/函数式编程/index.html","hash":"37f292c141c58fd9feb313f2c48561c6963601e9","modified":1483664638814},{"_id":"public/tags/原型链/index.html","hash":"5752767f90f7ef098d20ba493f4d85dd9a3c244d","modified":1483664638814},{"_id":"public/tags/js动画/index.html","hash":"bc8f54391a26ce601c846be347815c7cf6667e0a","modified":1483664638814},{"_id":"public/tags/随想/index.html","hash":"a8bd50615cffdf0822aca24969f31db56e2e9759","modified":1483664638814},{"_id":"public/tags/模式设计/index.html","hash":"3b535cf632c2c3c17ca719dbcd7cb07e87542528","modified":1483664638814},{"_id":"public/tags/读书笔记/index.html","hash":"f9d57392e11319e755bfaa50615ac0305443e6be","modified":1483664638814},{"_id":"public/tags/impress/index.html","hash":"493a693349dc4405b823b5b74d90ed87fa13b1fb","modified":1483664638814},{"_id":"public/tags/js框架/index.html","hash":"346394f7f6d546bb064f2a378cc33ea336ba82ec","modified":1483664638814},{"_id":"public/tags/ES6/index.html","hash":"cb819a76532c445a02f47b4c567cb911a2142bb3","modified":1483664638814},{"_id":"public/tags/微信小程序/index.html","hash":"7562ba48b77144ef7e978022126c11c5576e702a","modified":1483664638814},{"_id":"public/2017/01/06/用脚本锁住百度云下载加速倒计时-从而实现无限加速/index.html","hash":"037ea0c42afd33e045b48e735cf0a927e877b6db","modified":1483664638814},{"_id":"public/archives/2017/01/index.html","hash":"24fc883b2e2d212a6689cd0808a40a16573c806c","modified":1483664638814},{"_id":"public/archives/2017/index.html","hash":"764c46c2c9f0e1fe9f9c3f809269fe84b2cd0387","modified":1483664638814},{"_id":"public/README.rst","hash":"31862be68404927cc7db07dd44a78aa4c0c3725f","modified":1483664638814},{"_id":"public/images/avatar.old.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1483664638814},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1483664638814},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1483664638814},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1483664638814},{"_id":"public/images/avatar.gif","hash":"390b708822e6db7f497a895befebc2d21fb6bf80","modified":1483664638814},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483664638814},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1483664638814},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1483664638814},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1483664638814},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1483664638814},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483664638814},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1483664638814},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1483664638814},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1483664638814},{"_id":"public/images/emotions/gsq.jpg","hash":"664cf9f97e9eac82f313413230e4df29e3649d2d","modified":1483664638814},{"_id":"public/images/postman/postman1.jpg","hash":"1367e20300950d7fb4d183f584d61ad50f75a22f","modified":1483664638814},{"_id":"public/images/postman/postman4.jpg","hash":"0a84db8cb14fc2d2a18f6377d09809488e9cae01","modified":1483664638814},{"_id":"public/images/postman/postman2.jpg","hash":"4532b64ae150d1862e2ff6d0f052c9258bbd6243","modified":1483664638814},{"_id":"public/images/postman/postman6.jpg","hash":"77f7ab635d55bf7da3d12e62d5c20410b7f8ae88","modified":1483664638814},{"_id":"public/images/postman/postman5.jpg","hash":"8453395bd7ffb261db0f09370bf324470ade429d","modified":1483664638814},{"_id":"public/images/moshi/moshi1.jpg","hash":"962c7b22f42cbf5554e7dffb59cf39983b7286f6","modified":1483664638814},{"_id":"public/images/moshi/moshi2.jpg","hash":"caf8b913af5daf45a6c9038b5caded01033906d1","modified":1483664638814},{"_id":"public/images/postman/postman3.jpg","hash":"8a92c363dae150c35275e068961a0155156b2f92","modified":1483664638814},{"_id":"public/images/postman/postman7.jpg","hash":"8659bd414c9d250b4e4ebbf28192ddaf35c661b1","modified":1483664638814},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu2.gif","hash":"f9365cc48749cb60791ddfb611eb8097f9087f7f","modified":1483664638814},{"_id":"public/images/requestAnimationFrame/Animexample1.gif","hash":"12235bda6bba2afdd42c19a154d59d5f3176e835","modified":1483664638814},{"_id":"public/images/requestAnimationFrame/Animexample2.gif","hash":"24a567b42bc0d67378877059457788203cfc42f6","modified":1483664638814},{"_id":"public/images/yuanxinglian/yuanxinglian3.png","hash":"d8909352164449224f0c8a0e454773a35be44530","modified":1483664638814},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1483664638814},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu1.png","hash":"be3aa9a8c0a14d9f3f2da1abe9508be009f1bc36","modified":1483664638814},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1483664638814},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu4.png","hash":"ce0a235b492613d866dfbd687866838def2df63b","modified":1483664638814},{"_id":"public/images/weixinxiaochenxu/weixinxiaochenxu3.gif","hash":"418ca361aa44751242918299e8e41913aad08751","modified":1483664638814},{"_id":"public/images/yuanxinglian/yuanxinglian2.png","hash":"92d95e36b79f45564411e84db1dd8a3fe15caf99","modified":1483664638814},{"_id":"public/images/emotions/trxc.jpg","hash":"17430632ea12008b4ba90f3da36c43f24966b2d4","modified":1483664638814},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483664638814},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483664638814},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483664638814},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483664638814},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483664638814},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483664638814},{"_id":"public/images/yuanxinglian/yuanxinglian1.png","hash":"700e91578ab8895241df9ac54765a46a9f0ab18e","modified":1483664638814},{"_id":"public/images/es6/es6.png","hash":"c56f13d3d77132716bc2c8b040f1bdf8b626a5a1","modified":1483664638814},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1483664640670},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1483664640670},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483664640670},{"_id":"public/favicon.ico","hash":"7fd8ec7f4eabae2e3f7ac4f481a26f1a4f0d0b95","modified":1483664640670},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1483664640670},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1483664640670},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1483664640670},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1483664640670},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1483664640670},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1483664640670},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1483664640670},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1483664640670},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1483664640670},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1483664640670},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1483664640670},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1483664640670},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1483664640670},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1483664640670},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1483664640670},{"_id":"public/css/main.css","hash":"1b810cccfa905ef58175a2955fcbf5022fdff4d4","modified":1483664640670},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1483664640670},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1483664640670},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1483664640670},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1483664640670},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1483664640670},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1483664640686},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1483664640686},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1483664640686},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483664640686},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1483664640686},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1483664640686},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1483664640686},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483664640686},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483664640686},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483664640686},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483664640686},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483664640686},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1483664640686},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1483664640686},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483664640686},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1483664640686},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483664640686},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1483664640686},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1483664640686},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1483664640686},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1483664640686}],"Category":[{"name":"博客","_id":"cixl3m87f00046waw990exaik"},{"name":"工具","_id":"cixl3m87v00096wawxf2sf86x"}],"Data":[],"Page":[{"title":"categories","date":"2016-10-18T13:49:39.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-10-18 21:49:39\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-22T09:15:35.303Z","path":"categories/index.html","layout":"page","_id":"cixl3m87f00016waw1ralgu3i","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-10-18T13:48:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-18 21:48:19\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-22T09:15:35.304Z","path":"tags/index.html","layout":"page","_id":"cixl3m87f00036wawkpyawbls","content":"","excerpt":"","more":""}],"Post":[{"title":"js继承的方式和意义","date":"2016-10-26T11:01:29.000Z","_content":"在写这篇博客的时候，我就做好了撕逼的准备\n<!-- more -->\njs是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。\njs是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。\n在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法\n> 1.使用对象冒充实现继承\n> 2.采用call方法改变函数上下文实现继承\n> 3.采用Apply方法改变函数上下文实现继承\n> 4.采用原型链的方式实现继承\n> 5.采用混合模式实现继承\n\n具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。\n但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即\n1.原型链继承\n2.构造器继承\n3.原型链和构造器混用继承\n\n让我们一点点深入，来慢慢了解，为什么我说只有三种方法\n# 原型链继承\n原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？\n举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱\n如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱\n如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱\n咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事\n在这个实例中，我们能看到的就是职责链模式，就是\n消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它\n\n原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object\n> 这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object\n> Object的原型链是null\n\n![原型链](/images/yuanxinglian/yuanxinglian1.png)\n原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。\n如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。\n举个例子\n```\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nvar child = new Child;\nchild.sayHello()\t//输出hello parent\n```\n我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况\n```\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nChild.prototype.sayHello = function() {\n\tconsole.log('hello child')\n};\nvar child = new Child;\nchild.sayHello()\t//输出hello child\nchild.constructor.prototype.sayHello()\t//输出hello parent\n```\n我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。\n# 构造器继承\njs函数可以被当作构造器使用，通过返回的对象完成构造\n如果没有指定返回一个对象，默认返回的是this\n举个例子\n```\nfunction Parent() {\n\tthis.name = 'parent'\n}\nvar parent = new Parent\nconsole.log(parent.name)\t//输出parent\n\nfunction AnotherParent() {\n\tthis.name = 'parent'\n\tvar obj = {name:'hahaha'};\n\treturn obj;\n}\nvar anotherparent = new AnotherParent;\nconsole.log(anotherparent.name) \t//输出hahaha\n```\n而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标\n让我们来实现一个构造器继承\n```\nfunction Parent() {\n\tthis.name = 'parent'\n}\nfunction Child() {\n\tvar parent = Parent.bind(this); \t//将执行环境绑定到Child来\n\tparent();\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name) \t//输出parent\nconsole.log(child.age) \t\t//输出10\n```\n是不是很简单？其实这一段的代码和下面这段代码是一样的\n```\nfunction Child() {\n\tthis.name = 'parent';\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name)\nconsole.log(child.age)\n```\n这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承\n可以看看网上给的例子\n```\n//1.使用对象冒充实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n    this.parent=Parent;  \n    this.parent(firstname);  //实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样\n    delete this.parent;  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n}  \nvar mychild=new Child(\"李\");  \nmychild.saySomeThing();  \n\n// 2.采用call方法改变函数上下文实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n   this.getName=function()  \n   {  \n       return firstname;  \n   }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.call(child,child.getName());  // call只是借用罢了,作用的对象还是child,原理还是构造器继承\nchild.saySomeThing(); \n\n// 3.采用Apply方法改变函数上下文实现继承 \nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n    this.getName=function()  \n    {  \n        return firstname;  \n    }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.apply(child,[child.getName()]);  //???换个函数就能算一种了???\nchild.saySomeThing();  \n```\n我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种\n（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）\n# 关于混合继承的吐槽\n如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。\n# 意义以及优缺点\n\n先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的\n\n## 原型链继承的意义以及优缺点\n我们来看这样的一段代码\n```\nfunction Parent() {}\nParent.prototype = {\n\ttestArray:[1,2,3]\n};\nfunction Child() {}\nChild.prototype = new Parent;\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3, 4]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中\n所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。\n同时，如果判断一下\n![原型链](/images/yuanxinglian/yuanxinglian2.png)\n结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点\n\n## 构造器继承的意义以及优缺点\n继续看一个例子\n```\nfunction Parent() {\n\tthis.testArray = [1,2,3]\n}\nfunction Child() {\n\tvar parent = Parent.bind(this)\n}\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n和原型链不同的是，构造器的继承都是独立的互不影响\n查看一下类型\n![原型链](/images/yuanxinglian/yuanxinglian3.png)\n很准确的判断出来了类型\n\n## 混合继承的意义以及优缺点\n混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象\n原型链因为他的特殊性，还可以用原来进行共享对象的数据交换\n好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现","source":"_posts/js继承的方式和意义.md","raw":"---\ntitle: js继承的方式和意义\ndate: 2016-10-26 19:01:29\ncategories: [博客]\ntags: [js,继承,面向对象]\n---\n在写这篇博客的时候，我就做好了撕逼的准备\n<!-- more -->\njs是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。\njs是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。\n在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法\n> 1.使用对象冒充实现继承\n> 2.采用call方法改变函数上下文实现继承\n> 3.采用Apply方法改变函数上下文实现继承\n> 4.采用原型链的方式实现继承\n> 5.采用混合模式实现继承\n\n具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。\n但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即\n1.原型链继承\n2.构造器继承\n3.原型链和构造器混用继承\n\n让我们一点点深入，来慢慢了解，为什么我说只有三种方法\n# 原型链继承\n原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？\n举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱\n如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱\n如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱\n咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事\n在这个实例中，我们能看到的就是职责链模式，就是\n消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它\n\n原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object\n> 这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object\n> Object的原型链是null\n\n![原型链](/images/yuanxinglian/yuanxinglian1.png)\n原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。\n如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。\n举个例子\n```\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nvar child = new Child;\nchild.sayHello()\t//输出hello parent\n```\n我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况\n```\nfunction Parent() {}\nParent.prototype.sayHello = function() {\n\tconsole.log('hello parent')\n}\n\nfunction Child() {}\nChild.prototype = new Parent;\nChild.prototype.sayHello = function() {\n\tconsole.log('hello child')\n};\nvar child = new Child;\nchild.sayHello()\t//输出hello child\nchild.constructor.prototype.sayHello()\t//输出hello parent\n```\n我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。\n# 构造器继承\njs函数可以被当作构造器使用，通过返回的对象完成构造\n如果没有指定返回一个对象，默认返回的是this\n举个例子\n```\nfunction Parent() {\n\tthis.name = 'parent'\n}\nvar parent = new Parent\nconsole.log(parent.name)\t//输出parent\n\nfunction AnotherParent() {\n\tthis.name = 'parent'\n\tvar obj = {name:'hahaha'};\n\treturn obj;\n}\nvar anotherparent = new AnotherParent;\nconsole.log(anotherparent.name) \t//输出hahaha\n```\n而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标\n让我们来实现一个构造器继承\n```\nfunction Parent() {\n\tthis.name = 'parent'\n}\nfunction Child() {\n\tvar parent = Parent.bind(this); \t//将执行环境绑定到Child来\n\tparent();\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name) \t//输出parent\nconsole.log(child.age) \t\t//输出10\n```\n是不是很简单？其实这一段的代码和下面这段代码是一样的\n```\nfunction Child() {\n\tthis.name = 'parent';\n\tthis.age = 10;\n}\nvar child = new Child;\nconsole.log(child.name)\nconsole.log(child.age)\n```\n这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承\n可以看看网上给的例子\n```\n//1.使用对象冒充实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n    this.parent=Parent;  \n    this.parent(firstname);  //实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样\n    delete this.parent;  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n}  \nvar mychild=new Child(\"李\");  \nmychild.saySomeThing();  \n\n// 2.采用call方法改变函数上下文实现继承\nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n   this.getName=function()  \n   {  \n       return firstname;  \n   }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.call(child,child.getName());  // call只是借用罢了,作用的对象还是child,原理还是构造器继承\nchild.saySomeThing(); \n\n// 3.采用Apply方法改变函数上下文实现继承 \nfunction Parent(firstname)  \n{  \n    this.fname=firstname;  \n    this.age=40;  \n    this.sayAge=function()  \n    {  \n        console.log(this.age);  \n    }  \n}  \nfunction Child(firstname)  \n{  \n  \n    this.saySomeThing=function()  \n    {  \n        console.log(this.fname);  \n        this.sayAge();  \n    }  \n    this.getName=function()  \n    {  \n        return firstname;  \n    }  \n  \n}  \nvar child=new Child(\"张\");  \nParent.apply(child,[child.getName()]);  //???换个函数就能算一种了???\nchild.saySomeThing();  \n```\n我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种\n（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）\n# 关于混合继承的吐槽\n如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。\n# 意义以及优缺点\n\n先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的\n\n## 原型链继承的意义以及优缺点\n我们来看这样的一段代码\n```\nfunction Parent() {}\nParent.prototype = {\n\ttestArray:[1,2,3]\n};\nfunction Child() {}\nChild.prototype = new Parent;\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3, 4]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中\n所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。\n同时，如果判断一下\n![原型链](/images/yuanxinglian/yuanxinglian2.png)\n结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点\n\n## 构造器继承的意义以及优缺点\n继续看一个例子\n```\nfunction Parent() {\n\tthis.testArray = [1,2,3]\n}\nfunction Child() {\n\tvar parent = Parent.bind(this)\n}\nvar child1 = new Child;\nvar child2 = new Child;\n\nchild1.testArray.push(4)\n\nconsole.log(child1.testArray) \t//输出[1, 2, 3]\nconsole.log(child2.testArray) \t//输出[1, 2, 3, 4]\n```\n和原型链不同的是，构造器的继承都是独立的互不影响\n查看一下类型\n![原型链](/images/yuanxinglian/yuanxinglian3.png)\n很准确的判断出来了类型\n\n## 混合继承的意义以及优缺点\n混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象\n原型链因为他的特殊性，还可以用原来进行共享对象的数据交换\n好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现","slug":"js继承的方式和意义","published":1,"updated":"2016-11-22T09:15:35.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87f00006waw0sc7cmxn","content":"<p>在写这篇博客的时候，我就做好了撕逼的准备<br><a id=\"more\"></a><br>js是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。<br>js是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。<br>在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法</p>\n<blockquote>\n<p>1.使用对象冒充实现继承<br>2.采用call方法改变函数上下文实现继承<br>3.采用Apply方法改变函数上下文实现继承<br>4.采用原型链的方式实现继承<br>5.采用混合模式实现继承</p>\n</blockquote>\n<p>具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。<br>但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即<br>1.原型链继承<br>2.构造器继承<br>3.原型链和构造器混用继承</p>\n<p>让我们一点点深入，来慢慢了解，为什么我说只有三种方法</p>\n<h1 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h1><p>原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？<br>举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱<br>如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱<br>如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱<br>咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事<br>在这个实例中，我们能看到的就是职责链模式，就是<br>消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它</p>\n<p>原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object</p>\n<blockquote>\n<p>这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object<br>Object的原型链是null</p>\n</blockquote>\n<p><img src=\"/images/yuanxinglian/yuanxinglian1.png\" alt=\"原型链\"><br>原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。<br>如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。<br>举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;&#125;</div><div class=\"line\">Parent.prototype.sayHello = function() &#123;</div><div class=\"line\">\tconsole.log(&apos;hello parent&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Child() &#123;&#125;</div><div class=\"line\">Child.prototype = new Parent;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">child.sayHello()\t//输出hello parent</div></pre></td></tr></table></figure></p>\n<p>我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;&#125;</div><div class=\"line\">Parent.prototype.sayHello = function() &#123;</div><div class=\"line\">\tconsole.log(&apos;hello parent&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Child() &#123;&#125;</div><div class=\"line\">Child.prototype = new Parent;</div><div class=\"line\">Child.prototype.sayHello = function() &#123;</div><div class=\"line\">\tconsole.log(&apos;hello child&apos;)</div><div class=\"line\">&#125;;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">child.sayHello()\t//输出hello child</div><div class=\"line\">child.constructor.prototype.sayHello()\t//输出hello parent</div></pre></td></tr></table></figure></p>\n<p>我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。</p>\n<h1 id=\"构造器继承\"><a href=\"#构造器继承\" class=\"headerlink\" title=\"构造器继承\"></a>构造器继承</h1><p>js函数可以被当作构造器使用，通过返回的对象完成构造<br>如果没有指定返回一个对象，默认返回的是this<br>举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">var parent = new Parent</div><div class=\"line\">console.log(parent.name)\t//输出parent</div><div class=\"line\"></div><div class=\"line\">function AnotherParent() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;</div><div class=\"line\">\tvar obj = &#123;name:&apos;hahaha&apos;&#125;;</div><div class=\"line\">\treturn obj;</div><div class=\"line\">&#125;</div><div class=\"line\">var anotherparent = new AnotherParent;</div><div class=\"line\">console.log(anotherparent.name) \t//输出hahaha</div></pre></td></tr></table></figure></p>\n<p>而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标<br>让我们来实现一个构造器继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">function Child() &#123;</div><div class=\"line\">\tvar parent = Parent.bind(this); \t//将执行环境绑定到Child来</div><div class=\"line\">\tparent();</div><div class=\"line\">\tthis.age = 10;</div><div class=\"line\">&#125;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">console.log(child.name) \t//输出parent</div><div class=\"line\">console.log(child.age) \t\t//输出10</div></pre></td></tr></table></figure></p>\n<p>是不是很简单？其实这一段的代码和下面这段代码是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Child() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;;</div><div class=\"line\">\tthis.age = 10;</div><div class=\"line\">&#125;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">console.log(child.name)</div><div class=\"line\">console.log(child.age)</div></pre></td></tr></table></figure></p>\n<p>这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承<br>可以看看网上给的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.使用对象冒充实现继承</div><div class=\"line\">function Parent(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.fname=firstname;  </div><div class=\"line\">    this.age=40;  </div><div class=\"line\">    this.sayAge=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.age);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">function Child(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.parent=Parent;  </div><div class=\"line\">    this.parent(firstname);  //实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样</div><div class=\"line\">    delete this.parent;  </div><div class=\"line\">    this.saySomeThing=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.fname);  </div><div class=\"line\">        this.sayAge();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">var mychild=new Child(&quot;李&quot;);  </div><div class=\"line\">mychild.saySomeThing();  </div><div class=\"line\"></div><div class=\"line\">// 2.采用call方法改变函数上下文实现继承</div><div class=\"line\">function Parent(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.fname=firstname;  </div><div class=\"line\">    this.age=40;  </div><div class=\"line\">    this.sayAge=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.age);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">function Child(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">  </div><div class=\"line\">    this.saySomeThing=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.fname);  </div><div class=\"line\">        this.sayAge();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   this.getName=function()  </div><div class=\"line\">   &#123;  </div><div class=\"line\">       return firstname;  </div><div class=\"line\">   &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\">var child=new Child(&quot;张&quot;);  </div><div class=\"line\">Parent.call(child,child.getName());  // call只是借用罢了,作用的对象还是child,原理还是构造器继承</div><div class=\"line\">child.saySomeThing(); </div><div class=\"line\"></div><div class=\"line\">// 3.采用Apply方法改变函数上下文实现继承 </div><div class=\"line\">function Parent(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.fname=firstname;  </div><div class=\"line\">    this.age=40;  </div><div class=\"line\">    this.sayAge=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.age);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">function Child(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">  </div><div class=\"line\">    this.saySomeThing=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.fname);  </div><div class=\"line\">        this.sayAge();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    this.getName=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        return firstname;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\">var child=new Child(&quot;张&quot;);  </div><div class=\"line\">Parent.apply(child,[child.getName()]);  //???换个函数就能算一种了???</div><div class=\"line\">child.saySomeThing();</div></pre></td></tr></table></figure></p>\n<p>我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种<br>（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）</p>\n<h1 id=\"关于混合继承的吐槽\"><a href=\"#关于混合继承的吐槽\" class=\"headerlink\" title=\"关于混合继承的吐槽\"></a>关于混合继承的吐槽</h1><p>如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。</p>\n<h1 id=\"意义以及优缺点\"><a href=\"#意义以及优缺点\" class=\"headerlink\" title=\"意义以及优缺点\"></a>意义以及优缺点</h1><p>先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的</p>\n<h2 id=\"原型链继承的意义以及优缺点\"><a href=\"#原型链继承的意义以及优缺点\" class=\"headerlink\" title=\"原型链继承的意义以及优缺点\"></a>原型链继承的意义以及优缺点</h2><p>我们来看这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;&#125;</div><div class=\"line\">Parent.prototype = &#123;</div><div class=\"line\">\ttestArray:[1,2,3]</div><div class=\"line\">&#125;;</div><div class=\"line\">function Child() &#123;&#125;</div><div class=\"line\">Child.prototype = new Parent;</div><div class=\"line\">var child1 = new Child;</div><div class=\"line\">var child2 = new Child;</div><div class=\"line\"></div><div class=\"line\">child1.testArray.push(4)</div><div class=\"line\"></div><div class=\"line\">console.log(child1.testArray) \t//输出[1, 2, 3, 4]</div><div class=\"line\">console.log(child2.testArray) \t//输出[1, 2, 3, 4]</div></pre></td></tr></table></figure></p>\n<p>我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中<br>所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。<br>同时，如果判断一下<br><img src=\"/images/yuanxinglian/yuanxinglian2.png\" alt=\"原型链\"><br>结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点</p>\n<h2 id=\"构造器继承的意义以及优缺点\"><a href=\"#构造器继承的意义以及优缺点\" class=\"headerlink\" title=\"构造器继承的意义以及优缺点\"></a>构造器继承的意义以及优缺点</h2><p>继续看一个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">\tthis.testArray = [1,2,3]</div><div class=\"line\">&#125;</div><div class=\"line\">function Child() &#123;</div><div class=\"line\">\tvar parent = Parent.bind(this)</div><div class=\"line\">&#125;</div><div class=\"line\">var child1 = new Child;</div><div class=\"line\">var child2 = new Child;</div><div class=\"line\"></div><div class=\"line\">child1.testArray.push(4)</div><div class=\"line\"></div><div class=\"line\">console.log(child1.testArray) \t//输出[1, 2, 3]</div><div class=\"line\">console.log(child2.testArray) \t//输出[1, 2, 3, 4]</div></pre></td></tr></table></figure></p>\n<p>和原型链不同的是，构造器的继承都是独立的互不影响<br>查看一下类型<br><img src=\"/images/yuanxinglian/yuanxinglian3.png\" alt=\"原型链\"><br>很准确的判断出来了类型</p>\n<h2 id=\"混合继承的意义以及优缺点\"><a href=\"#混合继承的意义以及优缺点\" class=\"headerlink\" title=\"混合继承的意义以及优缺点\"></a>混合继承的意义以及优缺点</h2><p>混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象<br>原型链因为他的特殊性，还可以用原来进行共享对象的数据交换<br>好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现</p>\n","excerpt":"<p>在写这篇博客的时候，我就做好了撕逼的准备<br>","more":"<br>js是一个无类语言，在日常编码中，我们可能需要js来创建一些类似面向对象里面“类”的东西，来实现代码复用。<br>js是一个基于对象的语言，没有类的概念，但是我们可以通过一些办法来模拟实现类的功能。<br>在写这篇博客的时候，我先在百度上搜了一下，网上说js的继承有五种办法</p>\n<blockquote>\n<p>1.使用对象冒充实现继承<br>2.采用call方法改变函数上下文实现继承<br>3.采用Apply方法改变函数上下文实现继承<br>4.采用原型链的方式实现继承<br>5.采用混合模式实现继承</p>\n</blockquote>\n<p>具体的文章大家可以自己百度一下，这样的文章网上很多，而且长得都一样。<br>但是我对此有一点不同的看法，js模拟实现类功能从实现的意义上来说最多只有3种，即<br>1.原型链继承<br>2.构造器继承<br>3.原型链和构造器混用继承</p>\n<p>让我们一点点深入，来慢慢了解，为什么我说只有三种方法</p>\n<h1 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h1><p>原型链的概念其实不难理解，就是一种类似于职责链一样模式的模式，什么是职责链呢？<br>举个例子，我们去银行取钱，如果我们只是取几百块前，最快最好的办法是直接去ATM机取钱<br>如果我们要取几十万，就必须要去柜台，让银行的工作人员帮你取钱<br>如果我们要是取几个亿 ==！ 银行人员一定非常的紧张，告诉你过几天再来，柜台上没有那么多钱，然后再把事情报告给当地行长，等到前到位的时候通知取钱<br>咳咳，如果我们想和银行谈一个价值几百个亿的合作♂ 这件事都不是ATM机、银行工作人员、当地行长能接手的事，他们就需要把这件事上报到总部，让总部的人过来和我们来谈合作的事<br>在这个实例中，我们能看到的就是职责链模式，就是<br>消费者产生一个需求的时候，生产者接手这个需求，如果不能处理它，就往上传递，直到有一个生产者能够处理它</p>\n<p>原型链就是一样的结构，js内置了许多对象，所有的对象，除了字符串、数字、布尔值、null和undefined以外，他们的原型链的终点都是Object</p>\n<blockquote>\n<p>这句话不是很准确，字符串、数字和布尔值是一种不可变的对象，但是最终点也是Object<br>Object的原型链是null</p>\n</blockquote>\n<p><img src=\"/images/yuanxinglian/yuanxinglian1.png\" alt=\"原型链\"><br>原型链呢就是一个对象，你调用他的方法，比如对象A，你调用A.sayName()，如果A有sayName这个方法，则直接调用，如果没有，则通过A是原型链向上查找，如果原型链上有这个方法，则调用，没有就继续查找，如果找不到，则会返回一个Uncaught TypeError错误或者undefined。<br>如果对象和原型链上都有这个方法，则现有的方法会覆盖原型链上的方法。<br>举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;&#125;</div><div class=\"line\">Parent.prototype.sayHello = function() &#123;</div><div class=\"line\">\tconsole.log(&apos;hello parent&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Child() &#123;&#125;</div><div class=\"line\">Child.prototype = new Parent;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">child.sayHello()\t//输出hello parent</div></pre></td></tr></table></figure></p>\n<p>我们看到child调用sayHello成功了，调用的是Parent的方法，我们再看一下覆盖的情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;&#125;</div><div class=\"line\">Parent.prototype.sayHello = function() &#123;</div><div class=\"line\">\tconsole.log(&apos;hello parent&apos;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Child() &#123;&#125;</div><div class=\"line\">Child.prototype = new Parent;</div><div class=\"line\">Child.prototype.sayHello = function() &#123;</div><div class=\"line\">\tconsole.log(&apos;hello child&apos;)</div><div class=\"line\">&#125;;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">child.sayHello()\t//输出hello child</div><div class=\"line\">child.constructor.prototype.sayHello()\t//输出hello parent</div></pre></td></tr></table></figure></p>\n<p>我们可以看到child的sayHello覆盖了parent的方法，但是我们可以通过访问constructor看到实际上这个方法还存在的。</p>\n<h1 id=\"构造器继承\"><a href=\"#构造器继承\" class=\"headerlink\" title=\"构造器继承\"></a>构造器继承</h1><p>js函数可以被当作构造器使用，通过返回的对象完成构造<br>如果没有指定返回一个对象，默认返回的是this<br>举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">var parent = new Parent</div><div class=\"line\">console.log(parent.name)\t//输出parent</div><div class=\"line\"></div><div class=\"line\">function AnotherParent() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;</div><div class=\"line\">\tvar obj = &#123;name:&apos;hahaha&apos;&#125;;</div><div class=\"line\">\treturn obj;</div><div class=\"line\">&#125;</div><div class=\"line\">var anotherparent = new AnotherParent;</div><div class=\"line\">console.log(anotherparent.name) \t//输出hahaha</div></pre></td></tr></table></figure></p>\n<p>而所谓构造器继承，就是把需要继承的对象在构造过程中，调用被继承的对象的构造方法来处理这个继承对象需要构造的目标<br>让我们来实现一个构造器继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">function Child() &#123;</div><div class=\"line\">\tvar parent = Parent.bind(this); \t//将执行环境绑定到Child来</div><div class=\"line\">\tparent();</div><div class=\"line\">\tthis.age = 10;</div><div class=\"line\">&#125;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">console.log(child.name) \t//输出parent</div><div class=\"line\">console.log(child.age) \t\t//输出10</div></pre></td></tr></table></figure></p>\n<p>是不是很简单？其实这一段的代码和下面这段代码是一样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Child() &#123;</div><div class=\"line\">\tthis.name = &apos;parent&apos;;</div><div class=\"line\">\tthis.age = 10;</div><div class=\"line\">&#125;</div><div class=\"line\">var child = new Child;</div><div class=\"line\">console.log(child.name)</div><div class=\"line\">console.log(child.age)</div></pre></td></tr></table></figure></p>\n<p>这就是构造器继承，实际上这个方法和上面提到的网上的方法的123方法是同一种，换汤不换药，原理都是通过构造器实现继承<br>可以看看网上给的例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\">//1.使用对象冒充实现继承</div><div class=\"line\">function Parent(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.fname=firstname;  </div><div class=\"line\">    this.age=40;  </div><div class=\"line\">    this.sayAge=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.age);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">function Child(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.parent=Parent;  </div><div class=\"line\">    this.parent(firstname);  //实际上这一段的意义就是将执行环境上下文改变了,和上面的例子一样</div><div class=\"line\">    delete this.parent;  </div><div class=\"line\">    this.saySomeThing=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.fname);  </div><div class=\"line\">        this.sayAge();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">var mychild=new Child(&quot;李&quot;);  </div><div class=\"line\">mychild.saySomeThing();  </div><div class=\"line\"></div><div class=\"line\">// 2.采用call方法改变函数上下文实现继承</div><div class=\"line\">function Parent(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.fname=firstname;  </div><div class=\"line\">    this.age=40;  </div><div class=\"line\">    this.sayAge=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.age);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">function Child(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">  </div><div class=\"line\">    this.saySomeThing=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.fname);  </div><div class=\"line\">        this.sayAge();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   this.getName=function()  </div><div class=\"line\">   &#123;  </div><div class=\"line\">       return firstname;  </div><div class=\"line\">   &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\">var child=new Child(&quot;张&quot;);  </div><div class=\"line\">Parent.call(child,child.getName());  // call只是借用罢了,作用的对象还是child,原理还是构造器继承</div><div class=\"line\">child.saySomeThing(); </div><div class=\"line\"></div><div class=\"line\">// 3.采用Apply方法改变函数上下文实现继承 </div><div class=\"line\">function Parent(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    this.fname=firstname;  </div><div class=\"line\">    this.age=40;  </div><div class=\"line\">    this.sayAge=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.age);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">function Child(firstname)  </div><div class=\"line\">&#123;  </div><div class=\"line\">  </div><div class=\"line\">    this.saySomeThing=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        console.log(this.fname);  </div><div class=\"line\">        this.sayAge();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    this.getName=function()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        return firstname;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\">var child=new Child(&quot;张&quot;);  </div><div class=\"line\">Parent.apply(child,[child.getName()]);  //???换个函数就能算一种了???</div><div class=\"line\">child.saySomeThing();</div></pre></td></tr></table></figure></p>\n<p>我们可以看到网上说的这三种其实是一种，都是构造器继承，只是表现的手法不一样，不能算三种<br>（如果有读者对我的观点有什么不同的意见，欢迎在下面评论提出来）</p>\n<h1 id=\"关于混合继承的吐槽\"><a href=\"#关于混合继承的吐槽\" class=\"headerlink\" title=\"关于混合继承的吐槽\"></a>关于混合继承的吐槽</h1><p>如果按照我刚才的逻辑，混合继承应该也不算一种继承方式，这点我承认，但是我还是把它拿出来了算作一种，原因很简单，就是因为它的使用场景和其他两种都不一样，而上面那三种的基本就是一样的，至于都有哪些不一样，请往下看。</p>\n<h1 id=\"意义以及优缺点\"><a href=\"#意义以及优缺点\" class=\"headerlink\" title=\"意义以及优缺点\"></a>意义以及优缺点</h1><p>先说结论，原型链继承中的原型对象是共享的，构造器构造出来的对象是独立的</p>\n<h2 id=\"原型链继承的意义以及优缺点\"><a href=\"#原型链继承的意义以及优缺点\" class=\"headerlink\" title=\"原型链继承的意义以及优缺点\"></a>原型链继承的意义以及优缺点</h2><p>我们来看这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;&#125;</div><div class=\"line\">Parent.prototype = &#123;</div><div class=\"line\">\ttestArray:[1,2,3]</div><div class=\"line\">&#125;;</div><div class=\"line\">function Child() &#123;&#125;</div><div class=\"line\">Child.prototype = new Parent;</div><div class=\"line\">var child1 = new Child;</div><div class=\"line\">var child2 = new Child;</div><div class=\"line\"></div><div class=\"line\">child1.testArray.push(4)</div><div class=\"line\"></div><div class=\"line\">console.log(child1.testArray) \t//输出[1, 2, 3, 4]</div><div class=\"line\">console.log(child2.testArray) \t//输出[1, 2, 3, 4]</div></pre></td></tr></table></figure></p>\n<p>我们可以看到child1对象的操作影响到了child2对象，原因很简单，他们用的原型对象是相同的共享的，意思就是原型对象指向的地址是一样的，任何对Parent原型的更改，都会反应到继承他的子对象中<br>所以在原型中是不适合写属性进去的，除非你有意把这样的功能设计进去。<br>同时，如果判断一下<br><img src=\"/images/yuanxinglian/yuanxinglian2.png\" alt=\"原型链\"><br>结果发现child1属于Parent和Child，如果在复杂场景中，我们还需要找有没有别的对象继承了Child，这样才能确定一个对象是属于哪个构造器的，无疑非常的麻烦，这也是原型链的缺点</p>\n<h2 id=\"构造器继承的意义以及优缺点\"><a href=\"#构造器继承的意义以及优缺点\" class=\"headerlink\" title=\"构造器继承的意义以及优缺点\"></a>构造器继承的意义以及优缺点</h2><p>继续看一个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Parent() &#123;</div><div class=\"line\">\tthis.testArray = [1,2,3]</div><div class=\"line\">&#125;</div><div class=\"line\">function Child() &#123;</div><div class=\"line\">\tvar parent = Parent.bind(this)</div><div class=\"line\">&#125;</div><div class=\"line\">var child1 = new Child;</div><div class=\"line\">var child2 = new Child;</div><div class=\"line\"></div><div class=\"line\">child1.testArray.push(4)</div><div class=\"line\"></div><div class=\"line\">console.log(child1.testArray) \t//输出[1, 2, 3]</div><div class=\"line\">console.log(child2.testArray) \t//输出[1, 2, 3, 4]</div></pre></td></tr></table></figure></p>\n<p>和原型链不同的是，构造器的继承都是独立的互不影响<br>查看一下类型<br><img src=\"/images/yuanxinglian/yuanxinglian3.png\" alt=\"原型链\"><br>很准确的判断出来了类型</p>\n<h2 id=\"混合继承的意义以及优缺点\"><a href=\"#混合继承的意义以及优缺点\" class=\"headerlink\" title=\"混合继承的意义以及优缺点\"></a>混合继承的意义以及优缺点</h2><p>混合继承适用与复杂的应用场景，当需要一些对象共享一些基础的静态方法，原型链有效的减少了重复的代码，而且还能实现多态，如果子对象需要生成独立互不影响的内部对象，构造器则能够很好的维护好子对象中的内部对象而不影响其它对象<br>原型链因为他的特殊性，还可以用原来进行共享对象的数据交换<br>好处有很多，但是在实际生产环境中，为了便于代码的可读性以及可维护性，如果不是必须的话，最好使用一种来实现</p>"},{"title":"github以及github page访问缓慢的解决办法","date":"2016-11-30T07:30:53.000Z","_content":"如题，解决办法如下\n修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址\n```\n151.101.100.133 zk-.github.io\n192.30.253.113 github.com\n```","source":"_posts/github以及github-page访问缓慢的解决办法.md","raw":"---\ntitle: github以及github page访问缓慢的解决办法\ndate: 2016-11-30 15:30:53\ncategories: [工具]\ntags: [hosts]\n---\n如题，解决办法如下\n修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址\n```\n151.101.100.133 zk-.github.io\n192.30.253.113 github.com\n```","slug":"github以及github-page访问缓慢的解决办法","published":1,"updated":"2016-11-30T07:32:56.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87f00026waw1jcbwihb","content":"<p>如题，解决办法如下<br>修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">151.101.100.133 zk-.github.io</div><div class=\"line\">192.30.253.113 github.com</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>如题，解决办法如下<br>修改hosts，加入这两行，其中zk-.github.io可以换成你的博客地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">151.101.100.133 zk-.github.io</div><div class=\"line\">192.30.253.113 github.com</div></pre></td></tr></table></figure></p>\n"},{"title":"postman奇技淫巧","date":"2016-10-22T04:20:19.000Z","_content":"\npostman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。\n<!-- more -->\n# postman介绍\npostman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。\n本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。\n\n# 使用前的准备\n在学习使用前你需要知道以下几个小知识：\n- postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（[文档在这里](https://developer.chrome.com/apps/socket)），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。\n- postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。\n- chrome应用市场[地址](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon)\n- 使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)\n\n# postman基本用法\n首先看整个界面，图1\n![主界面](/images/postman/postman1.jpg)图1\n1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用\n2 用来传递测试数据的，就是用户之间分享构建好的测试数据包\n3 History 记录测试历史，每一次发送数据包就会产生一个历史数据\n4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉\n5 我们主要的工作环境-构建器，稍后会详细说明\n6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies\n7 postman设置，可以设置操作习惯，主题和同步等等\n\n# postman构建器的基本使用\n下面我们就先来尝试构建一个数据包\n这里我们用来做实验的例子是向[多说](https://duoshuo.com/)发送请求获取文章的评论数，以及转发数\n相关的API文档在[这里](http://dev.duoshuo.com/docs/50615732a834c63c56004257)\n\n从文档我们知道有以下几个要点：\n- 请求地址是http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\n- 请求方式是GET\n- 需要两个参数，一个short_name，一个threads\n- 不需要登录\n- 我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/\n\nok,让我们现在开始搞事情 ![搞事情](/images/emotions/gsq.jpg)\n\n见图2\n![构建请求](/images/postman/postman2.jpg)\n1 选择请求方式GET\n2 填入地址\n\n见图3\n![构建请求](/images/postman/postman3.jpg)\n1 点击\n2 填入参数\n\n最后我们点击Send按钮，成功！\n![成功结果](/images/postman/postman4.jpg)\n我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）\n\n# 奇技淫巧（重点）\n前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能\n因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能\n点击这里\n![code](/images/postman/postman5.jpg)\n我们发现postman竟然可以为你提供各种语言版本构建器的代码！\n![code](/images/postman/postman6.jpg)\n点击左上角可以切换语言！\n![code](/images/postman/postman7.jpg)\n如图，nodejs的构建器代码\n\n这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！\n\n文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)","source":"_posts/postman奇技淫巧.md","raw":"---\ntitle: postman奇技淫巧\ndate: 2016-10-22 12:20:19\ncategories: [工具]\ntags: [爬虫,chrome应用,测试]\n---\n\npostman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。\n<!-- more -->\n# postman介绍\npostman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。\n本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。\n\n# 使用前的准备\n在学习使用前你需要知道以下几个小知识：\n- postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（[文档在这里](https://developer.chrome.com/apps/socket)），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。\n- postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。\n- chrome应用市场[地址](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon)\n- 使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)\n\n# postman基本用法\n首先看整个界面，图1\n![主界面](/images/postman/postman1.jpg)图1\n1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用\n2 用来传递测试数据的，就是用户之间分享构建好的测试数据包\n3 History 记录测试历史，每一次发送数据包就会产生一个历史数据\n4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉\n5 我们主要的工作环境-构建器，稍后会详细说明\n6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies\n7 postman设置，可以设置操作习惯，主题和同步等等\n\n# postman构建器的基本使用\n下面我们就先来尝试构建一个数据包\n这里我们用来做实验的例子是向[多说](https://duoshuo.com/)发送请求获取文章的评论数，以及转发数\n相关的API文档在[这里](http://dev.duoshuo.com/docs/50615732a834c63c56004257)\n\n从文档我们知道有以下几个要点：\n- 请求地址是http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\n- 请求方式是GET\n- 需要两个参数，一个short_name，一个threads\n- 不需要登录\n- 我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/\n\nok,让我们现在开始搞事情 ![搞事情](/images/emotions/gsq.jpg)\n\n见图2\n![构建请求](/images/postman/postman2.jpg)\n1 选择请求方式GET\n2 填入地址\n\n见图3\n![构建请求](/images/postman/postman3.jpg)\n1 点击\n2 填入参数\n\n最后我们点击Send按钮，成功！\n![成功结果](/images/postman/postman4.jpg)\n我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）\n\n# 奇技淫巧（重点）\n前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能\n因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能\n点击这里\n![code](/images/postman/postman5.jpg)\n我们发现postman竟然可以为你提供各种语言版本构建器的代码！\n![code](/images/postman/postman6.jpg)\n点击左上角可以切换语言！\n![code](/images/postman/postman7.jpg)\n如图，nodejs的构建器代码\n\n这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！\n\n文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)","slug":"postman奇技淫巧","published":1,"updated":"2016-11-22T09:15:35.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87v00066waw18w2ixrh","content":"<p>postman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。<br><a id=\"more\"></a></p>\n<h1 id=\"postman介绍\"><a href=\"#postman介绍\" class=\"headerlink\" title=\"postman介绍\"></a>postman介绍</h1><p>postman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。<br>本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。</p>\n<h1 id=\"使用前的准备\"><a href=\"#使用前的准备\" class=\"headerlink\" title=\"使用前的准备\"></a>使用前的准备</h1><p>在学习使用前你需要知道以下几个小知识：</p>\n<ul>\n<li>postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（<a href=\"https://developer.chrome.com/apps/socket\" target=\"_blank\" rel=\"external\">文档在这里</a>），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。</li>\n<li>postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。</li>\n<li>chrome应用市场<a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"external\">地址</a></li>\n<li>使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)</li>\n</ul>\n<h1 id=\"postman基本用法\"><a href=\"#postman基本用法\" class=\"headerlink\" title=\"postman基本用法\"></a>postman基本用法</h1><p>首先看整个界面，图1<br><img src=\"/images/postman/postman1.jpg\" alt=\"主界面\">图1<br>1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用<br>2 用来传递测试数据的，就是用户之间分享构建好的测试数据包<br>3 History 记录测试历史，每一次发送数据包就会产生一个历史数据<br>4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉<br>5 我们主要的工作环境-构建器，稍后会详细说明<br>6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies<br>7 postman设置，可以设置操作习惯，主题和同步等等</p>\n<h1 id=\"postman构建器的基本使用\"><a href=\"#postman构建器的基本使用\" class=\"headerlink\" title=\"postman构建器的基本使用\"></a>postman构建器的基本使用</h1><p>下面我们就先来尝试构建一个数据包<br>这里我们用来做实验的例子是向<a href=\"https://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>发送请求获取文章的评论数，以及转发数<br>相关的API文档在<a href=\"http://dev.duoshuo.com/docs/50615732a834c63c56004257\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>从文档我们知道有以下几个要点：</p>\n<ul>\n<li>请求地址是<a href=\"http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\" target=\"_blank\" rel=\"external\">http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）</a></li>\n<li>请求方式是GET</li>\n<li>需要两个参数，一个short_name，一个threads</li>\n<li>不需要登录</li>\n<li>我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/</li>\n</ul>\n<p>ok,让我们现在开始搞事情 <img src=\"/images/emotions/gsq.jpg\" alt=\"搞事情\"></p>\n<p>见图2<br><img src=\"/images/postman/postman2.jpg\" alt=\"构建请求\"><br>1 选择请求方式GET<br>2 填入地址</p>\n<p>见图3<br><img src=\"/images/postman/postman3.jpg\" alt=\"构建请求\"><br>1 点击<br>2 填入参数</p>\n<p>最后我们点击Send按钮，成功！<br><img src=\"/images/postman/postman4.jpg\" alt=\"成功结果\"><br>我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）</p>\n<h1 id=\"奇技淫巧（重点）\"><a href=\"#奇技淫巧（重点）\" class=\"headerlink\" title=\"奇技淫巧（重点）\"></a>奇技淫巧（重点）</h1><p>前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能<br>因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能<br>点击这里<br><img src=\"/images/postman/postman5.jpg\" alt=\"code\"><br>我们发现postman竟然可以为你提供各种语言版本构建器的代码！<br><img src=\"/images/postman/postman6.jpg\" alt=\"code\"><br>点击左上角可以切换语言！<br><img src=\"/images/postman/postman7.jpg\" alt=\"code\"><br>如图，nodejs的构建器代码</p>\n<p>这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！</p>\n<p>文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)</p>\n","excerpt":"<p>postman是chrome浏览器应用市场里面的一款神器，测试人员的好帮手，黑客手里的爬虫利器。<br>","more":"</p>\n<h1 id=\"postman介绍\"><a href=\"#postman介绍\" class=\"headerlink\" title=\"postman介绍\"></a>postman介绍</h1><p>postman是一个用来方便构造各种各样网络请求的工具，他的平台是构建在chrome上的。因为强大有用的功能被封为神器，可惜没有中文支持，让很多初学者望而却步，但是只要坚定的去摸索使用这个工具，你就会感受到他的强大而且丰富的功能。<br>本文打算简单的介绍下基本使用功能，postman里面的功能非常丰富，一篇文章是说不完的，所以我打算主要说一说我在使用postman中的一些心得，发现的一些小技巧。</p>\n<h1 id=\"使用前的准备\"><a href=\"#使用前的准备\" class=\"headerlink\" title=\"使用前的准备\"></a>使用前的准备</h1><p>在学习使用前你需要知道以下几个小知识：</p>\n<ul>\n<li>postman的基本原理不是用我们平常熟知的，用js去构建XHR这种前端发送请求的方法去构建数据包的，因为他是chrome里面的应用，chrome给应用提供了许多接口，其中就包含了sockets接口（<a href=\"https://developer.chrome.com/apps/socket\">文档在这里</a>），这个接口支持TCP和UDP协议，使得chrome应用网络通信成为可能，所以postman是使用chrome里面的接口，把chrome当作网络爬虫一样的工具来实现发送数据包的，所以我们要把他当作一个独立的应用程序来看待。</li>\n<li>postman是一个chrome应用而不是chrome插件，定位不同所以功能是有区别的。</li>\n<li>chrome应用市场<a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-ntp-icon\">地址</a></li>\n<li>使用插件不需要翻墙，但是应用需要登录才能用，登录需要翻墙，翻墙手段自己摸索:)</li>\n</ul>\n<h1 id=\"postman基本用法\"><a href=\"#postman基本用法\" class=\"headerlink\" title=\"postman基本用法\"></a>postman基本用法</h1><p>首先看整个界面，图1<br><img src=\"/images/postman/postman1.jpg\" alt=\"主界面\">图1<br>1 Runner 测试人员用来进行集成化测试的功能，要配合Collections使用<br>2 用来传递测试数据的，就是用户之间分享构建好的测试数据包<br>3 History 记录测试历史，每一次发送数据包就会产生一个历史数据<br>4 Collections 用来保存你构建好的数据包，登录用户且在翻墙的情况下，会自动同步你的数据，当然可以仔设置里面关掉<br>5 我们主要的工作环境-构建器，稍后会详细说明<br>6 配合postman的另一个chrome插件，注意是插件，其作用是接受来自目标服务器的cookies<br>7 postman设置，可以设置操作习惯，主题和同步等等</p>\n<h1 id=\"postman构建器的基本使用\"><a href=\"#postman构建器的基本使用\" class=\"headerlink\" title=\"postman构建器的基本使用\"></a>postman构建器的基本使用</h1><p>下面我们就先来尝试构建一个数据包<br>这里我们用来做实验的例子是向<a href=\"https://duoshuo.com/\">多说</a>发送请求获取文章的评论数，以及转发数<br>相关的API文档在<a href=\"http://dev.duoshuo.com/docs/50615732a834c63c56004257\">这里</a></p>\n<p>从文档我们知道有以下几个要点：</p>\n<ul>\n<li>请求地址是<a href=\"http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）\">http://api.duoshuo.com/threads/counts.json（可选有json或者jsonp）</a></li>\n<li>请求方式是GET</li>\n<li>需要两个参数，一个short_name，一个threads</li>\n<li>不需要登录</li>\n<li>我在这里可以提供下测试数据 short_name:jackfred   threads:2016/10/22/postman奇技淫巧/</li>\n</ul>\n<p>ok,让我们现在开始搞事情 <img src=\"/images/emotions/gsq.jpg\" alt=\"搞事情\"></p>\n<p>见图2<br><img src=\"/images/postman/postman2.jpg\" alt=\"构建请求\"><br>1 选择请求方式GET<br>2 填入地址</p>\n<p>见图3<br><img src=\"/images/postman/postman3.jpg\" alt=\"构建请求\"><br>1 点击<br>2 填入参数</p>\n<p>最后我们点击Send按钮，成功！<br><img src=\"/images/postman/postman4.jpg\" alt=\"成功结果\"><br>我们看到有一个评论，一个喜欢，对比下结果是正确的（喜欢是我自己点的，怎么啦）</p>\n<h1 id=\"奇技淫巧（重点）\"><a href=\"#奇技淫巧（重点）\" class=\"headerlink\" title=\"奇技淫巧（重点）\"></a>奇技淫巧（重点）</h1><p>前面我们已经学会了怎么构造一个简单的测试数据，先不要慌着关掉窗口，重点来了，postman为用户提供了一个非常贴心的功能<br>因为postman可以非常详细的自定义数据包，构建headers cookies 包括各种登录Authorization，如果我们想用各种编程语言构建一个一模一样的数据，肯定免不了要各种编写调试一下，在这里postman提供了一个非常让人暖心的功能<br>点击这里<br><img src=\"/images/postman/postman5.jpg\" alt=\"code\"><br>我们发现postman竟然可以为你提供各种语言版本构建器的代码！<br><img src=\"/images/postman/postman6.jpg\" alt=\"code\"><br>点击左上角可以切换语言！<br><img src=\"/images/postman/postman7.jpg\" alt=\"code\"><br>如图，nodejs的构建器代码</p>\n<p>这样我们就能很方便的去把这些代码选择粘贴到我们的工作环境中，而且不用担心代码有问题！</p>\n<p>文章到这里就结束了，postman还有很多强大的功能等你发掘，以后我也许还会在以后的文章理继续介绍postman  :)</p>"},{"title":"函数式编程:用自带的js原型链方法解决问题","date":"2016-10-23T04:28:21.000Z","_content":"\n凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！\n<!-- more -->\n其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。\n当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。\n# 前提\n本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。\n# 数组\n在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。\n## Array.prototype.every()\n这个方法是用来测试数组的所有元素是否都通过了指定函数的测试\n> every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。\n> callback 被调用时传入三个参数：元素值，元素的索引，原数组。\n\n举个例子\n\n```\n// 检测数组中是否全都小于100的数字\nvar flag = [1，32，55，67，98，101，33，44，43].every(function(item， index， array){\n\treturn item <= 100\n})\nconsole.log(flag) //结果为false，101大于100\n```\n\n通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用\n我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现\n\n```\nvar allCheckBoxDom = document.getElementsByClassName('quanxuan')[0] //获取全选复选框\nvar childrenCheckBoxDoms = document.getElementsByClassName('zixuanze') //获取子选择框组，这是一个类数组\nvar flag = [].every.call(childrenCheckBoxDoms， function(item， index， array) {\n\titem.checked === true\n})\nif(flag){\n\tallCheckBoxDom.checked = true;\n}else{\n\tallCheckBoxDom.checked = false;\n}\n```\n\n这样就方便的实现了这个功能\n> 对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了\n## Array.prototype.map()\n这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。\n举个例子\n我们通过ajax获取到的一组数据，类似这样的\n```\nvar jobs = [\n\t{name:'zk'，age:22}\n\t{name:'ab'，age:12}\n\t{name:'cd'，age:33}\n\t{name:'pol'，age:5}\n]\n```\n如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做\n```\nvar nameList = jobs.map(function(item， index， array){\n\treturn item.name\n})\n```\n## Array.prototype.reduce()\n这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。\n也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是\npreviousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）\ncurrentValue 数组中当前被处理的元素\nindex 当前元素在数组中的索引\narray 调用 reduce 的数组\n另外reduce还可以接受一个初始值\n举个例子\n```\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n})\n```\n其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值\n```\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n}，5)\n```\n这样子结果就是15\n# Math\nMath是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。\n## Math.max\n看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值\n```\nconsole.log(Math.max(1，2，4，5，6，7)) //输出7\n```\n但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）\n```\nvar array = [44，12，42，11，87，33，49，3，487，111]\nvar maxNum = Math.max.call(Math， array)\nconsole.log(maxNum) //输出487\n```\n## Math.min\n和Math.max用法相同，不再赘述\n\n# 结语\n函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。","source":"_posts/函数式编程-用自带的js原型链方法解决问题.md","raw":"---\ntitle: '函数式编程:用自带的js原型链方法解决问题'\ndate: 2016-10-23 12:28:21\ncategories: [博客]\ntags: [数组,Math,函数式编程,原型链]\n---\n\n凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！\n<!-- more -->\n其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。\n当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。\n# 前提\n本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。\n# 数组\n在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。\n## Array.prototype.every()\n这个方法是用来测试数组的所有元素是否都通过了指定函数的测试\n> every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。\n> callback 被调用时传入三个参数：元素值，元素的索引，原数组。\n\n举个例子\n\n```\n// 检测数组中是否全都小于100的数字\nvar flag = [1，32，55，67，98，101，33，44，43].every(function(item， index， array){\n\treturn item <= 100\n})\nconsole.log(flag) //结果为false，101大于100\n```\n\n通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用\n我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现\n\n```\nvar allCheckBoxDom = document.getElementsByClassName('quanxuan')[0] //获取全选复选框\nvar childrenCheckBoxDoms = document.getElementsByClassName('zixuanze') //获取子选择框组，这是一个类数组\nvar flag = [].every.call(childrenCheckBoxDoms， function(item， index， array) {\n\titem.checked === true\n})\nif(flag){\n\tallCheckBoxDom.checked = true;\n}else{\n\tallCheckBoxDom.checked = false;\n}\n```\n\n这样就方便的实现了这个功能\n> 对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了\n## Array.prototype.map()\n这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。\n举个例子\n我们通过ajax获取到的一组数据，类似这样的\n```\nvar jobs = [\n\t{name:'zk'，age:22}\n\t{name:'ab'，age:12}\n\t{name:'cd'，age:33}\n\t{name:'pol'，age:5}\n]\n```\n如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做\n```\nvar nameList = jobs.map(function(item， index， array){\n\treturn item.name\n})\n```\n## Array.prototype.reduce()\n这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。\n也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是\npreviousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）\ncurrentValue 数组中当前被处理的元素\nindex 当前元素在数组中的索引\narray 调用 reduce 的数组\n另外reduce还可以接受一个初始值\n举个例子\n```\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n})\n```\n其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值\n```\n[1，2，3，4].reduce(function(previousValue， currentValue， index， array){\n\treturn previousValue + currentValue\n}，5)\n```\n这样子结果就是15\n# Math\nMath是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。\n## Math.max\n看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值\n```\nconsole.log(Math.max(1，2，4，5，6，7)) //输出7\n```\n但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）\n```\nvar array = [44，12，42，11，87，33，49，3，487，111]\nvar maxNum = Math.max.call(Math， array)\nconsole.log(maxNum) //输出487\n```\n## Math.min\n和Math.max用法相同，不再赘述\n\n# 结语\n函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。","slug":"函数式编程-用自带的js原型链方法解决问题","published":1,"updated":"2016-11-22T09:15:35.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87v00076wawmrozp97h","content":"<p>凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！<br><a id=\"more\"></a><br>其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。<br>当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。</p>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。</p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。</p>\n<h2 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h2><p>这个方法是用来测试数组的所有元素是否都通过了指定函数的测试</p>\n<blockquote>\n<p>every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。<br>callback 被调用时传入三个参数：元素值，元素的索引，原数组。</p>\n</blockquote>\n<p>举个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 检测数组中是否全都小于100的数字</div><div class=\"line\">var flag = [1，32，55，67，98，101，33，44，43].every(function(item， index， array)&#123;</div><div class=\"line\">\treturn item &lt;= 100</div><div class=\"line\">&#125;)</div><div class=\"line\">console.log(flag) //结果为false，101大于100</div></pre></td></tr></table></figure>\n<p>通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用<br>我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var allCheckBoxDom = document.getElementsByClassName(&apos;quanxuan&apos;)[0] //获取全选复选框</div><div class=\"line\">var childrenCheckBoxDoms = document.getElementsByClassName(&apos;zixuanze&apos;) //获取子选择框组，这是一个类数组</div><div class=\"line\">var flag = [].every.call(childrenCheckBoxDoms， function(item， index， array) &#123;</div><div class=\"line\">\titem.checked === true</div><div class=\"line\">&#125;)</div><div class=\"line\">if(flag)&#123;</div><div class=\"line\">\tallCheckBoxDom.checked = true;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">\tallCheckBoxDom.checked = false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就方便的实现了这个功能</p>\n<blockquote>\n<p>对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了</p>\n<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><p>这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。<br>举个例子<br>我们通过ajax获取到的一组数据，类似这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jobs = [</div><div class=\"line\">\t&#123;name:&apos;zk&apos;，age:22&#125;</div><div class=\"line\">\t&#123;name:&apos;ab&apos;，age:12&#125;</div><div class=\"line\">\t&#123;name:&apos;cd&apos;，age:33&#125;</div><div class=\"line\">\t&#123;name:&apos;pol&apos;，age:5&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var nameList = jobs.map(function(item， index， array)&#123;</div><div class=\"line\">\treturn item.name</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Array-prototype-reduce\"><a href=\"#Array-prototype-reduce\" class=\"headerlink\" title=\"Array.prototype.reduce()\"></a>Array.prototype.reduce()</h2><p>这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。<br>也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是<br>previousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>currentValue 数组中当前被处理的元素<br>index 当前元素在数组中的索引<br>array 调用 reduce 的数组<br>另外reduce还可以接受一个初始值<br>举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1，2，3，4].reduce(function(previousValue， currentValue， index， array)&#123;</div><div class=\"line\">\treturn previousValue + currentValue</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1，2，3，4].reduce(function(previousValue， currentValue， index， array)&#123;</div><div class=\"line\">\treturn previousValue + currentValue</div><div class=\"line\">&#125;，5)</div></pre></td></tr></table></figure></p>\n<p>这样子结果就是15</p>\n<h1 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h1><p>Math是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。</p>\n<h2 id=\"Math-max\"><a href=\"#Math-max\" class=\"headerlink\" title=\"Math.max\"></a>Math.max</h2><p>看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(Math.max(1，2，4，5，6，7)) //输出7</div></pre></td></tr></table></figure></p>\n<p>但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [44，12，42，11，87，33，49，3，487，111]</div><div class=\"line\">var maxNum = Math.max.call(Math， array)</div><div class=\"line\">console.log(maxNum) //输出487</div></pre></td></tr></table></figure></p>\n<h2 id=\"Math-min\"><a href=\"#Math-min\" class=\"headerlink\" title=\"Math.min\"></a>Math.min</h2><p>和Math.max用法相同，不再赘述</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。</p>\n","excerpt":"<p>凡是存在的就是合理的，那些说函数式编程可读性差的，你就是不会啊！<br>","more":"<br>其实代码写久了，有时候会对一个非常长的代码文件产生厌烦感，在阅读别人的代码或者回顾自己以前写的代码时候更是如此。<br>当你阅读到一个长长的for循环而没有注释这个for是用来干啥时，内心的戾气就更是要爆发出来。其实很多情况我们是没有必要写出这种臃肿的代码的，函数式也是可以做到。</p>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>本篇会深入浅出的指出日常代码可以简化的地方，包括但是不止函数式编程，在以后的文章里，我们还会进一步探讨函数式编程的各种运用。</p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>在实际编码的过程中会遇到很多类数组的数据，或者一个长字符串排序等问题，以此我们可以接住数组中自带的原型方法去解决问题。</p>\n<h2 id=\"Array-prototype-every\"><a href=\"#Array-prototype-every\" class=\"headerlink\" title=\"Array.prototype.every()\"></a>Array.prototype.every()</h2><p>这个方法是用来测试数组的所有元素是否都通过了指定函数的测试</p>\n<blockquote>\n<p>every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从来没被赋值的索引调用。<br>callback 被调用时传入三个参数：元素值，元素的索引，原数组。</p>\n</blockquote>\n<p>举个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 检测数组中是否全都小于100的数字</div><div class=\"line\">var flag = [1，32，55，67，98，101，33，44，43].every(function(item， index， array)&#123;</div><div class=\"line\">\treturn item &lt;= 100</div><div class=\"line\">&#125;)</div><div class=\"line\">console.log(flag) //结果为false，101大于100</div></pre></td></tr></table></figure>\n<p>通过这个例子我们已经看到every的作用，下面看看在实际场景中的运用<br>我们在写复选框组这个组件的时候，有一个“全选”这个复选框，当我们在手动勾选全部的子复选框时，全选框会自动勾选上，取消其中一个的时候，全选框就会取消勾选，在实际编码过程中，我们可能要写一个for循环来轮询一遍每个子组件的状态，现在我们可以用every实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var allCheckBoxDom = document.getElementsByClassName(&apos;quanxuan&apos;)[0] //获取全选复选框</div><div class=\"line\">var childrenCheckBoxDoms = document.getElementsByClassName(&apos;zixuanze&apos;) //获取子选择框组，这是一个类数组</div><div class=\"line\">var flag = [].every.call(childrenCheckBoxDoms， function(item， index， array) &#123;</div><div class=\"line\">\titem.checked === true</div><div class=\"line\">&#125;)</div><div class=\"line\">if(flag)&#123;</div><div class=\"line\">\tallCheckBoxDom.checked = true;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">\tallCheckBoxDom.checked = false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就方便的实现了这个功能</p>\n<blockquote>\n<p>对应的方法有Array.prototype.some()，其作用是只要数组中有一个满足条件，就会返回true，用法与every相同，在这里就不赘述了</p>\n<h2 id=\"Array-prototype-map\"><a href=\"#Array-prototype-map\" class=\"headerlink\" title=\"Array.prototype.map()\"></a>Array.prototype.map()</h2><p>这个方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。<br>举个例子<br>我们通过ajax获取到的一组数据，类似这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jobs = [</div><div class=\"line\">\t&#123;name:&apos;zk&apos;，age:22&#125;</div><div class=\"line\">\t&#123;name:&apos;ab&apos;，age:12&#125;</div><div class=\"line\">\t&#123;name:&apos;cd&apos;，age:33&#125;</div><div class=\"line\">\t&#123;name:&apos;pol&apos;，age:5&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>如果我们想把这个数组里面的name提取出来组成一个数组，可以这样做<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var nameList = jobs.map(function(item， index， array)&#123;</div><div class=\"line\">\treturn item.name</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Array-prototype-reduce\"><a href=\"#Array-prototype-reduce\" class=\"headerlink\" title=\"Array.prototype.reduce()\"></a>Array.prototype.reduce()</h2><p>这个方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。<br>也就是说是一种迭代器，另一种意义上的for循环，它传给callback函数的参数有四个，分别是<br>previousValue 上一次调用回调返回的值，或者是提供的初始值（initialValue）<br>currentValue 数组中当前被处理的元素<br>index 当前元素在数组中的索引<br>array 调用 reduce 的数组<br>另外reduce还可以接受一个初始值<br>举个例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1，2，3，4].reduce(function(previousValue， currentValue， index， array)&#123;</div><div class=\"line\">\treturn previousValue + currentValue</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>其结果就是把数组里面的值求和，结果是10，如果给redece加一个初始值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1，2，3，4].reduce(function(previousValue， currentValue， index， array)&#123;</div><div class=\"line\">\treturn previousValue + currentValue</div><div class=\"line\">&#125;，5)</div></pre></td></tr></table></figure></p>\n<p>这样子结果就是15</p>\n<h1 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h1><p>Math是js自带的一个数学库，可以方便的做各种计算，我们编码过程中可以巧妙借用他来实现功能，避免冗余的代码。</p>\n<h2 id=\"Math-max\"><a href=\"#Math-max\" class=\"headerlink\" title=\"Math.max\"></a>Math.max</h2><p>看名字你们也知道和Math.min对应，求最大值，简单的用法是直接传值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(Math.max(1，2，4，5，6，7)) //输出7</div></pre></td></tr></table></figure></p>\n<p>但是如果我们用于数组，就可以很简单的求出一个数组里面的最大值（或者最小值）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var array = [44，12，42，11，87，33，49，3，487，111]</div><div class=\"line\">var maxNum = Math.max.call(Math， array)</div><div class=\"line\">console.log(maxNum) //输出487</div></pre></td></tr></table></figure></p>\n<h2 id=\"Math-min\"><a href=\"#Math-min\" class=\"headerlink\" title=\"Math.min\"></a>Math.min</h2><p>和Math.max用法相同，不再赘述</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>函数式编程还有很多用法，这只是第一篇，我会在以后的文章里面介绍更多的用法。</p>"},{"title":"requestAnimationFrame 动画(一)","date":"2016-10-21T04:21:35.000Z","_content":"\n让我们写点能动的东西吧!\n<!-- more -->\n今天让我们写点有趣的东西，用js实现动画\n# 动画的定义\n在维基百科里面，动画是这样定义的:\n> 动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。\n\n也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画\n![每秒10帧的动画](/images/requestAnimationFrame/Animexample1.gif)图1\n![每秒2帧的动画](/images/requestAnimationFrame/Animexample2.gif)图2\n\n可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果\n根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms\n# 使用setTimeout实现动画\n在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码\n\n```\nsetTimeout(function() {\n\t// do something here\n\tsetTimeout(arguments.callee)\n}，1000/60)\n```\n\n这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿\n(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)\n# 使用requestAnimationFrame来实现动画\n在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画\n现在我们就用他来实现一个简单的让小球运动的动画:\n```\nvar ball = document.getElementsByTagName('div')[0];\nball.style.left = getComputedStyle(ball)['left']; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.left = (parseFloat(ball.style.left) + 5) +'px';\n\tif (parseFloat(ball.style.left) < 500) {\n\t\trequestAnimationFrame(arguments.callee)\n\t}\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/bwOBPV)\n# 小例子\n是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球\n在此之前，我们要了解以下几个要点:\n- 小球升起时候做减速运动，落下的时候做加速运动\n- 小球如果从地面开是运动，肯定有一个向上的初速度\n- 用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度\n\n好，以下就是成果代码:\n```\nvar ball = document.getElementsByTagName('div')[0];\nvar beginSpeed = 20，speed = 20，a = 0.5;// 设置好小球的初始速度，现速度和加速度\nvar beginHeight = getComputedStyle(ball)['top']\nball.style.top = beginHeight; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.top = (parseFloat(ball.style.top) - speed) +'px';\n\tspeed = speed - a;\n\tif (parseFloat(ball.style.top) >= 500) { //小球回落地面的时候，重置高度和速度\n\t\tball.style.top = beginHeight;\n\t\tspeed = beginSpeed;\n\t}\n\trequestAnimationFrame(arguments.callee)\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/PGXWPw)","source":"_posts/requestAnimationFrame-动画-一.md","raw":"---\ntitle: requestAnimationFrame 动画(一)\ndate: 2016-10-21 12:21:35\ncategories: [博客]\ntags: [js动画]\n---\n\n让我们写点能动的东西吧!\n<!-- more -->\n今天让我们写点有趣的东西，用js实现动画\n# 动画的定义\n在维基百科里面，动画是这样定义的:\n> 动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。\n\n也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画\n![每秒10帧的动画](/images/requestAnimationFrame/Animexample1.gif)图1\n![每秒2帧的动画](/images/requestAnimationFrame/Animexample2.gif)图2\n\n可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果\n根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms\n# 使用setTimeout实现动画\n在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码\n\n```\nsetTimeout(function() {\n\t// do something here\n\tsetTimeout(arguments.callee)\n}，1000/60)\n```\n\n这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿\n(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)\n# 使用requestAnimationFrame来实现动画\n在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画\n现在我们就用他来实现一个简单的让小球运动的动画:\n```\nvar ball = document.getElementsByTagName('div')[0];\nball.style.left = getComputedStyle(ball)['left']; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.left = (parseFloat(ball.style.left) + 5) +'px';\n\tif (parseFloat(ball.style.left) < 500) {\n\t\trequestAnimationFrame(arguments.callee)\n\t}\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/bwOBPV)\n# 小例子\n是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球\n在此之前，我们要了解以下几个要点:\n- 小球升起时候做减速运动，落下的时候做加速运动\n- 小球如果从地面开是运动，肯定有一个向上的初速度\n- 用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度\n\n好，以下就是成果代码:\n```\nvar ball = document.getElementsByTagName('div')[0];\nvar beginSpeed = 20，speed = 20，a = 0.5;// 设置好小球的初始速度，现速度和加速度\nvar beginHeight = getComputedStyle(ball)['top']\nball.style.top = beginHeight; //设置好小球的初始值\nrequestAnimationFrame(function() {\n\tball.style.top = (parseFloat(ball.style.top) - speed) +'px';\n\tspeed = speed - a;\n\tif (parseFloat(ball.style.top) >= 500) { //小球回落地面的时候，重置高度和速度\n\t\tball.style.top = beginHeight;\n\t\tspeed = beginSpeed;\n\t}\n\trequestAnimationFrame(arguments.callee)\n})\n```\n[点击这里预览效果](https://codepen.io/jackfred/pen/PGXWPw)","slug":"requestAnimationFrame-动画-一","published":1,"updated":"2016-11-22T09:15:35.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87v00086wawwls1p8rk","content":"<p>让我们写点能动的东西吧!<br><a id=\"more\"></a><br>今天让我们写点有趣的东西，用js实现动画</p>\n<h1 id=\"动画的定义\"><a href=\"#动画的定义\" class=\"headerlink\" title=\"动画的定义\"></a>动画的定义</h1><p>在维基百科里面，动画是这样定义的:</p>\n<blockquote>\n<p>动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。</p>\n</blockquote>\n<p>也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画<br><img src=\"/images/requestAnimationFrame/Animexample1.gif\" alt=\"每秒10帧的动画\">图1<br><img src=\"/images/requestAnimationFrame/Animexample2.gif\" alt=\"每秒2帧的动画\">图2</p>\n<p>可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果<br>根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms</p>\n<h1 id=\"使用setTimeout实现动画\"><a href=\"#使用setTimeout实现动画\" class=\"headerlink\" title=\"使用setTimeout实现动画\"></a>使用setTimeout实现动画</h1><p>在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function() &#123;</div><div class=\"line\">\t// do something here</div><div class=\"line\">\tsetTimeout(arguments.callee)</div><div class=\"line\">&#125;，1000/60)</div></pre></td></tr></table></figure>\n<p>这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿<br>(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)</p>\n<h1 id=\"使用requestAnimationFrame来实现动画\"><a href=\"#使用requestAnimationFrame来实现动画\" class=\"headerlink\" title=\"使用requestAnimationFrame来实现动画\"></a>使用requestAnimationFrame来实现动画</h1><p>在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画<br>现在我们就用他来实现一个简单的让小球运动的动画:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ball = document.getElementsByTagName(&apos;div&apos;)[0];</div><div class=\"line\">ball.style.left = getComputedStyle(ball)[&apos;left&apos;]; //设置好小球的初始值</div><div class=\"line\">requestAnimationFrame(function() &#123;</div><div class=\"line\">\tball.style.left = (parseFloat(ball.style.left) + 5) +&apos;px&apos;;</div><div class=\"line\">\tif (parseFloat(ball.style.left) &lt; 500) &#123;</div><div class=\"line\">\t\trequestAnimationFrame(arguments.callee)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/bwOBPV\" target=\"_blank\" rel=\"external\">点击这里预览效果</a></p>\n<h1 id=\"小例子\"><a href=\"#小例子\" class=\"headerlink\" title=\"小例子\"></a>小例子</h1><p>是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球<br>在此之前，我们要了解以下几个要点:</p>\n<ul>\n<li>小球升起时候做减速运动，落下的时候做加速运动</li>\n<li>小球如果从地面开是运动，肯定有一个向上的初速度</li>\n<li>用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度</li>\n</ul>\n<p>好，以下就是成果代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ball = document.getElementsByTagName(&apos;div&apos;)[0];</div><div class=\"line\">var beginSpeed = 20，speed = 20，a = 0.5;// 设置好小球的初始速度，现速度和加速度</div><div class=\"line\">var beginHeight = getComputedStyle(ball)[&apos;top&apos;]</div><div class=\"line\">ball.style.top = beginHeight; //设置好小球的初始值</div><div class=\"line\">requestAnimationFrame(function() &#123;</div><div class=\"line\">\tball.style.top = (parseFloat(ball.style.top) - speed) +&apos;px&apos;;</div><div class=\"line\">\tspeed = speed - a;</div><div class=\"line\">\tif (parseFloat(ball.style.top) &gt;= 500) &#123; //小球回落地面的时候，重置高度和速度</div><div class=\"line\">\t\tball.style.top = beginHeight;</div><div class=\"line\">\t\tspeed = beginSpeed;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\trequestAnimationFrame(arguments.callee)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/PGXWPw\" target=\"_blank\" rel=\"external\">点击这里预览效果</a></p>\n","excerpt":"<p>让我们写点能动的东西吧!<br>","more":"<br>今天让我们写点有趣的东西，用js实现动画</p>\n<h1 id=\"动画的定义\"><a href=\"#动画的定义\" class=\"headerlink\" title=\"动画的定义\"></a>动画的定义</h1><p>在维基百科里面，动画是这样定义的:</p>\n<blockquote>\n<p>动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品。</p>\n</blockquote>\n<p>也就是说每秒播放的画面张数决定了动画的流畅度，下面图1是每秒10帧的动画，图2是每秒2帧的动画<br><img src=\"/images/requestAnimationFrame/Animexample1.gif\" alt=\"每秒10帧的动画\">图1<br><img src=\"/images/requestAnimationFrame/Animexample2.gif\" alt=\"每秒2帧的动画\">图2</p>\n<p>可以看到图1明显比图2的小球运动的流畅了很多，我们在js中也能实现类似的效果<br>根据最新的官方标准，画面更新的频率至少要达到每秒60次才能让肉眼感受到流畅的动画效果，即每一张画面占用时间是1000/60=16.6666ms</p>\n<h1 id=\"使用setTimeout实现动画\"><a href=\"#使用setTimeout实现动画\" class=\"headerlink\" title=\"使用setTimeout实现动画\"></a>使用setTimeout实现动画</h1><p>在以前我们要实现一个动画，可能要借助与js的定时函数setTimeout来实现，即类似下面的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function() &#123;</div><div class=\"line\">\t// do something here</div><div class=\"line\">\tsetTimeout(arguments.callee)</div><div class=\"line\">&#125;，1000/60)</div></pre></td></tr></table></figure>\n<p>这样子的缺点是有的，setTimeout不会立即执行，用过setTimeout的同学都知道，如果给setTimeout设置200ms后执行，通常需要等待大于200ms的时间函数才会被执行，这就造成了卡顿<br>(原因:setTimeout中的定时器并不是准确的时间，实际中它需要在执行完前面的函数后才定时执行)</p>\n<h1 id=\"使用requestAnimationFrame来实现动画\"><a href=\"#使用requestAnimationFrame来实现动画\" class=\"headerlink\" title=\"使用requestAnimationFrame来实现动画\"></a>使用requestAnimationFrame来实现动画</h1><p>在最新的标准里面，js为我们提供了一个专门用来执行动画的函数 requestAnimationFrame ，调用它可以很完美的让函数在1000/60ms时执行，当然对应的自然有cancelAnimationFrame函数来取消执行动画<br>现在我们就用他来实现一个简单的让小球运动的动画:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ball = document.getElementsByTagName(&apos;div&apos;)[0];</div><div class=\"line\">ball.style.left = getComputedStyle(ball)[&apos;left&apos;]; //设置好小球的初始值</div><div class=\"line\">requestAnimationFrame(function() &#123;</div><div class=\"line\">\tball.style.left = (parseFloat(ball.style.left) + 5) +&apos;px&apos;;</div><div class=\"line\">\tif (parseFloat(ball.style.left) &lt; 500) &#123;</div><div class=\"line\">\t\trequestAnimationFrame(arguments.callee)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/bwOBPV\">点击这里预览效果</a></p>\n<h1 id=\"小例子\"><a href=\"#小例子\" class=\"headerlink\" title=\"小例子\"></a>小例子</h1><p>是不是很流畅?其实如果要说教程的话，到这里是可以结束了，很多很炫目的效果其实都是这些基础的代码搭建起来的，里面会涉及到很多数学知识，只要能理解清楚其中的数学原理，就可以很轻松的实现各种效果，最后让我们实现一个文章里面图1的效果，一个弹跳的小球<br>在此之前，我们要了解以下几个要点:</p>\n<ul>\n<li>小球升起时候做减速运动，落下的时候做加速运动</li>\n<li>小球如果从地面开是运动，肯定有一个向上的初速度</li>\n<li>用requestAnimationFrame控制速度的话，在小球接触地面的时候，要将速度重置成原来的向上的速度</li>\n</ul>\n<p>好，以下就是成果代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ball = document.getElementsByTagName(&apos;div&apos;)[0];</div><div class=\"line\">var beginSpeed = 20，speed = 20，a = 0.5;// 设置好小球的初始速度，现速度和加速度</div><div class=\"line\">var beginHeight = getComputedStyle(ball)[&apos;top&apos;]</div><div class=\"line\">ball.style.top = beginHeight; //设置好小球的初始值</div><div class=\"line\">requestAnimationFrame(function() &#123;</div><div class=\"line\">\tball.style.top = (parseFloat(ball.style.top) - speed) +&apos;px&apos;;</div><div class=\"line\">\tspeed = speed - a;</div><div class=\"line\">\tif (parseFloat(ball.style.top) &gt;= 500) &#123; //小球回落地面的时候，重置高度和速度</div><div class=\"line\">\t\tball.style.top = beginHeight;</div><div class=\"line\">\t\tspeed = beginSpeed;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\trequestAnimationFrame(arguments.callee)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://codepen.io/jackfred/pen/PGXWPw\">点击这里预览效果</a></p>"},{"title":"用脚本锁住百度云下载加速倒计时,从而实现无限加速","date":"2017-01-06T01:03:36.000Z","_content":"","source":"_posts/用脚本锁住百度云下载加速倒计时-从而实现无限加速.md","raw":"---\ntitle: '用脚本锁住百度云下载加速倒计时,从而实现无限加速'\ndate: 2017-01-06 09:03:36\ntags:\n---\n","slug":"用脚本锁住百度云下载加速倒计时-从而实现无限加速","published":1,"updated":"2017-01-06T01:03:37.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87v000b6wawnegwhahc","content":"","excerpt":"","more":""},{"title":"关于博客内容的想法","date":"2016-10-24T06:57:00.000Z","_content":"说点感想\n<!-- more -->\n从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候\n常常不知道怎么写\n写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我\n还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸\n还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大\n\n但是\n每一个阅读我博客的人，我觉得应该对你们负责\n如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正\n如果你们觉得我说的有错误，欢迎打脸\n\n对你们负责也是对我自己负责。","source":"_posts/关于博客内容的想法.md","raw":"---\ntitle: 关于博客内容的想法\ndate: 2016-10-24 14:57:00\ncategories: [博客]\ntags: [随想]\n---\n说点感想\n<!-- more -->\n从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候\n常常不知道怎么写\n写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我\n还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸\n还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大\n\n但是\n每一个阅读我博客的人，我觉得应该对你们负责\n如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正\n如果你们觉得我说的有错误，欢迎打脸\n\n对你们负责也是对我自己负责。","slug":"关于博客内容的想法","published":1,"updated":"2016-11-22T09:15:35.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m87v000d6wawjk7rzrcn","content":"<p>说点感想<br><a id=\"more\"></a><br>从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候<br>常常不知道怎么写<br>写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我<br>还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸<br>还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大</p>\n<p>但是<br>每一个阅读我博客的人，我觉得应该对你们负责<br>如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正<br>如果你们觉得我说的有错误，欢迎打脸</p>\n<p>对你们负责也是对我自己负责。</p>\n","excerpt":"<p>说点感想<br>","more":"<br>从开始写博客到现在，脑子里面有无数的想法，有很多想表达的东西，但是真的到写的时候<br>常常不知道怎么写<br>写博客给我最大的感受就是考验表达能力，我虽然懂了，但是如果表达给你的时候你，你没懂，那责任肯定在我<br>还有就是考研我的严谨程度，虽然不知道会有多少人来看我的博客，但是既然发布出来了，我就不能信口开河，写点东西的时候就会各种查文档，以防止被打脸<br>还有就是对于要写的内容的焦虑，写的东西有没有过时了？写的东西是不是太早了，以后还会变的？没办法前端就是这样，更新快，分裂大</p>\n<p>但是<br>每一个阅读我博客的人，我觉得应该对你们负责<br>如果你们觉得我的博客表述有问题，请在下面指正出来，我会改正<br>如果你们觉得我说的有错误，欢迎打脸</p>\n<p>对你们负责也是对我自己负责。</p>"},{"title":"第一篇博客是不是要说一句hello world?","date":"2016-10-18T08:11:18.000Z","_content":"\n  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。\n<!-- more -->\n  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。\n# 16/10/20\n  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。\n  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。\n  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。\n  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。\n  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?","source":"_posts/第一篇博客.md","raw":"---\ntitle: 第一篇博客是不是要说一句hello world?\ndate: 2016-10-18 16:11:18\ncategories: [博客]\ntags: [随想]\n---\n\n  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。\n<!-- more -->\n  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。\n# 16/10/20\n  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。\n  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。\n  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。\n  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。\n  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?","slug":"第一篇博客","published":1,"updated":"2016-11-22T09:15:35.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m88a000h6waw9p3vo5me","content":"<p>  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。<br><a id=\"more\"></a><br>  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。</p>\n<h1 id=\"16-10-20\"><a href=\"#16-10-20\" class=\"headerlink\" title=\"16/10/20\"></a>16/10/20</h1><p>  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。<br>  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。<br>  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。<br>  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。<br>  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?</p>\n","excerpt":"<p>  从开始工作到现在，已经过去了两年。直到现在才决定开一个博客，记录平常的工作经验和想法。<br>","more":"<br>  这是一个不断会被编辑的文章，里面会有我对程序员这个职业的思考。</p>\n<h1 id=\"16-10-20\"><a href=\"#16-10-20\" class=\"headerlink\" title=\"16/10/20\"></a>16/10/20</h1><p>  很多人觉得程序员是一个非常考验脑力的工作，其实我觉得在这个世界上，不管是国内外的，都有不动脑的程序员和动脑子的程序员两种。<br>  一种程序员或许处于对于技术的热爱，或者对于一个更好的工作岗位的期待，不断的去主动学习，内心有各种各样的理由去驱动他去学习。因为他知道，在程序员这个世界里面，技术代表一切。<br>  还有一种是传统行业里面类型的程序员，搞好自己手中的活，踏踏实实做好手边的事，每天被老婆孩子上司烦得受不了，根本没心思去管其他事。<br>  我们或多或少的可能会从第一种程序员过渡到第二种，也有不少人可能一直做第一种或者第二种程序员，没有必要分辨哪种好哪种不好，大多数情况下，我们更多需要考虑的是，自己的职业规划。<br>  也许我们有一天，会老的写不了代码了，更不上新的技术了，在那一天来临之前，我们做好准备了吗?</p>"},{"title":"读书笔记:单例模式","date":"2016-10-24T07:34:26.000Z","_content":"单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。\n<!-- more -->\n# 定义\n单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。\n# 构建思路\n用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建\n# 初步实现\n```\nvar createH1 = (function(){\n\tvar flag;\t//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它\n\treturn function(){\n\t\tif(flag){\t//判断是否有值,如果有,就返回对该值的引用\n\t\t\treturn flag\n\t\t}else{\n\t\t\tflag = document.createElement('h1');\n\t\t\tflag.innerHTML = 'test';\n\t\t\tdocument.body.appendChild(flag);\n\t\t}\n\t}\n})()\n```\ncreateH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。\n测试结果\n![单例模式](/images/moshi/moshi1.jpg)\n在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。\n# 实战题\n这是一个来自[codewars](https://www.codewars.com)的题目\n> Description:\n> Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.\n> You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?\n> The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + ... + 1^3 = m if such a n exists or -1 if there is no such n.\n> Examples:\n> findNb(1071225) --> 45\n> findNb(91716553919377) --> -1\n\n大意就是给出一个很大的数字,找到他的\"基数\"。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + ... + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1\n这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：\n```\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(jisuan(i)==m){\n            result = i;\n            break;\n        }else if(jisuan(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回\n重新构建的代码\n```\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\nvar getResult = (function(){\n    var cache = {};\n    return function(num){\n        if(cache[num]){\n            return cache[num]\n        }else{\n            return cache[num] = jisuan(num)\n        }\n    }\n})()\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(getResult(i)==m){\n            result = i;\n            break;\n        }else if(getResult(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n让我们看看执行的效率\n![单例模式](/images/moshi/moshi2.jpg)\n# 结语\n单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。","source":"_posts/读书笔记-单例模式.md","raw":"---\ntitle: '读书笔记:单例模式'\ndate: 2016-10-24 15:34:26\ncategories: [博客]\ntags: [模式设计,读书笔记]\n---\n单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。\n<!-- more -->\n# 定义\n单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。\n# 构建思路\n用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建\n# 初步实现\n```\nvar createH1 = (function(){\n\tvar flag;\t//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它\n\treturn function(){\n\t\tif(flag){\t//判断是否有值,如果有,就返回对该值的引用\n\t\t\treturn flag\n\t\t}else{\n\t\t\tflag = document.createElement('h1');\n\t\t\tflag.innerHTML = 'test';\n\t\t\tdocument.body.appendChild(flag);\n\t\t}\n\t}\n})()\n```\ncreateH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。\n测试结果\n![单例模式](/images/moshi/moshi1.jpg)\n在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。\n# 实战题\n这是一个来自[codewars](https://www.codewars.com)的题目\n> Description:\n> Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.\n> You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?\n> The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + ... + 1^3 = m if such a n exists or -1 if there is no such n.\n> Examples:\n> findNb(1071225) --> 45\n> findNb(91716553919377) --> -1\n\n大意就是给出一个很大的数字,找到他的\"基数\"。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + ... + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1\n这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：\n```\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(jisuan(i)==m){\n            result = i;\n            break;\n        }else if(jisuan(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回\n重新构建的代码\n```\nvar jisuan = function(num){\n    var sum = 0;\n    for(var i = num;i>0;i--){\n        sum = sum + i*i*i\n    }\n    return sum\n}\nvar getResult = (function(){\n    var cache = {};\n    return function(num){\n        if(cache[num]){\n            return cache[num]\n        }else{\n            return cache[num] = jisuan(num)\n        }\n    }\n})()\n\nfunction findNb(m) {\n    var flag=-1;\n    var result = -1;\n    for(var i = 1;i>0;i++){\n        if(getResult(i)==m){\n            result = i;\n            break;\n        }else if(getResult(i)>m){\n            break;\n        }\n    }\n    // your code\n    return result;\n}\n```\n让我们看看执行的效率\n![单例模式](/images/moshi/moshi2.jpg)\n# 结语\n单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。","slug":"读书笔记-单例模式","published":1,"updated":"2016-11-22T09:15:35.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m88a000j6waw1krplm7l","content":"<p>单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。<br><a id=\"more\"></a></p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p>\n<h1 id=\"构建思路\"><a href=\"#构建思路\" class=\"headerlink\" title=\"构建思路\"></a>构建思路</h1><p>用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建</p>\n<h1 id=\"初步实现\"><a href=\"#初步实现\" class=\"headerlink\" title=\"初步实现\"></a>初步实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var createH1 = (function()&#123;</div><div class=\"line\">\tvar flag;\t//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它</div><div class=\"line\">\treturn function()&#123;</div><div class=\"line\">\t\tif(flag)&#123;\t//判断是否有值,如果有,就返回对该值的引用</div><div class=\"line\">\t\t\treturn flag</div><div class=\"line\">\t\t&#125;else&#123;</div><div class=\"line\">\t\t\tflag = document.createElement(&apos;h1&apos;);</div><div class=\"line\">\t\t\tflag.innerHTML = &apos;test&apos;;</div><div class=\"line\">\t\t\tdocument.body.appendChild(flag);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>createH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。<br>测试结果<br><img src=\"/images/moshi/moshi1.jpg\" alt=\"单例模式\"><br>在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。</p>\n<h1 id=\"实战题\"><a href=\"#实战题\" class=\"headerlink\" title=\"实战题\"></a>实战题</h1><p>这是一个来自<a href=\"https://www.codewars.com\" target=\"_blank\" rel=\"external\">codewars</a>的题目</p>\n<blockquote>\n<p>Description:<br>Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.<br>You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?<br>The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.<br>Examples:<br>findNb(1071225) –&gt; 45<br>findNb(91716553919377) –&gt; -1</p>\n</blockquote>\n<p>大意就是给出一个很大的数字,找到他的”基数”。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + … + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1<br>这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jisuan = function(num)&#123;</div><div class=\"line\">    var sum = 0;</div><div class=\"line\">    for(var i = num;i&gt;0;i--)&#123;</div><div class=\"line\">        sum = sum + i*i*i</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function findNb(m) &#123;</div><div class=\"line\">    var flag=-1;</div><div class=\"line\">    var result = -1;</div><div class=\"line\">    for(var i = 1;i&gt;0;i++)&#123;</div><div class=\"line\">        if(jisuan(i)==m)&#123;</div><div class=\"line\">            result = i;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;else if(jisuan(i)&gt;m)&#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // your code</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回<br>重新构建的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jisuan = function(num)&#123;</div><div class=\"line\">    var sum = 0;</div><div class=\"line\">    for(var i = num;i&gt;0;i--)&#123;</div><div class=\"line\">        sum = sum + i*i*i</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum</div><div class=\"line\">&#125;</div><div class=\"line\">var getResult = (function()&#123;</div><div class=\"line\">    var cache = &#123;&#125;;</div><div class=\"line\">    return function(num)&#123;</div><div class=\"line\">        if(cache[num])&#123;</div><div class=\"line\">            return cache[num]</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            return cache[num] = jisuan(num)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">function findNb(m) &#123;</div><div class=\"line\">    var flag=-1;</div><div class=\"line\">    var result = -1;</div><div class=\"line\">    for(var i = 1;i&gt;0;i++)&#123;</div><div class=\"line\">        if(getResult(i)==m)&#123;</div><div class=\"line\">            result = i;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;else if(getResult(i)&gt;m)&#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // your code</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>让我们看看执行的效率<br><img src=\"/images/moshi/moshi2.jpg\" alt=\"单例模式\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。</p>\n","excerpt":"<p>单例模式是设计模式里面最简单的一种模式，但是用处非常的广泛，用好了可以小幅度的提示整个页面的性能。<br>","more":"</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p>\n<h1 id=\"构建思路\"><a href=\"#构建思路\" class=\"headerlink\" title=\"构建思路\"></a>构建思路</h1><p>用闭包实现创建对象并抛出引用，以后在调用时直接抛出引用，不再创建</p>\n<h1 id=\"初步实现\"><a href=\"#初步实现\" class=\"headerlink\" title=\"初步实现\"></a>初步实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var createH1 = (function()&#123;</div><div class=\"line\">\tvar flag;\t//上一层的执行环境,变量没有办法被自动消除,因为下一层的函数引用的它</div><div class=\"line\">\treturn function()&#123;</div><div class=\"line\">\t\tif(flag)&#123;\t//判断是否有值,如果有,就返回对该值的引用</div><div class=\"line\">\t\t\treturn flag</div><div class=\"line\">\t\t&#125;else&#123;</div><div class=\"line\">\t\t\tflag = document.createElement(&apos;h1&apos;);</div><div class=\"line\">\t\t\tflag.innerHTML = &apos;test&apos;;</div><div class=\"line\">\t\t\tdocument.body.appendChild(flag);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>createH1 在一开始使用了一个闭包，创建了一个只能它自己访问的值flag，然后在判断flag是否有值，如果有值，则直接返回flag的引用，如果没有则做创建操作，并给flag赋值，这样就可以保证在调用createH1这个函数时，创建操作只做了一遍，而剩下的执行都是返回引用。<br>测试结果<br><img src=\"/images/moshi/moshi1.jpg\" alt=\"单例模式\"><br>在js中单例模式并不是一个复杂的东西，但是能给我们日常工作带来好处，比如缓存。</p>\n<h1 id=\"实战题\"><a href=\"#实战题\" class=\"headerlink\" title=\"实战题\"></a>实战题</h1><p>这是一个来自<a href=\"https://www.codewars.com\">codewars</a>的题目</p>\n<blockquote>\n<p>Description:<br>Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.<br>You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?<br>The parameter of the function findNb (find_nb, find-nb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.<br>Examples:<br>findNb(1071225) –&gt; 45<br>findNb(91716553919377) –&gt; -1</p>\n</blockquote>\n<p>大意就是给出一个很大的数字,找到他的”基数”。即给出一个数m，存在一个数n，使得m = n^3 + (n-1)^3 + … + 1^3 如果存在这个数就返回这个数,如果不存在则返回-1<br>这道题呢用电脑实现虽然麻烦了一点，但是也不难，直接给出正常解题答案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jisuan = function(num)&#123;</div><div class=\"line\">    var sum = 0;</div><div class=\"line\">    for(var i = num;i&gt;0;i--)&#123;</div><div class=\"line\">        sum = sum + i*i*i</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function findNb(m) &#123;</div><div class=\"line\">    var flag=-1;</div><div class=\"line\">    var result = -1;</div><div class=\"line\">    for(var i = 1;i&gt;0;i++)&#123;</div><div class=\"line\">        if(jisuan(i)==m)&#123;</div><div class=\"line\">            result = i;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;else if(jisuan(i)&gt;m)&#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // your code</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样子写没什么问题，但是有一个缺点，就是如果要执行计算多个数据的话，计算机就会在每次计算都会从1开始递增计算，这无疑增加了没必要的计算时间，我们可以创建一个缓存，在不污染全局变量的情况下，把结果缓存起来，下次再执行的时候，直接查找结果并返回<br>重新构建的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">var jisuan = function(num)&#123;</div><div class=\"line\">    var sum = 0;</div><div class=\"line\">    for(var i = num;i&gt;0;i--)&#123;</div><div class=\"line\">        sum = sum + i*i*i</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum</div><div class=\"line\">&#125;</div><div class=\"line\">var getResult = (function()&#123;</div><div class=\"line\">    var cache = &#123;&#125;;</div><div class=\"line\">    return function(num)&#123;</div><div class=\"line\">        if(cache[num])&#123;</div><div class=\"line\">            return cache[num]</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            return cache[num] = jisuan(num)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">function findNb(m) &#123;</div><div class=\"line\">    var flag=-1;</div><div class=\"line\">    var result = -1;</div><div class=\"line\">    for(var i = 1;i&gt;0;i++)&#123;</div><div class=\"line\">        if(getResult(i)==m)&#123;</div><div class=\"line\">            result = i;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;else if(getResult(i)&gt;m)&#123;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // your code</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>让我们看看执行的效率<br><img src=\"/images/moshi/moshi2.jpg\" alt=\"单例模式\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>单例模式是设计模式中最简单的一个，在以后的文章里我会继续讲解更多的模式设计，写代码不一定要堆砌各种模式，但是懂一点，在生产环境中使用，就会对产品有许多好的改变。</p>"},{"title":"impress简易教程","date":"2016-12-23T02:26:37.000Z","_content":"快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。\n<!-- more -->\n# 效果展示\n[聚众编码！](https://juzoom.github.io/)\n# 原理介绍\n这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。\n# 项目地址和文档地址\n[项目地址](https://github.com/impress/impress.js)\n[文档地址](https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md)\n# 起步\n首先要引入impress.js文件，和普通的js引入方式是一样的\n然后在文档里加入代码\n```\n<div id=\"impress\"></div> //id可以自定义\n```\n然后在引入的impress文件下插入这段代码\n```\nimpress( \"root\" ); //这里是你的id，如果id是impress，则这一步省略\nimpress().init();\n```\n# 插入ppt\n## 基础\n在你指定的根div中间插入ppt类的div\n```\n<div id=\"impress\">\n\t<div id=\"test\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test\n\t</div>\n</div>\n```\n这里div的class必须要有'step'，id可以有可以没有，如果没有，impress就会把你的id默认变成'step-1'这样的。\n'data-x'和'data-y'这样的就是ppt的定位\n## 2D平移\n如果我们再加入一段ppt类的div，页面就可以平移动起来了\n```\n<div id=\"impress\">\n\t<div id=\"test1\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test1\n\t</div>\n\t<div id=\"test2\" class=\"step\" data-x=\"1600\" data-y=\"0\">\n\t    test2\n\t</div>\n</div>\n```\n## 缩放\n我们想加入缩放的话只要加入'data-scale'这个属性就可以了，赋值为数字，越大缩放越大\n```\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-scale=\"3\">\n    test\n</div>\n```\n## 2D旋转\n如果想做旋转效果的ppt，加入'data-rotate'属性，赋值范围0~360\n```\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-rotate=\"90\" data-scale=\"3\">\n    test\n</div>\n```\n## 3D定位\n加入'data-z'属性实现3D空间上的定位\n## 3D翻滚\n可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个'data-rotate-x'和'data-rotate-y'，分别实现横向和纵向翻滚。\n```\n<div id=\"test\" class=\"step\" data-x=\"6200\" data-y=\"4300\" data-z=\"-100\" data-rotate-x=\"-40\" data-rotate-y=\"10\">\n    test\n</div>\n```\n# 方法接口\nimpress还给出了方法接口\n## .init()\n初始化用途\n```\nvar api = impress();\napi.init();\n```\n## .next()\n切换下一个ppt的功能\n```\nvar api = impress();\napi.init();\napi.next(); //使用方法下面都一样\n```\n## .prev()\n切换前一个ppt的功能\n## .goto( stepIndex | stepElementId | stepElement, [ duration ] )\n切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间\n# 事件监听接口\nimpress给出了两个事件监听接口\nimpress:stepenter 切入当前ppt的事件\nimpress:stepleave 切出当前ppt的事件\n```\nvar rootElement = document.getElementById( \"impress\" );\nrootElement.addEventListener( \"impress:stepenter\", function() {\n\tvar currentStep = document.querySelector( \".present\" );\n\tconsole.log( \"Entered the Step Element '\" + currentStep.id + \"'\" );\n});\n\nrootElement.addEventListener( \"impress:stepleave\", function(event) {\n\tvar currentStep = event.target\n\tconsole.log( \"Left the Step Element '\" + currentStep.id + \"'\" );\n});\n```\n# 样式\nimpress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！","source":"_posts/impress简易教程.md","raw":"---\ntitle: impress简易教程\ndate: 2016-12-23 10:26:37\ncategories: [博客]\ntags: [impress,js框架]\n---\n快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。\n<!-- more -->\n# 效果展示\n[聚众编码！](https://juzoom.github.io/)\n# 原理介绍\n这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。\n# 项目地址和文档地址\n[项目地址](https://github.com/impress/impress.js)\n[文档地址](https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md)\n# 起步\n首先要引入impress.js文件，和普通的js引入方式是一样的\n然后在文档里加入代码\n```\n<div id=\"impress\"></div> //id可以自定义\n```\n然后在引入的impress文件下插入这段代码\n```\nimpress( \"root\" ); //这里是你的id，如果id是impress，则这一步省略\nimpress().init();\n```\n# 插入ppt\n## 基础\n在你指定的根div中间插入ppt类的div\n```\n<div id=\"impress\">\n\t<div id=\"test\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test\n\t</div>\n</div>\n```\n这里div的class必须要有'step'，id可以有可以没有，如果没有，impress就会把你的id默认变成'step-1'这样的。\n'data-x'和'data-y'这样的就是ppt的定位\n## 2D平移\n如果我们再加入一段ppt类的div，页面就可以平移动起来了\n```\n<div id=\"impress\">\n\t<div id=\"test1\" class=\"step\" data-x=\"0\" data-y=\"0\">\n\t    test1\n\t</div>\n\t<div id=\"test2\" class=\"step\" data-x=\"1600\" data-y=\"0\">\n\t    test2\n\t</div>\n</div>\n```\n## 缩放\n我们想加入缩放的话只要加入'data-scale'这个属性就可以了，赋值为数字，越大缩放越大\n```\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-scale=\"3\">\n    test\n</div>\n```\n## 2D旋转\n如果想做旋转效果的ppt，加入'data-rotate'属性，赋值范围0~360\n```\n<div id=\"test\" class=\"step\" data-x=\"1600\" data-y=\"0\" data-rotate=\"90\" data-scale=\"3\">\n    test\n</div>\n```\n## 3D定位\n加入'data-z'属性实现3D空间上的定位\n## 3D翻滚\n可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个'data-rotate-x'和'data-rotate-y'，分别实现横向和纵向翻滚。\n```\n<div id=\"test\" class=\"step\" data-x=\"6200\" data-y=\"4300\" data-z=\"-100\" data-rotate-x=\"-40\" data-rotate-y=\"10\">\n    test\n</div>\n```\n# 方法接口\nimpress还给出了方法接口\n## .init()\n初始化用途\n```\nvar api = impress();\napi.init();\n```\n## .next()\n切换下一个ppt的功能\n```\nvar api = impress();\napi.init();\napi.next(); //使用方法下面都一样\n```\n## .prev()\n切换前一个ppt的功能\n## .goto( stepIndex | stepElementId | stepElement, [ duration ] )\n切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间\n# 事件监听接口\nimpress给出了两个事件监听接口\nimpress:stepenter 切入当前ppt的事件\nimpress:stepleave 切出当前ppt的事件\n```\nvar rootElement = document.getElementById( \"impress\" );\nrootElement.addEventListener( \"impress:stepenter\", function() {\n\tvar currentStep = document.querySelector( \".present\" );\n\tconsole.log( \"Entered the Step Element '\" + currentStep.id + \"'\" );\n});\n\nrootElement.addEventListener( \"impress:stepleave\", function(event) {\n\tvar currentStep = event.target\n\tconsole.log( \"Left the Step Element '\" + currentStep.id + \"'\" );\n});\n```\n# 样式\nimpress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！","slug":"impress简易教程","published":1,"updated":"2016-12-23T03:08:52.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m88a000m6wawkp72e27y","content":"<p>快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。<br><a id=\"more\"></a></p>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p><a href=\"https://juzoom.github.io/\" target=\"_blank\" rel=\"external\">聚众编码！</a></p>\n<h1 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a>原理介绍</h1><p>这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。</p>\n<h1 id=\"项目地址和文档地址\"><a href=\"#项目地址和文档地址\" class=\"headerlink\" title=\"项目地址和文档地址\"></a>项目地址和文档地址</h1><p><a href=\"https://github.com/impress/impress.js\" target=\"_blank\" rel=\"external\">项目地址</a><br><a href=\"https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md\" target=\"_blank\" rel=\"external\">文档地址</a></p>\n<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><p>首先要引入impress.js文件，和普通的js引入方式是一样的<br>然后在文档里加入代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;impress&quot;&gt;&lt;/div&gt; //id可以自定义</div></pre></td></tr></table></figure></p>\n<p>然后在引入的impress文件下插入这段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">impress( &quot;root&quot; ); //这里是你的id，如果id是impress，则这一步省略</div><div class=\"line\">impress().init();</div></pre></td></tr></table></figure></p>\n<h1 id=\"插入ppt\"><a href=\"#插入ppt\" class=\"headerlink\" title=\"插入ppt\"></a>插入ppt</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>在你指定的根div中间插入ppt类的div<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;impress&quot;&gt;</div><div class=\"line\">\t&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;0&quot; data-y=&quot;0&quot;&gt;</div><div class=\"line\">\t    test</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这里div的class必须要有’step’，id可以有可以没有，如果没有，impress就会把你的id默认变成’step-1’这样的。<br>‘data-x’和’data-y’这样的就是ppt的定位</p>\n<h2 id=\"2D平移\"><a href=\"#2D平移\" class=\"headerlink\" title=\"2D平移\"></a>2D平移</h2><p>如果我们再加入一段ppt类的div，页面就可以平移动起来了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;impress&quot;&gt;</div><div class=\"line\">\t&lt;div id=&quot;test1&quot; class=&quot;step&quot; data-x=&quot;0&quot; data-y=&quot;0&quot;&gt;</div><div class=\"line\">\t    test1</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div id=&quot;test2&quot; class=&quot;step&quot; data-x=&quot;1600&quot; data-y=&quot;0&quot;&gt;</div><div class=\"line\">\t    test2</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h2><p>我们想加入缩放的话只要加入’data-scale’这个属性就可以了，赋值为数字，越大缩放越大<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;1600&quot; data-y=&quot;0&quot; data-scale=&quot;3&quot;&gt;</div><div class=\"line\">    test</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2D旋转\"><a href=\"#2D旋转\" class=\"headerlink\" title=\"2D旋转\"></a>2D旋转</h2><p>如果想做旋转效果的ppt，加入’data-rotate’属性，赋值范围0~360<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;1600&quot; data-y=&quot;0&quot; data-rotate=&quot;90&quot; data-scale=&quot;3&quot;&gt;</div><div class=\"line\">    test</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3D定位\"><a href=\"#3D定位\" class=\"headerlink\" title=\"3D定位\"></a>3D定位</h2><p>加入’data-z’属性实现3D空间上的定位</p>\n<h2 id=\"3D翻滚\"><a href=\"#3D翻滚\" class=\"headerlink\" title=\"3D翻滚\"></a>3D翻滚</h2><p>可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个’data-rotate-x’和’data-rotate-y’，分别实现横向和纵向翻滚。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;6200&quot; data-y=&quot;4300&quot; data-z=&quot;-100&quot; data-rotate-x=&quot;-40&quot; data-rotate-y=&quot;10&quot;&gt;</div><div class=\"line\">    test</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"方法接口\"><a href=\"#方法接口\" class=\"headerlink\" title=\"方法接口\"></a>方法接口</h1><p>impress还给出了方法接口</p>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\".init()\"></a>.init()</h2><p>初始化用途<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var api = impress();</div><div class=\"line\">api.init();</div></pre></td></tr></table></figure></p>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\".next()\"></a>.next()</h2><p>切换下一个ppt的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var api = impress();</div><div class=\"line\">api.init();</div><div class=\"line\">api.next(); //使用方法下面都一样</div></pre></td></tr></table></figure></p>\n<h2 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\".prev()\"></a>.prev()</h2><p>切换前一个ppt的功能</p>\n<h2 id=\"goto-stepIndex-stepElementId-stepElement-duration\"><a href=\"#goto-stepIndex-stepElementId-stepElement-duration\" class=\"headerlink\" title=\".goto( stepIndex | stepElementId | stepElement, [ duration ] )\"></a>.goto( stepIndex | stepElementId | stepElement, [ duration ] )</h2><p>切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间</p>\n<h1 id=\"事件监听接口\"><a href=\"#事件监听接口\" class=\"headerlink\" title=\"事件监听接口\"></a>事件监听接口</h1><p>impress给出了两个事件监听接口<br>impress:stepenter 切入当前ppt的事件<br>impress:stepleave 切出当前ppt的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rootElement = document.getElementById( &quot;impress&quot; );</div><div class=\"line\">rootElement.addEventListener( &quot;impress:stepenter&quot;, function() &#123;</div><div class=\"line\">\tvar currentStep = document.querySelector( &quot;.present&quot; );</div><div class=\"line\">\tconsole.log( &quot;Entered the Step Element &apos;&quot; + currentStep.id + &quot;&apos;&quot; );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">rootElement.addEventListener( &quot;impress:stepleave&quot;, function(event) &#123;</div><div class=\"line\">\tvar currentStep = event.target</div><div class=\"line\">\tconsole.log( &quot;Left the Step Element &apos;&quot; + currentStep.id + &quot;&apos;&quot; );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>impress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！</p>\n","excerpt":"<p>快过年了，作为一个前端工程师，要写年终总结ppt啥的了，这里介绍一个炫酷的js框架，用网页实现比ppt还炫酷的效果。<br>","more":"</p>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><p><a href=\"https://juzoom.github.io/\">聚众编码！</a></p>\n<h1 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a>原理介绍</h1><p>这里用的impress.js框架，这个框架帮你做到的是，把指定的div标签变成一个个独占整个页面的元素，通过给出的接口进行定位，是三维上的定位！然后通过js控制把每个元素转到当前窗口来，在浏览器支持css3的情况下使用css3的动画功能来实现的。</p>\n<h1 id=\"项目地址和文档地址\"><a href=\"#项目地址和文档地址\" class=\"headerlink\" title=\"项目地址和文档地址\"></a>项目地址和文档地址</h1><p><a href=\"https://github.com/impress/impress.js\">项目地址</a><br><a href=\"https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md\">文档地址</a></p>\n<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><p>首先要引入impress.js文件，和普通的js引入方式是一样的<br>然后在文档里加入代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;impress&quot;&gt;&lt;/div&gt; //id可以自定义</div></pre></td></tr></table></figure></p>\n<p>然后在引入的impress文件下插入这段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">impress( &quot;root&quot; ); //这里是你的id，如果id是impress，则这一步省略</div><div class=\"line\">impress().init();</div></pre></td></tr></table></figure></p>\n<h1 id=\"插入ppt\"><a href=\"#插入ppt\" class=\"headerlink\" title=\"插入ppt\"></a>插入ppt</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>在你指定的根div中间插入ppt类的div<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;impress&quot;&gt;</div><div class=\"line\">\t&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;0&quot; data-y=&quot;0&quot;&gt;</div><div class=\"line\">\t    test</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这里div的class必须要有’step’，id可以有可以没有，如果没有，impress就会把你的id默认变成’step-1’这样的。<br>‘data-x’和’data-y’这样的就是ppt的定位</p>\n<h2 id=\"2D平移\"><a href=\"#2D平移\" class=\"headerlink\" title=\"2D平移\"></a>2D平移</h2><p>如果我们再加入一段ppt类的div，页面就可以平移动起来了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;impress&quot;&gt;</div><div class=\"line\">\t&lt;div id=&quot;test1&quot; class=&quot;step&quot; data-x=&quot;0&quot; data-y=&quot;0&quot;&gt;</div><div class=\"line\">\t    test1</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div id=&quot;test2&quot; class=&quot;step&quot; data-x=&quot;1600&quot; data-y=&quot;0&quot;&gt;</div><div class=\"line\">\t    test2</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h2><p>我们想加入缩放的话只要加入’data-scale’这个属性就可以了，赋值为数字，越大缩放越大<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;1600&quot; data-y=&quot;0&quot; data-scale=&quot;3&quot;&gt;</div><div class=\"line\">    test</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2D旋转\"><a href=\"#2D旋转\" class=\"headerlink\" title=\"2D旋转\"></a>2D旋转</h2><p>如果想做旋转效果的ppt，加入’data-rotate’属性，赋值范围0~360<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;1600&quot; data-y=&quot;0&quot; data-rotate=&quot;90&quot; data-scale=&quot;3&quot;&gt;</div><div class=\"line\">    test</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3D定位\"><a href=\"#3D定位\" class=\"headerlink\" title=\"3D定位\"></a>3D定位</h2><p>加入’data-z’属性实现3D空间上的定位</p>\n<h2 id=\"3D翻滚\"><a href=\"#3D翻滚\" class=\"headerlink\" title=\"3D翻滚\"></a>3D翻滚</h2><p>可能最炫酷的效果就是这个了，需要配合3D定位，属性有两个’data-rotate-x’和’data-rotate-y’，分别实现横向和纵向翻滚。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;test&quot; class=&quot;step&quot; data-x=&quot;6200&quot; data-y=&quot;4300&quot; data-z=&quot;-100&quot; data-rotate-x=&quot;-40&quot; data-rotate-y=&quot;10&quot;&gt;</div><div class=\"line\">    test</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"方法接口\"><a href=\"#方法接口\" class=\"headerlink\" title=\"方法接口\"></a>方法接口</h1><p>impress还给出了方法接口</p>\n<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\".init()\"></a>.init()</h2><p>初始化用途<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var api = impress();</div><div class=\"line\">api.init();</div></pre></td></tr></table></figure></p>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\".next()\"></a>.next()</h2><p>切换下一个ppt的功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var api = impress();</div><div class=\"line\">api.init();</div><div class=\"line\">api.next(); //使用方法下面都一样</div></pre></td></tr></table></figure></p>\n<h2 id=\"prev\"><a href=\"#prev\" class=\"headerlink\" title=\".prev()\"></a>.prev()</h2><p>切换前一个ppt的功能</p>\n<h2 id=\"goto-stepIndex-stepElementId-stepElement-duration\"><a href=\"#goto-stepIndex-stepElementId-stepElement-duration\" class=\"headerlink\" title=\".goto( stepIndex | stepElementId | stepElement, [ duration ] )\"></a>.goto( stepIndex | stepElementId | stepElement, [ duration ] )</h2><p>切换到指定ppt的功能，接受id和数字和dom元素，还能配置切换时间</p>\n<h1 id=\"事件监听接口\"><a href=\"#事件监听接口\" class=\"headerlink\" title=\"事件监听接口\"></a>事件监听接口</h1><p>impress给出了两个事件监听接口<br>impress:stepenter 切入当前ppt的事件<br>impress:stepleave 切出当前ppt的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rootElement = document.getElementById( &quot;impress&quot; );</div><div class=\"line\">rootElement.addEventListener( &quot;impress:stepenter&quot;, function() &#123;</div><div class=\"line\">\tvar currentStep = document.querySelector( &quot;.present&quot; );</div><div class=\"line\">\tconsole.log( &quot;Entered the Step Element &apos;&quot; + currentStep.id + &quot;&apos;&quot; );</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">rootElement.addEventListener( &quot;impress:stepleave&quot;, function(event) &#123;</div><div class=\"line\">\tvar currentStep = event.target</div><div class=\"line\">\tconsole.log( &quot;Left the Step Element &apos;&quot; + currentStep.id + &quot;&apos;&quot; );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>impress还给出了一些样式特效，具体的读者自己去文档看吧！我就偷懒啦！</p>"},{"title":"ES6新特性初探","date":"2016-11-30T02:34:35.000Z","_content":"最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！\n这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。\n<!-- more -->\n这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更__清晰__的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。\n# 开始前的准备\n因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本\n首先安装es6转码器babel提供的命令行工具\n```\nnpm install --global babel-cli\n```\n因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集\n```\nnpm install --save-dev babel-preset-es2015\n```\n然后在我们的项目下新建一个.babelrc文件并写入\n```\n{\n    \"presets\": [\n      \"es2015\"\n    ],\n    \"plugins\": []\n  }\n```\n这一步是为了让babel在执行的时候采用上面安装的规则集。\n这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本\n一个是 babel yourprogarm.js\n这个可以直接在命令行输出翻译出来的脚本\n一个是 babel-node yourprogarm.js (用node直接输出也可以)\n这个可以直接运行你的脚本，输出结果\n一个是 babel yourprogarm.js -o compiled.js\n将你的脚本转成es5语法并保存到指定文件里面\n大家各取所需\n# 块作用声明let以及常量声明const\n废话不多说，直接先看代码\n```\nif (true) {\n\tvar a = 4\n}\nconsole.log(a)  //4\n```\n我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的__缺陷__。在es6中，我们有了let这个块级声明，再也不用担心这类问题了\n```\nif (true) {\n\tlet a = 4\n}\nconsole.log(a)  //undefined\n```\n另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量\n```\nconst a = 4;\na = 5;  //error\n```\n这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的\n在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的\n拿第二段的代码举例，翻译后是这样的\n![es6](/images/es6/es6.png)\n翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug\n# 解构\n英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）\n实际意思是一种新的赋值模式，叫解构\n解构赋值提供了一种位赋值\n```\nvar [a, b] = [1, 2]\nconsole.log(a, b)  //输出结果1 2\n```\n大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现\n```\n[a, b] = [b, a]\n```\n解构赋值还提供了一种提取属性的赋值方法\n```\nvar pt = {x: 123, y: 444};\nvar {x, y} = pt;\nconsole.log(x, y); // 123 444\n```\n结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了\n```\nvar pt = {x: 123, y: 444};\nvar {x:myvalue, y} = pt;\nconsole.log(y); // 444\nconsole.log(x); // undefined\nconsole.log(myvalue); // 123\n```\n# 字面量属性可计算\n这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的\n```\nvar b = 'example';\nvar a = {};\na[b + 'A'] = 4\nconsole.log(a['exampleA'])  //4\n```\n在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性\n```\nvar a = {\n\t['example' + 'A']:6\n}\nconsole.log(a.exampleA)  //6\n```\n# 箭头函数 =>\n说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法\n一般函数声明是这样的\n```\nfunction abc(){\n\t// your code here\n}\n```\n而es6的语法是这样的\n```\nvar abc = () => {\n\t//your code here\n}\n```\n这个__()__就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样\n```\nsetTimeout(()=>{console.log('123')},1000)\n```\n就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。\n```\nconsole.log(a) //undefined\nvar a = () => {\n\t// your code here\n}\n```\n# REST AND SPREAD(延展运算符)\n上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个\n在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。\n可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写\n```\nvar abc = (...args) => {\n\tconsole.log(args)\n}\nabc(1, 2, 3, 4)  //1 2 3 4\n```\n前面的三个点表示任意多的参数，我们还可以给参数赋默认值\n```\nvar abc = (a = 6) => {\n\tconsole.log(a)\n}\nabc()  //6\nabc(4)  //4\n```\n利用这些特性我们可以很方便的取到多余的参数\n```\nvar abc = (a, b, ...args) => {\n\tconsole.log(a + b)\n\tconsole.log(args)\n}\nabc(1, 2)  //3 []\nabc(1, 2, 3, 4)  //3 [3, 4]\n```\n# 模版\n说模版实际上es6给定义的模版功能比较弱，模版文本用 __`__ 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 __${}__ 表示，所以基本用法如下所示\n```\nvar name = 'zk';\nvar templateString = `my name is ${name}, and I know 1 + 1 = ${1 + 1}`\nconsole.log(templateString)  //my name is zk, and I know 1 + 1 = 2\n```\n在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。\n# class类\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\njs面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种\n![突然消沉](/images/emotions/trxc.jpg)\n不管了，最起码写写代码的体验上提升了很多。\n> 有对js对象继承不太理解的同学，可以看看这篇我的文章__[js继承的方式和意义](https://zk-.github.io/2016/10/26/js继承的方式和意义/)__\n\n上代码\n```\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\tconsole.log('my name is ' + this.name)\n\t}\n}\nvar parent = new Parent('parent')\nconsole.log(parent.name)  //parent\nparent.sayHello()  //my name is parent\n```\n继承的写法也很容易，用关键词extends，父类用super表示\n```\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\treturn 'my name is ' + this.name\n\t}\n}\n\nclass Child extends Parent{\n\tconstructor(name, sex){\n\t\tsuper(name);  //构造器继承\n\t\tthis.sex = sex;\n\t}\n\tsayHello(){\n\t\tconsole.log('i am a child,' + super.sayHello())  //原型链继承\n\t}\n\tsaySex(){\n\t\tconsole.log(this.sex)\n\t}\n}\n\nvar child = new Child('baby','male')\nconsole.log(child.name)  //baby\nconsole.log(child.sex)  //male\nchild.sayHello()  //i am a child,my name is baby\nchild.saySex()  //male\n```\n# 模块module\n模块加载在es6中得到了原生支持\n```\n// Message.js\nexport const message = 'Hello Babel';\n\n// other.js\nimport {message} from './Message';\nconsole.log(message); // Hello Babel\n```\n导出可以实名导出也可以默认导出\n```\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport const obj = {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport default {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// other.js\nimport {greeting, name, version} from './Message';\n```\n# 迭代器\n这是一个大内容，下一篇开始说这个概念吧。。。","source":"_posts/ES6新特性初探.md","raw":"---\ntitle: ES6新特性初探\ndate: 2016-11-30 10:34:35\ncategories: [博客]\ntags: [ES6]\n---\n最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！\n这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。\n<!-- more -->\n这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更__清晰__的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。\n# 开始前的准备\n因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本\n首先安装es6转码器babel提供的命令行工具\n```\nnpm install --global babel-cli\n```\n因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集\n```\nnpm install --save-dev babel-preset-es2015\n```\n然后在我们的项目下新建一个.babelrc文件并写入\n```\n{\n    \"presets\": [\n      \"es2015\"\n    ],\n    \"plugins\": []\n  }\n```\n这一步是为了让babel在执行的时候采用上面安装的规则集。\n这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本\n一个是 babel yourprogarm.js\n这个可以直接在命令行输出翻译出来的脚本\n一个是 babel-node yourprogarm.js (用node直接输出也可以)\n这个可以直接运行你的脚本，输出结果\n一个是 babel yourprogarm.js -o compiled.js\n将你的脚本转成es5语法并保存到指定文件里面\n大家各取所需\n# 块作用声明let以及常量声明const\n废话不多说，直接先看代码\n```\nif (true) {\n\tvar a = 4\n}\nconsole.log(a)  //4\n```\n我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的__缺陷__。在es6中，我们有了let这个块级声明，再也不用担心这类问题了\n```\nif (true) {\n\tlet a = 4\n}\nconsole.log(a)  //undefined\n```\n另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量\n```\nconst a = 4;\na = 5;  //error\n```\n这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的\n在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的\n拿第二段的代码举例，翻译后是这样的\n![es6](/images/es6/es6.png)\n翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug\n# 解构\n英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）\n实际意思是一种新的赋值模式，叫解构\n解构赋值提供了一种位赋值\n```\nvar [a, b] = [1, 2]\nconsole.log(a, b)  //输出结果1 2\n```\n大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现\n```\n[a, b] = [b, a]\n```\n解构赋值还提供了一种提取属性的赋值方法\n```\nvar pt = {x: 123, y: 444};\nvar {x, y} = pt;\nconsole.log(x, y); // 123 444\n```\n结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了\n```\nvar pt = {x: 123, y: 444};\nvar {x:myvalue, y} = pt;\nconsole.log(y); // 444\nconsole.log(x); // undefined\nconsole.log(myvalue); // 123\n```\n# 字面量属性可计算\n这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的\n```\nvar b = 'example';\nvar a = {};\na[b + 'A'] = 4\nconsole.log(a['exampleA'])  //4\n```\n在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性\n```\nvar a = {\n\t['example' + 'A']:6\n}\nconsole.log(a.exampleA)  //6\n```\n# 箭头函数 =>\n说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法\n一般函数声明是这样的\n```\nfunction abc(){\n\t// your code here\n}\n```\n而es6的语法是这样的\n```\nvar abc = () => {\n\t//your code here\n}\n```\n这个__()__就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样\n```\nsetTimeout(()=>{console.log('123')},1000)\n```\n就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。\n```\nconsole.log(a) //undefined\nvar a = () => {\n\t// your code here\n}\n```\n# REST AND SPREAD(延展运算符)\n上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个\n在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。\n可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写\n```\nvar abc = (...args) => {\n\tconsole.log(args)\n}\nabc(1, 2, 3, 4)  //1 2 3 4\n```\n前面的三个点表示任意多的参数，我们还可以给参数赋默认值\n```\nvar abc = (a = 6) => {\n\tconsole.log(a)\n}\nabc()  //6\nabc(4)  //4\n```\n利用这些特性我们可以很方便的取到多余的参数\n```\nvar abc = (a, b, ...args) => {\n\tconsole.log(a + b)\n\tconsole.log(args)\n}\nabc(1, 2)  //3 []\nabc(1, 2, 3, 4)  //3 [3, 4]\n```\n# 模版\n说模版实际上es6给定义的模版功能比较弱，模版文本用 __`__ 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 __${}__ 表示，所以基本用法如下所示\n```\nvar name = 'zk';\nvar templateString = `my name is ${name}, and I know 1 + 1 = ${1 + 1}`\nconsole.log(templateString)  //my name is zk, and I know 1 + 1 = 2\n```\n在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。\n# class类\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\n__ladys and 乡亲们，你们盼望已久的面向对象终于来啦！__\njs面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种\n![突然消沉](/images/emotions/trxc.jpg)\n不管了，最起码写写代码的体验上提升了很多。\n> 有对js对象继承不太理解的同学，可以看看这篇我的文章__[js继承的方式和意义](https://zk-.github.io/2016/10/26/js继承的方式和意义/)__\n\n上代码\n```\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\tconsole.log('my name is ' + this.name)\n\t}\n}\nvar parent = new Parent('parent')\nconsole.log(parent.name)  //parent\nparent.sayHello()  //my name is parent\n```\n继承的写法也很容易，用关键词extends，父类用super表示\n```\nclass Parent{\n\tconstructor(name){\t//这是构造器\n\t\tthis.name = name;\n\t}\n\tsayHello(){\t\t//这是原型方法\n\t\treturn 'my name is ' + this.name\n\t}\n}\n\nclass Child extends Parent{\n\tconstructor(name, sex){\n\t\tsuper(name);  //构造器继承\n\t\tthis.sex = sex;\n\t}\n\tsayHello(){\n\t\tconsole.log('i am a child,' + super.sayHello())  //原型链继承\n\t}\n\tsaySex(){\n\t\tconsole.log(this.sex)\n\t}\n}\n\nvar child = new Child('baby','male')\nconsole.log(child.name)  //baby\nconsole.log(child.sex)  //male\nchild.sayHello()  //i am a child,my name is baby\nchild.saySex()  //male\n```\n# 模块module\n模块加载在es6中得到了原生支持\n```\n// Message.js\nexport const message = 'Hello Babel';\n\n// other.js\nimport {message} from './Message';\nconsole.log(message); // Hello Babel\n```\n导出可以实名导出也可以默认导出\n```\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport const obj = {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// Message.js\nconst greeting = 'Hello';\nconst name = 'Babel';\nconst version = 'v5.0';\nexport default {\n  greeting: greeting,\n  name: name,\n  version: version\n};\n\n// other.js\nimport {greeting, name, version} from './Message';\n```\n# 迭代器\n这是一个大内容，下一篇开始说这个概念吧。。。","slug":"ES6新特性初探","published":1,"updated":"2016-12-01T01:58:38.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m88a000p6waw2uzkk62m","content":"<p>最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！<br>这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。<br><a id=\"more\"></a><br>这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更<strong>清晰</strong>的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。</p>\n<h1 id=\"开始前的准备\"><a href=\"#开始前的准备\" class=\"headerlink\" title=\"开始前的准备\"></a>开始前的准备</h1><p>因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本<br>首先安装es6转码器babel提供的命令行工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --global babel-cli</div></pre></td></tr></table></figure></p>\n<p>因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure></p>\n<p>然后在我们的项目下新建一个.babelrc文件并写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot;: [</div><div class=\"line\">      &quot;es2015&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;plugins&quot;: []</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这一步是为了让babel在执行的时候采用上面安装的规则集。<br>这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本<br>一个是 babel yourprogarm.js<br>这个可以直接在命令行输出翻译出来的脚本<br>一个是 babel-node yourprogarm.js (用node直接输出也可以)<br>这个可以直接运行你的脚本，输出结果<br>一个是 babel yourprogarm.js -o compiled.js<br>将你的脚本转成es5语法并保存到指定文件里面<br>大家各取所需</p>\n<h1 id=\"块作用声明let以及常量声明const\"><a href=\"#块作用声明let以及常量声明const\" class=\"headerlink\" title=\"块作用声明let以及常量声明const\"></a>块作用声明let以及常量声明const</h1><p>废话不多说，直接先看代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">\tvar a = 4</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a)  //4</div></pre></td></tr></table></figure></p>\n<p>我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的<strong>缺陷</strong>。在es6中，我们有了let这个块级声明，再也不用担心这类问题了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">\tlet a = 4</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a)  //undefined</div></pre></td></tr></table></figure></p>\n<p>另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">const a = 4;</div><div class=\"line\">a = 5;  //error</div></pre></td></tr></table></figure></p>\n<p>这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的<br>在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的<br>拿第二段的代码举例，翻译后是这样的<br><img src=\"/images/es6/es6.png\" alt=\"es6\"><br>翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug</p>\n<h1 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h1><p>英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）<br>实际意思是一种新的赋值模式，叫解构<br>解构赋值提供了一种位赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var [a, b] = [1, 2]</div><div class=\"line\">console.log(a, b)  //输出结果1 2</div></pre></td></tr></table></figure></p>\n<p>大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[a, b] = [b, a]</div></pre></td></tr></table></figure></p>\n<p>解构赋值还提供了一种提取属性的赋值方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var pt = &#123;x: 123, y: 444&#125;;</div><div class=\"line\">var &#123;x, y&#125; = pt;</div><div class=\"line\">console.log(x, y); // 123 444</div></pre></td></tr></table></figure></p>\n<p>结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var pt = &#123;x: 123, y: 444&#125;;</div><div class=\"line\">var &#123;x:myvalue, y&#125; = pt;</div><div class=\"line\">console.log(y); // 444</div><div class=\"line\">console.log(x); // undefined</div><div class=\"line\">console.log(myvalue); // 123</div></pre></td></tr></table></figure></p>\n<h1 id=\"字面量属性可计算\"><a href=\"#字面量属性可计算\" class=\"headerlink\" title=\"字面量属性可计算\"></a>字面量属性可计算</h1><p>这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var b = &apos;example&apos;;</div><div class=\"line\">var a = &#123;&#125;;</div><div class=\"line\">a[b + &apos;A&apos;] = 4</div><div class=\"line\">console.log(a[&apos;exampleA&apos;])  //4</div></pre></td></tr></table></figure></p>\n<p>在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &#123;</div><div class=\"line\">\t[&apos;example&apos; + &apos;A&apos;]:6</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a.exampleA)  //6</div></pre></td></tr></table></figure></p>\n<h1 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h1><p>说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法<br>一般函数声明是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function abc()&#123;</div><div class=\"line\">\t// your code here</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而es6的语法是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = () =&gt; &#123;</div><div class=\"line\">\t//your code here</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个<strong>()</strong>就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(()=&gt;&#123;console.log(&apos;123&apos;)&#125;,1000)</div></pre></td></tr></table></figure></p>\n<p>就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a) //undefined</div><div class=\"line\">var a = () =&gt; &#123;</div><div class=\"line\">\t// your code here</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"REST-AND-SPREAD-延展运算符\"><a href=\"#REST-AND-SPREAD-延展运算符\" class=\"headerlink\" title=\"REST AND SPREAD(延展运算符)\"></a>REST AND SPREAD(延展运算符)</h1><p>上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个<br>在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。<br>可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = (...args) =&gt; &#123;</div><div class=\"line\">\tconsole.log(args)</div><div class=\"line\">&#125;</div><div class=\"line\">abc(1, 2, 3, 4)  //1 2 3 4</div></pre></td></tr></table></figure></p>\n<p>前面的三个点表示任意多的参数，我们还可以给参数赋默认值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = (a = 6) =&gt; &#123;</div><div class=\"line\">\tconsole.log(a)</div><div class=\"line\">&#125;</div><div class=\"line\">abc()  //6</div><div class=\"line\">abc(4)  //4</div></pre></td></tr></table></figure></p>\n<p>利用这些特性我们可以很方便的取到多余的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = (a, b, ...args) =&gt; &#123;</div><div class=\"line\">\tconsole.log(a + b)</div><div class=\"line\">\tconsole.log(args)</div><div class=\"line\">&#125;</div><div class=\"line\">abc(1, 2)  //3 []</div><div class=\"line\">abc(1, 2, 3, 4)  //3 [3, 4]</div></pre></td></tr></table></figure></p>\n<h1 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h1><p>说模版实际上es6给定义的模版功能比较弱，模版文本用 <strong>`</strong> 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 <strong>${}</strong> 表示，所以基本用法如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &apos;zk&apos;;</div><div class=\"line\">var templateString = `my name is $&#123;name&#125;, and I know 1 + 1 = $&#123;1 + 1&#125;`</div><div class=\"line\">console.log(templateString)  //my name is zk, and I know 1 + 1 = 2</div></pre></td></tr></table></figure></p>\n<p>在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。</p>\n<h1 id=\"class类\"><a href=\"#class类\" class=\"headerlink\" title=\"class类\"></a>class类</h1><p><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br>js面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种<br><img src=\"/images/emotions/trxc.jpg\" alt=\"突然消沉\"><br>不管了，最起码写写代码的体验上提升了很多。</p>\n<blockquote>\n<p>有对js对象继承不太理解的同学，可以看看这篇我的文章<strong><a href=\"https://zk-.github.io/2016/10/26/js继承的方式和意义/\">js继承的方式和意义</a></strong></p>\n</blockquote>\n<p>上代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Parent&#123;</div><div class=\"line\">\tconstructor(name)&#123;\t//这是构造器</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsayHello()&#123;\t\t//这是原型方法</div><div class=\"line\">\t\tconsole.log(&apos;my name is &apos; + this.name)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var parent = new Parent(&apos;parent&apos;)</div><div class=\"line\">console.log(parent.name)  //parent</div><div class=\"line\">parent.sayHello()  //my name is parent</div></pre></td></tr></table></figure></p>\n<p>继承的写法也很容易，用关键词extends，父类用super表示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Parent&#123;</div><div class=\"line\">\tconstructor(name)&#123;\t//这是构造器</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsayHello()&#123;\t\t//这是原型方法</div><div class=\"line\">\t\treturn &apos;my name is &apos; + this.name</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child extends Parent&#123;</div><div class=\"line\">\tconstructor(name, sex)&#123;</div><div class=\"line\">\t\tsuper(name);  //构造器继承</div><div class=\"line\">\t\tthis.sex = sex;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsayHello()&#123;</div><div class=\"line\">\t\tconsole.log(&apos;i am a child,&apos; + super.sayHello())  //原型链继承</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsaySex()&#123;</div><div class=\"line\">\t\tconsole.log(this.sex)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var child = new Child(&apos;baby&apos;,&apos;male&apos;)</div><div class=\"line\">console.log(child.name)  //baby</div><div class=\"line\">console.log(child.sex)  //male</div><div class=\"line\">child.sayHello()  //i am a child,my name is baby</div><div class=\"line\">child.saySex()  //male</div></pre></td></tr></table></figure></p>\n<h1 id=\"模块module\"><a href=\"#模块module\" class=\"headerlink\" title=\"模块module\"></a>模块module</h1><p>模块加载在es6中得到了原生支持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Message.js</div><div class=\"line\">export const message = &apos;Hello Babel&apos;;</div><div class=\"line\"></div><div class=\"line\">// other.js</div><div class=\"line\">import &#123;message&#125; from &apos;./Message&apos;;</div><div class=\"line\">console.log(message); // Hello Babel</div></pre></td></tr></table></figure></p>\n<p>导出可以实名导出也可以默认导出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Message.js</div><div class=\"line\">const greeting = &apos;Hello&apos;;</div><div class=\"line\">const name = &apos;Babel&apos;;</div><div class=\"line\">const version = &apos;v5.0&apos;;</div><div class=\"line\">export const obj = &#123;</div><div class=\"line\">  greeting: greeting,</div><div class=\"line\">  name: name,</div><div class=\"line\">  version: version</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Message.js</div><div class=\"line\">const greeting = &apos;Hello&apos;;</div><div class=\"line\">const name = &apos;Babel&apos;;</div><div class=\"line\">const version = &apos;v5.0&apos;;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  greeting: greeting,</div><div class=\"line\">  name: name,</div><div class=\"line\">  version: version</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// other.js</div><div class=\"line\">import &#123;greeting, name, version&#125; from &apos;./Message&apos;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>这是一个大内容，下一篇开始说这个概念吧。。。</p>\n","excerpt":"<p>最近学的东西有点多，主要是最近从追求深度的一个坑里爬了出来，因为一无所获==！<br>这样下去就是浪费时间，所以把一些计划上学的东西学一遍，开始技能树乱加点模式。。<br>","more":"<br>这次ES6新增了几个新特性，解决了平常使用js时需要处理一些麻烦的东西时的不便，增加了声明函数时使用箭头函数这种更<strong>清晰</strong>的语法模式（我是没觉得哪里好了，感觉更乱了==），还增加了一些牛逼的自定义迭代器这样的功能（嗯，越来越像python了），现在我就列举说明一下其中几个新特性及其用法。</p>\n<h1 id=\"开始前的准备\"><a href=\"#开始前的准备\" class=\"headerlink\" title=\"开始前的准备\"></a>开始前的准备</h1><p>因为es6的语法每个浏览器支持的程度不一样，所以我们使用一种安全的方法来调试我们的脚本<br>首先安装es6转码器babel提供的命令行工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --global babel-cli</div></pre></td></tr></table></figure></p>\n<p>因为这款工具对于es6的语法支持的不是很全，我们需要安装官方提供的转码规则集<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure></p>\n<p>然后在我们的项目下新建一个.babelrc文件并写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot;: [</div><div class=\"line\">      &quot;es2015&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;plugins&quot;: []</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>这一步是为了让babel在执行的时候采用上面安装的规则集。<br>这些都搞完我们就可以开始学习了，在学习测试的时候可以用三种命令行方式验证我们的脚本<br>一个是 babel yourprogarm.js<br>这个可以直接在命令行输出翻译出来的脚本<br>一个是 babel-node yourprogarm.js (用node直接输出也可以)<br>这个可以直接运行你的脚本，输出结果<br>一个是 babel yourprogarm.js -o compiled.js<br>将你的脚本转成es5语法并保存到指定文件里面<br>大家各取所需</p>\n<h1 id=\"块作用声明let以及常量声明const\"><a href=\"#块作用声明let以及常量声明const\" class=\"headerlink\" title=\"块作用声明let以及常量声明const\"></a>块作用声明let以及常量声明const</h1><p>废话不多说，直接先看代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">\tvar a = 4</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a)  //4</div></pre></td></tr></table></figure></p>\n<p>我们都知道在这个例子里面，a虽然在if中声明了，但是if没有块级作用域，所以在外部也能正常访问a，这给初学者或多或少带来了理解困难，因为这是js语言的<strong>缺陷</strong>。在es6中，我们有了let这个块级声明，再也不用担心这类问题了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (true) &#123;</div><div class=\"line\">\tlet a = 4</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a)  //undefined</div></pre></td></tr></table></figure></p>\n<p>另外我们在自己的程序中有时候希望声明一些常量，又不希望被别人更改，这时候就可以使用es6提供的const来声明变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">const a = 4;</div><div class=\"line\">a = 5;  //error</div></pre></td></tr></table></figure></p>\n<p>这些用法都非常简单易懂，但是要注意的是babel对这些特性的兼容是怎样实现的<br>在对于支持这些语法特性的浏览器来说，这些语法非常的安全，但是如果对于不支持这些语法特性的浏览器，babel需要翻译成浏览器支持的语法才能正常表现，现在我们就用babel命令来输出翻译后的代码是什么样的<br>拿第二段的代码举例，翻译后是这样的<br><img src=\"/images/es6/es6.png\" alt=\"es6\"><br>翻译的结果是babel在对应的变量前加了下划线，所以我们要注意的一点是在使用babel和es6的时候，不要出现相似变量名之间只差一个下划线的情况，这样就会出现难以调试和发现的bug</p>\n<h1 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h1><p>英文名DESTRUCTURE（扔到有道翻译里面意思是“变性” ==！）<br>实际意思是一种新的赋值模式，叫解构<br>解构赋值提供了一种位赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var [a, b] = [1, 2]</div><div class=\"line\">console.log(a, b)  //输出结果1 2</div></pre></td></tr></table></figure></p>\n<p>大家看到了，就是对应位置的复制，这样以后如果需要交换变量值的时候就很方便，只需要一行代码就能实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[a, b] = [b, a]</div></pre></td></tr></table></figure></p>\n<p>解构赋值还提供了一种提取属性的赋值方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var pt = &#123;x: 123, y: 444&#125;;</div><div class=\"line\">var &#123;x, y&#125; = pt;</div><div class=\"line\">console.log(x, y); // 123 444</div></pre></td></tr></table></figure></p>\n<p>结果很明白，有的同学可能有疑问，如果我不想用xy这样和对象名属性一样的变量名怎么办，简单，在后面加上冒号就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var pt = &#123;x: 123, y: 444&#125;;</div><div class=\"line\">var &#123;x:myvalue, y&#125; = pt;</div><div class=\"line\">console.log(y); // 444</div><div class=\"line\">console.log(x); // undefined</div><div class=\"line\">console.log(myvalue); // 123</div></pre></td></tr></table></figure></p>\n<h1 id=\"字面量属性可计算\"><a href=\"#字面量属性可计算\" class=\"headerlink\" title=\"字面量属性可计算\"></a>字面量属性可计算</h1><p>这个特性很好理解，平常我们在一个对象中，读取或者写入一个动态生成的属性时，是这样做的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var b = &apos;example&apos;;</div><div class=\"line\">var a = &#123;&#125;;</div><div class=\"line\">a[b + &apos;A&apos;] = 4</div><div class=\"line\">console.log(a[&apos;exampleA&apos;])  //4</div></pre></td></tr></table></figure></p>\n<p>在表达式中计算，现在es6加入的特性就是，在对象声明字面量的时候，就可以使用计算属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &#123;</div><div class=\"line\">\t[&apos;example&apos; + &apos;A&apos;]:6</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a.exampleA)  //6</div></pre></td></tr></table></figure></p>\n<h1 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h1><p>说实话这个玩意我开始用的时候真不习惯，感觉上可读性也没有多少提高，但是推出这个语法一定有他的用意，先说用法<br>一般函数声明是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function abc()&#123;</div><div class=\"line\">\t// your code here</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>而es6的语法是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = () =&gt; &#123;</div><div class=\"line\">\t//your code here</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个<strong>()</strong>就是声明参数的地方，剩下的就是函数解构体，其实箭头函数就是声明了一个匿名函数并复制给了abc，所以匿名函数的写法就是这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(()=&gt;&#123;console.log(&apos;123&apos;)&#125;,1000)</div></pre></td></tr></table></figure></p>\n<p>就是样子变了一下，如果说有什么要值得注意的话，就是箭头函数创建实名函数的时候，它是一个表达式，所以没有函数声明提前的说法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(a) //undefined</div><div class=\"line\">var a = () =&gt; &#123;</div><div class=\"line\">\t// your code here</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"REST-AND-SPREAD-延展运算符\"><a href=\"#REST-AND-SPREAD-延展运算符\" class=\"headerlink\" title=\"REST AND SPREAD(延展运算符)\"></a>REST AND SPREAD(延展运算符)</h1><p>上面说过es6把一些常见的其它语言的特性拿到了es6中来，这就是其中的一个<br>在函数中，我们的参数可以通过arguments来引用进来，如果一个函数要求的参数是2个，如果调用的时候传入了1个是不会报错的，只不过第二个参数默认会赋值undefined，如果传入了3个参数，也不会报错，多出来的那一个可以通过arguments[2]访问到。<br>可能是es6的专家们希望js能表现的和正常的语言一样吧，在es6中，参数可以这样写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = (...args) =&gt; &#123;</div><div class=\"line\">\tconsole.log(args)</div><div class=\"line\">&#125;</div><div class=\"line\">abc(1, 2, 3, 4)  //1 2 3 4</div></pre></td></tr></table></figure></p>\n<p>前面的三个点表示任意多的参数，我们还可以给参数赋默认值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = (a = 6) =&gt; &#123;</div><div class=\"line\">\tconsole.log(a)</div><div class=\"line\">&#125;</div><div class=\"line\">abc()  //6</div><div class=\"line\">abc(4)  //4</div></pre></td></tr></table></figure></p>\n<p>利用这些特性我们可以很方便的取到多余的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var abc = (a, b, ...args) =&gt; &#123;</div><div class=\"line\">\tconsole.log(a + b)</div><div class=\"line\">\tconsole.log(args)</div><div class=\"line\">&#125;</div><div class=\"line\">abc(1, 2)  //3 []</div><div class=\"line\">abc(1, 2, 3, 4)  //3 [3, 4]</div></pre></td></tr></table></figure></p>\n<h1 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h1><p>说模版实际上es6给定义的模版功能比较弱，模版文本用 <strong>`</strong> 围起来，这个标点就是键盘左上方esc键下面的那个键，动态的文本内容用 <strong>${}</strong> 表示，所以基本用法如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var name = &apos;zk&apos;;</div><div class=\"line\">var templateString = `my name is $&#123;name&#125;, and I know 1 + 1 = $&#123;1 + 1&#125;`</div><div class=\"line\">console.log(templateString)  //my name is zk, and I know 1 + 1 = 2</div></pre></td></tr></table></figure></p>\n<p>在${}中我们可以放入变量也可以放入表达式，但是 templateString 在定义的时候就已经被计算出字符串并赋值给了它，所以templateString这样的变量在生成的时候就只能是固定的字符串格式。</p>\n<h1 id=\"class类\"><a href=\"#class类\" class=\"headerlink\" title=\"class类\"></a>class类</h1><p><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br><strong>ladys and 乡亲们，你们盼望已久的面向对象终于来啦！</strong><br>js面向对象编程说了辣么多年，网上的相关文章也是辣么多，现在终于出来了，刚刚看到的时候说实话我是很激动的，但是研究了一下，发现因为js的历史原因，实际上，es6对于面向对象的特性实现只是我们在写代码的时候感觉像是那么回事，实际上还是构造器以及原型链，继承方式也是这两种<br><img src=\"/images/emotions/trxc.jpg\" alt=\"突然消沉\"><br>不管了，最起码写写代码的体验上提升了很多。</p>\n<blockquote>\n<p>有对js对象继承不太理解的同学，可以看看这篇我的文章<strong><a href=\"https://zk-.github.io/2016/10/26/js继承的方式和意义/\">js继承的方式和意义</a></strong></p>\n</blockquote>\n<p>上代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Parent&#123;</div><div class=\"line\">\tconstructor(name)&#123;\t//这是构造器</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsayHello()&#123;\t\t//这是原型方法</div><div class=\"line\">\t\tconsole.log(&apos;my name is &apos; + this.name)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var parent = new Parent(&apos;parent&apos;)</div><div class=\"line\">console.log(parent.name)  //parent</div><div class=\"line\">parent.sayHello()  //my name is parent</div></pre></td></tr></table></figure></p>\n<p>继承的写法也很容易，用关键词extends，父类用super表示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Parent&#123;</div><div class=\"line\">\tconstructor(name)&#123;\t//这是构造器</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsayHello()&#123;\t\t//这是原型方法</div><div class=\"line\">\t\treturn &apos;my name is &apos; + this.name</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Child extends Parent&#123;</div><div class=\"line\">\tconstructor(name, sex)&#123;</div><div class=\"line\">\t\tsuper(name);  //构造器继承</div><div class=\"line\">\t\tthis.sex = sex;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsayHello()&#123;</div><div class=\"line\">\t\tconsole.log(&apos;i am a child,&apos; + super.sayHello())  //原型链继承</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsaySex()&#123;</div><div class=\"line\">\t\tconsole.log(this.sex)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var child = new Child(&apos;baby&apos;,&apos;male&apos;)</div><div class=\"line\">console.log(child.name)  //baby</div><div class=\"line\">console.log(child.sex)  //male</div><div class=\"line\">child.sayHello()  //i am a child,my name is baby</div><div class=\"line\">child.saySex()  //male</div></pre></td></tr></table></figure></p>\n<h1 id=\"模块module\"><a href=\"#模块module\" class=\"headerlink\" title=\"模块module\"></a>模块module</h1><p>模块加载在es6中得到了原生支持<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Message.js</div><div class=\"line\">export const message = &apos;Hello Babel&apos;;</div><div class=\"line\"></div><div class=\"line\">// other.js</div><div class=\"line\">import &#123;message&#125; from &apos;./Message&apos;;</div><div class=\"line\">console.log(message); // Hello Babel</div></pre></td></tr></table></figure></p>\n<p>导出可以实名导出也可以默认导出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Message.js</div><div class=\"line\">const greeting = &apos;Hello&apos;;</div><div class=\"line\">const name = &apos;Babel&apos;;</div><div class=\"line\">const version = &apos;v5.0&apos;;</div><div class=\"line\">export const obj = &#123;</div><div class=\"line\">  greeting: greeting,</div><div class=\"line\">  name: name,</div><div class=\"line\">  version: version</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Message.js</div><div class=\"line\">const greeting = &apos;Hello&apos;;</div><div class=\"line\">const name = &apos;Babel&apos;;</div><div class=\"line\">const version = &apos;v5.0&apos;;</div><div class=\"line\">export default &#123;</div><div class=\"line\">  greeting: greeting,</div><div class=\"line\">  name: name,</div><div class=\"line\">  version: version</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// other.js</div><div class=\"line\">import &#123;greeting, name, version&#125; from &apos;./Message&apos;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>这是一个大内容，下一篇开始说这个概念吧。。。</p>"},{"title":"深入理解微信小程序","date":"2016-11-22T15:00:30.000Z","_content":"一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。\n<!-- more -->\n# 概述\n微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。\n小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。\n下面就开始说一说小程序的基本内容\n# 文档地址\n微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击**[这里](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122)**访问。\n# 目录结构\n首先看一眼一个基础小程序的目录结构\n```\nE:\\TEST\n│  app.js  //入口函数，程序生命周期函数声明的地方\n│  app.json  //全局配置，程序声明获取权限的地方\n│  app.wxss  //全局样式，程序定义公共样式的地方\n│\n├─pages\n│  ├─index\n│  │      index.js\n│  │      index.wxml\n│  │      index.wxss\n│  │\n│  └─logs\n│          logs.js  //逻辑层代码，包含小程序数据和行为\n│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置\n│          logs.wxml  //视图层，小程序页面承载内容的地方\n│          logs.wxss  //小程序页面样式，向上覆盖\n│\n└─utils\n        util.js  //自定义公共函数，文件夹和文件的名字随意\n```\n一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。\n小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。\n**可以看到小程序的文件结构非常的简单，我们学习它也很容易**\n# 权限获取\n权限获取分两个方面，一个是根目录下app.json的权限获取\n```\n属性\t\t\t类型\t\t\t必填\t描述\npages\t\t\tString Array\t\t是\t设置页面路径\nwindow\t\t\tObject\t\t\t否\t设置默认页面的窗口表现\ntabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现\nnetworkTimeout\t\tObject\t\t\t否\t设置网络超时时间\ndebug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式\n```\n其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。\n# 视图层组件\n小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。\n例如&lt;image>必须有对应的&lt;/image>，而且大小写敏感，写成&lt;/Image>是不可以的。\n页面标签我总结了一下从功能上可以分为三类\n第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。\n```\n// pages/test/test.wxml\n<view>{{testData}}</view>  //直接使用在js的data下声明的数据\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  ···省略\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu1.png)\n承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例\n```\n// pages/test/test.wxml\n<view bindtap=\"testtap\">{{testData}}</view>  //绑定testtap函数\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  testtap:function(event){  //点击时执行的函数\n    wx.showToast({\n      title: 'hello world',\n      icon: 'success',\n      duration: 2000\n    })\n  },\n  ···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu2.gif)\n\n第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例\n```\n// pages/test/test.wxml\n<picker bindchange=\"bindPickerChange\" value=\"1\" range=\"{{pickerData}}\">\n    <view class=\"picker\">\n        选择\n    </view>\n</picker>\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!',\n    pickerData:[1,2,3]\n  },\n  bindPickerChange: function(event){\n    console.log('test')\n  }···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu3.gif)\n\n第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。\n```\n// templete/test.wxml\n<template name=\"test\">\n  <text>{{number}}</text>\n</template>\n```\n我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据\n```\n// pages/test/test.wxml\n<import src=\"../templete/test.wxml\"/>\n<template is=\"test\" data=\"{{number: '1'}}\"/>\n<template is=\"test\" data=\"{{number: '2'}}\"/>\n<template is=\"test\" data=\"{{number: '3'}}\"/>\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu4.png)\n__是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方__\n# 逻辑层\n逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。\n每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量\n## 注册程序\n程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。\n```\nApp({\n  onLaunch: function() {\n    // Do something initial when launch.\n  },\n  onShow: function() {\n      // Do something when show.\n  },\n  onHide: function() {\n      // Do something when hide.\n  },\n  globalData: 'I am global data'\n})\n```\n## 注册页面\n页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。\nonLoad为生命周期函数，页面加载是触发\nonReady为生命周期函数，页面初次渲染完成时触发\nonShow为生命周期函数，监听页面显示时触发\nonHide为生命周期函数，监听页面隐藏时触发\nonUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)\nonPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发\nonReachBottom为页面相关事件处理函数，页面上拉触底时触发\n补一张官方给出的页面生命周期图\n![微信小程序](https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122)\n\n# 样式\n样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位\n一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素\n一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。\n在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用__@import \"common.wxss\"__导入其他文件，app.wcss默认给所有页面导入进去。\n\n# 其他\n在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。\n# 总结\n小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。","source":"_posts/深入理解微信小程序.md","raw":"---\ntitle: 深入理解微信小程序\ndate: 2016-11-22 23:00:30\ncategories: [博客]\ntags: [微信小程序]\n---\n一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。\n<!-- more -->\n# 概述\n微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。\n小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。\n下面就开始说一说小程序的基本内容\n# 文档地址\n微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击**[这里](https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122)**访问。\n# 目录结构\n首先看一眼一个基础小程序的目录结构\n```\nE:\\TEST\n│  app.js  //入口函数，程序生命周期函数声明的地方\n│  app.json  //全局配置，程序声明获取权限的地方\n│  app.wxss  //全局样式，程序定义公共样式的地方\n│\n├─pages\n│  ├─index\n│  │      index.js\n│  │      index.wxml\n│  │      index.wxss\n│  │\n│  └─logs\n│          logs.js  //逻辑层代码，包含小程序数据和行为\n│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置\n│          logs.wxml  //视图层，小程序页面承载内容的地方\n│          logs.wxss  //小程序页面样式，向上覆盖\n│\n└─utils\n        util.js  //自定义公共函数，文件夹和文件的名字随意\n```\n一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。\n小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。\n**可以看到小程序的文件结构非常的简单，我们学习它也很容易**\n# 权限获取\n权限获取分两个方面，一个是根目录下app.json的权限获取\n```\n属性\t\t\t类型\t\t\t必填\t描述\npages\t\t\tString Array\t\t是\t设置页面路径\nwindow\t\t\tObject\t\t\t否\t设置默认页面的窗口表现\ntabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现\nnetworkTimeout\t\tObject\t\t\t否\t设置网络超时时间\ndebug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式\n```\n其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。\n# 视图层组件\n小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。\n例如&lt;image>必须有对应的&lt;/image>，而且大小写敏感，写成&lt;/Image>是不可以的。\n页面标签我总结了一下从功能上可以分为三类\n第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。\n```\n// pages/test/test.wxml\n<view>{{testData}}</view>  //直接使用在js的data下声明的数据\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  ···省略\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu1.png)\n承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例\n```\n// pages/test/test.wxml\n<view bindtap=\"testtap\">{{testData}}</view>  //绑定testtap函数\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!'\n  },\n  testtap:function(event){  //点击时执行的函数\n    wx.showToast({\n      title: 'hello world',\n      icon: 'success',\n      duration: 2000\n    })\n  },\n  ···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu2.gif)\n\n第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例\n```\n// pages/test/test.wxml\n<picker bindchange=\"bindPickerChange\" value=\"1\" range=\"{{pickerData}}\">\n    <view class=\"picker\">\n        选择\n    </view>\n</picker>\n\n// pages/test/test.js\nPage({\n  data:{\n    testData:'hello world!',\n    pickerData:[1,2,3]\n  },\n  bindPickerChange: function(event){\n    console.log('test')\n  }···\n})\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu3.gif)\n\n第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。\n```\n// templete/test.wxml\n<template name=\"test\">\n  <text>{{number}}</text>\n</template>\n```\n我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据\n```\n// pages/test/test.wxml\n<import src=\"../templete/test.wxml\"/>\n<template is=\"test\" data=\"{{number: '1'}}\"/>\n<template is=\"test\" data=\"{{number: '2'}}\"/>\n<template is=\"test\" data=\"{{number: '3'}}\"/>\n```\n效果图\n![微信小程序](/images/weixinxiaochenxu/weixinxiaochenxu4.png)\n__是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方__\n# 逻辑层\n逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。\n每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量\n## 注册程序\n程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。\n```\nApp({\n  onLaunch: function() {\n    // Do something initial when launch.\n  },\n  onShow: function() {\n      // Do something when show.\n  },\n  onHide: function() {\n      // Do something when hide.\n  },\n  globalData: 'I am global data'\n})\n```\n## 注册页面\n页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。\nonLoad为生命周期函数，页面加载是触发\nonReady为生命周期函数，页面初次渲染完成时触发\nonShow为生命周期函数，监听页面显示时触发\nonHide为生命周期函数，监听页面隐藏时触发\nonUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)\nonPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发\nonReachBottom为页面相关事件处理函数，页面上拉触底时触发\n补一张官方给出的页面生命周期图\n![微信小程序](https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122)\n\n# 样式\n样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位\n一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素\n一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。\n在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用__@import \"common.wxss\"__导入其他文件，app.wcss默认给所有页面导入进去。\n\n# 其他\n在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。\n# 总结\n小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。","slug":"深入理解微信小程序","published":1,"updated":"2016-11-24T01:12:07.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixl3m88a000t6wawvxxjqwvm","content":"<p>一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。<br><a id=\"more\"></a></p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。<br>小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。<br>下面就开始说一说小程序的基本内容</p>\n<h1 id=\"文档地址\"><a href=\"#文档地址\" class=\"headerlink\" title=\"文档地址\"></a>文档地址</h1><p>微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击<strong><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122\" target=\"_blank\" rel=\"external\">这里</a></strong>访问。</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p>首先看一眼一个基础小程序的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\TEST</div><div class=\"line\">│  app.js  //入口函数，程序生命周期函数声明的地方</div><div class=\"line\">│  app.json  //全局配置，程序声明获取权限的地方</div><div class=\"line\">│  app.wxss  //全局样式，程序定义公共样式的地方</div><div class=\"line\">│</div><div class=\"line\">├─pages</div><div class=\"line\">│  ├─index</div><div class=\"line\">│  │      index.js</div><div class=\"line\">│  │      index.wxml</div><div class=\"line\">│  │      index.wxss</div><div class=\"line\">│  │</div><div class=\"line\">│  └─logs</div><div class=\"line\">│          logs.js  //逻辑层代码，包含小程序数据和行为</div><div class=\"line\">│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置</div><div class=\"line\">│          logs.wxml  //视图层，小程序页面承载内容的地方</div><div class=\"line\">│          logs.wxss  //小程序页面样式，向上覆盖</div><div class=\"line\">│</div><div class=\"line\">└─utils</div><div class=\"line\">        util.js  //自定义公共函数，文件夹和文件的名字随意</div></pre></td></tr></table></figure></p>\n<p>一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。<br>小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。<br><strong>可以看到小程序的文件结构非常的简单，我们学习它也很容易</strong></p>\n<h1 id=\"权限获取\"><a href=\"#权限获取\" class=\"headerlink\" title=\"权限获取\"></a>权限获取</h1><p>权限获取分两个方面，一个是根目录下app.json的权限获取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性\t\t\t类型\t\t\t必填\t描述</div><div class=\"line\">pages\t\t\tString Array\t\t是\t设置页面路径</div><div class=\"line\">window\t\t\tObject\t\t\t否\t设置默认页面的窗口表现</div><div class=\"line\">tabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现</div><div class=\"line\">networkTimeout\t\tObject\t\t\t否\t设置网络超时时间</div><div class=\"line\">debug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式</div></pre></td></tr></table></figure></p>\n<p>其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。</p>\n<h1 id=\"视图层组件\"><a href=\"#视图层组件\" class=\"headerlink\" title=\"视图层组件\"></a>视图层组件</h1><p>小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。<br>例如&lt;image&gt;必须有对应的&lt;/image&gt;，而且大小写敏感，写成&lt;/Image&gt;是不可以的。<br>页面标签我总结了一下从功能上可以分为三类<br>第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;view&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //直接使用在js的data下声明的数据</div><div class=\"line\"></div><div class=\"line\">// pages/test/test.js</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    testData:&apos;hello world!&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ···省略</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu1.png\" alt=\"微信小程序\"><br>承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;view bindtap=&quot;testtap&quot;&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //绑定testtap函数</div><div class=\"line\"></div><div class=\"line\">// pages/test/test.js</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    testData:&apos;hello world!&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  testtap:function(event)&#123;  //点击时执行的函数</div><div class=\"line\">    wx.showToast(&#123;</div><div class=\"line\">      title: &apos;hello world&apos;,</div><div class=\"line\">      icon: &apos;success&apos;,</div><div class=\"line\">      duration: 2000</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ···</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu2.gif\" alt=\"微信小程序\"></p>\n<p>第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;1&quot; range=&quot;&#123;&#123;pickerData&#125;&#125;&quot;&gt;</div><div class=\"line\">    &lt;view class=&quot;picker&quot;&gt;</div><div class=\"line\">        选择</div><div class=\"line\">    &lt;/view&gt;</div><div class=\"line\">&lt;/picker&gt;</div><div class=\"line\"></div><div class=\"line\">// pages/test/test.js</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    testData:&apos;hello world!&apos;,</div><div class=\"line\">    pickerData:[1,2,3]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  bindPickerChange: function(event)&#123;</div><div class=\"line\">    console.log(&apos;test&apos;)</div><div class=\"line\">  &#125;···</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu3.gif\" alt=\"微信小程序\"></p>\n<p>第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// templete/test.wxml</div><div class=\"line\">&lt;template name=&quot;test&quot;&gt;</div><div class=\"line\">  &lt;text&gt;&#123;&#123;number&#125;&#125;&lt;/text&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure></p>\n<p>我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;import src=&quot;../templete/test.wxml&quot;/&gt;</div><div class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;1&apos;&#125;&#125;&quot;/&gt;</div><div class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;2&apos;&#125;&#125;&quot;/&gt;</div><div class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;3&apos;&#125;&#125;&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu4.png\" alt=\"微信小程序\"><br><strong>是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方</strong></p>\n<h1 id=\"逻辑层\"><a href=\"#逻辑层\" class=\"headerlink\" title=\"逻辑层\"></a>逻辑层</h1><p>逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。<br>每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量</p>\n<h2 id=\"注册程序\"><a href=\"#注册程序\" class=\"headerlink\" title=\"注册程序\"></a>注册程序</h2><p>程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">App(&#123;</div><div class=\"line\">  onLaunch: function() &#123;</div><div class=\"line\">    // Do something initial when launch.</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onShow: function() &#123;</div><div class=\"line\">      // Do something when show.</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onHide: function() &#123;</div><div class=\"line\">      // Do something when hide.</div><div class=\"line\">  &#125;,</div><div class=\"line\">  globalData: &apos;I am global data&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"注册页面\"><a href=\"#注册页面\" class=\"headerlink\" title=\"注册页面\"></a>注册页面</h2><p>页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。<br>onLoad为生命周期函数，页面加载是触发<br>onReady为生命周期函数，页面初次渲染完成时触发<br>onShow为生命周期函数，监听页面显示时触发<br>onHide为生命周期函数，监听页面隐藏时触发<br>onUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)<br>onPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发<br>onReachBottom为页面相关事件处理函数，页面上拉触底时触发<br>补一张官方给出的页面生命周期图<br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122\" alt=\"微信小程序\"></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位<br>一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素<br>一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。<br>在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用<strong>@import “common.wxss”</strong>导入其他文件，app.wcss默认给所有页面导入进去。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。</p>\n","excerpt":"<p>一个月前微信小程序火爆朋友圈，当时我对这个并不是很感兴趣，现在公司需要开发这个，花了一天的时间，把微信的文档看了个大概，看到了很多技术和工具的影子，其实微信小程序不是什么新鲜的东西，都是我们平常学习过的东西。<br>","more":"</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>微信小程序可以通过微信获取到两个方面信息和权限，一个是手机使用者的手机信息和权限，一个是获取其微信用户的信息。而第一个是安装微信时获取到的权限，小程序就是通过调用微信的接口获取手机信息和权限，而第二个则是微信自带的功能。所以小程序对于微信来说，就像插件对于chrome浏览器一样，从配置上，这二者也有异曲同工之处。<br>小程序与插件相比，其创新程度在于两点：小程序的页面核心是一个响应的数据绑定系统，视图层WXML文件是一种类似xml语法的文件，主要承载页面的渲染显示，逻辑层js文件为视图层主要提供数据和行为。小程序的第二个创新之处在于为小程序以及其页面提供了生命周期函数，当用户加载小程序，退出小程序，加载页面销毁页面时都会有对应的生命周期函数可以贡开发者使用。<br>下面就开始说一说小程序的基本内容</p>\n<h1 id=\"文档地址\"><a href=\"#文档地址\" class=\"headerlink\" title=\"文档地址\"></a>文档地址</h1><p>微信小程序的文档写得非常的完美，主要从结构、页面组件、权限接口三个方面诠释了小程序的主要内容，其文档地址大家可以点击<strong><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/MINA.html?t=20161122\">这里</a></strong>访问。</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p>首先看一眼一个基础小程序的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\TEST</div><div class=\"line\">│  app.js  //入口函数，程序生命周期函数声明的地方</div><div class=\"line\">│  app.json  //全局配置，程序声明获取权限的地方</div><div class=\"line\">│  app.wxss  //全局样式，程序定义公共样式的地方</div><div class=\"line\">│</div><div class=\"line\">├─pages</div><div class=\"line\">│  ├─index</div><div class=\"line\">│  │      index.js</div><div class=\"line\">│  │      index.wxml</div><div class=\"line\">│  │      index.wxss</div><div class=\"line\">│  │</div><div class=\"line\">│  └─logs</div><div class=\"line\">│          logs.js  //逻辑层代码，包含小程序数据和行为</div><div class=\"line\">│          logs.json  //小程序声明获取权限的地方，只能获取部分权限(window)，向上覆盖全局配置</div><div class=\"line\">│          logs.wxml  //视图层，小程序页面承载内容的地方</div><div class=\"line\">│          logs.wxss  //小程序页面样式，向上覆盖</div><div class=\"line\">│</div><div class=\"line\">└─utils</div><div class=\"line\">        util.js  //自定义公共函数，文件夹和文件的名字随意</div></pre></td></tr></table></figure></p>\n<p>一个小程序的整个目录结构差不多就是这样，根目录下的app.js为小程序的入口函数，页面的声明通过app.json来实现，小程序要获取用户的各种信息和权限需要通过这里声明，同时小页面包含的所有页面也需要在这里声明。<br>小程序目录结构的第二个重点是页面下的文件，一般页面下需要包含.js .json .wxml .wxss这四类文件，文件名与文件夹名同名，相关功能已经在注释中说明，不在赘述。<br><strong>可以看到小程序的文件结构非常的简单，我们学习它也很容易</strong></p>\n<h1 id=\"权限获取\"><a href=\"#权限获取\" class=\"headerlink\" title=\"权限获取\"></a>权限获取</h1><p>权限获取分两个方面，一个是根目录下app.json的权限获取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性\t\t\t类型\t\t\t必填\t描述</div><div class=\"line\">pages\t\t\tString Array\t\t是\t设置页面路径</div><div class=\"line\">window\t\t\tObject\t\t\t否\t设置默认页面的窗口表现</div><div class=\"line\">tabBar\t\t\tObject\t\t\t否\t设置底部 tab 的表现</div><div class=\"line\">networkTimeout\t\tObject\t\t\t否\t设置网络超时时间</div><div class=\"line\">debug\t\t\tBoolean\t\t\t否\t设置是否开启 debug 模式</div></pre></td></tr></table></figure></p>\n<p>其中window是定义小程序页面的默认设置，如果页面中没有json配置文件或者json配置文件声明的没有覆盖声明对应的权限，则使用默认app.json下的配置，页面下的json文件只能覆盖window属性的权限。</p>\n<h1 id=\"视图层组件\"><a href=\"#视图层组件\" class=\"headerlink\" title=\"视图层组件\"></a>视图层组件</h1><p>小程序的页面wxml文件使用的是一个类似xml语法的文件，每一个标签都有其对应的闭合标签(templete标签和import标签和include标签除外)，全部都是小写。<br>例如&lt;image&gt;必须有对应的&lt;/image&gt;，而且大小写敏感，写成&lt;/Image&gt;是不可以的。<br>页面标签我总结了一下从功能上可以分为三类<br>第一类是普通的视图容器view和block，这两类都是识图容器一类，在页面中主要作用是分割页面内容，并且和其他标签一样，可以承载数据和渲染逻辑。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;view&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //直接使用在js的data下声明的数据</div><div class=\"line\"></div><div class=\"line\">// pages/test/test.js</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    testData:&apos;hello world!&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ···省略</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu1.png\" alt=\"微信小程序\"><br>承载行为注意通过bindtap或者catchtap来实现，这两种区别稍后在说明，现在用bindtap举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;view bindtap=&quot;testtap&quot;&gt;&#123;&#123;testData&#125;&#125;&lt;/view&gt;  //绑定testtap函数</div><div class=\"line\"></div><div class=\"line\">// pages/test/test.js</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    testData:&apos;hello world!&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  testtap:function(event)&#123;  //点击时执行的函数</div><div class=\"line\">    wx.showToast(&#123;</div><div class=\"line\">      title: &apos;hello world&apos;,</div><div class=\"line\">      icon: &apos;success&apos;,</div><div class=\"line\">      duration: 2000</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ···</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu2.gif\" alt=\"微信小程序\"></p>\n<p>第二类则是小程序内置的标签，这些标签功能多而且强大，下面就拿标签picker举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;1&quot; range=&quot;&#123;&#123;pickerData&#125;&#125;&quot;&gt;</div><div class=\"line\">    &lt;view class=&quot;picker&quot;&gt;</div><div class=\"line\">        选择</div><div class=\"line\">    &lt;/view&gt;</div><div class=\"line\">&lt;/picker&gt;</div><div class=\"line\"></div><div class=\"line\">// pages/test/test.js</div><div class=\"line\">Page(&#123;</div><div class=\"line\">  data:&#123;</div><div class=\"line\">    testData:&apos;hello world!&apos;,</div><div class=\"line\">    pickerData:[1,2,3]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  bindPickerChange: function(event)&#123;</div><div class=\"line\">    console.log(&apos;test&apos;)</div><div class=\"line\">  &#125;···</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu3.gif\" alt=\"微信小程序\"></p>\n<p>第三类则是模版标签，即templete标签，为了便于管理，我们需要在根目录下新建一个templete文件夹，在文件夹内新建我们的模版文件，文件名自定义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// templete/test.wxml</div><div class=\"line\">&lt;template name=&quot;test&quot;&gt;</div><div class=\"line\">  &lt;text&gt;&#123;&#123;number&#125;&#125;&lt;/text&gt;</div><div class=\"line\">&lt;/template&gt;</div></pre></td></tr></table></figure></p>\n<p>我们需要为标签添加一个name属性(在所有的模版文件中，name属性最好不一样)，里面写好我们所需要的内容，在需要使用模版的文件中使用import来引入，文件中通过is属性来使用，data属性来填入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// pages/test/test.wxml</div><div class=\"line\">&lt;import src=&quot;../templete/test.wxml&quot;/&gt;</div><div class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;1&apos;&#125;&#125;&quot;/&gt;</div><div class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;2&apos;&#125;&#125;&quot;/&gt;</div><div class=\"line\">&lt;template is=&quot;test&quot; data=&quot;&#123;&#123;number: &apos;3&apos;&#125;&#125;&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果图<br><img src=\"/images/weixinxiaochenxu/weixinxiaochenxu4.png\" alt=\"微信小程序\"><br><strong>是不是感觉似曾相识？没错，开发过vue的同学有福了，其实小程序页面的开发逻辑和vue有很多相似的地方</strong></p>\n<h1 id=\"逻辑层\"><a href=\"#逻辑层\" class=\"headerlink\" title=\"逻辑层\"></a>逻辑层</h1><p>逻辑层开发需要先注册，注册有程序注册，即在app.js里面用App()方法，还有页面注册，即在页面文件js中用Page()方法。<br>每个页面都有独立的作用域，小程序提供getApp 和 getCurrentPages 方法，分别用来获取 App 实例和当前页面栈，getCurrentPages只能在页面中使用，getApp哪里都能用，主要用来设置和读取全局变量</p>\n<h2 id=\"注册程序\"><a href=\"#注册程序\" class=\"headerlink\" title=\"注册程序\"></a>注册程序</h2><p>程序通过app.js来注册，提供三个周期函数，onLunch当初始化完成启动小程序的时候，onShow当小程序从后台进入页面的时候，onHide从前台进入后台的时候。开发者可以在App()中定义其他的属性和方法，作为全局作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">App(&#123;</div><div class=\"line\">  onLaunch: function() &#123;</div><div class=\"line\">    // Do something initial when launch.</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onShow: function() &#123;</div><div class=\"line\">      // Do something when show.</div><div class=\"line\">  &#125;,</div><div class=\"line\">  onHide: function() &#123;</div><div class=\"line\">      // Do something when hide.</div><div class=\"line\">  &#125;,</div><div class=\"line\">  globalData: &apos;I am global data&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"注册页面\"><a href=\"#注册页面\" class=\"headerlink\" title=\"注册页面\"></a>注册页面</h2><p>页面通过在app.json下指定的文件名的js文件来注册，提供一个默认属性和七个周期函数，默认属性data，为页面提供初始化数据，wxml渲染页面时提供数据。<br>onLoad为生命周期函数，页面加载是触发<br>onReady为生命周期函数，页面初次渲染完成时触发<br>onShow为生命周期函数，监听页面显示时触发<br>onHide为生命周期函数，监听页面隐藏时触发<br>onUnload为生命周期函数，监听页面卸载(关闭这个页面或者重定向页面时候触发)<br>onPullDownRefresh为页面相关事件处理函数，用户下拉动作时触发<br>onReachBottom为页面相关事件处理函数，页面上拉触底时触发<br>补一张官方给出的页面生命周期图<br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=20161122\" alt=\"微信小程序\"></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>样式在前面有提及过，这里要特别指出的是，小程序的样式文件wxss具有大部分css的特性，在尺寸单位上小程序扩展了两个单位<br>一个是rpx，可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素<br>一个是rem，规定屏幕宽度为20rem；1rem = (750/20)rpx 。<br>在样式导入上，支持css的内联样式，样式文件与识图文件名相同默认导入进去，在样式文件中可以使用<strong>@import “common.wxss”</strong>导入其他文件，app.wcss默认给所有页面导入进去。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>在小程序中，因为是在JsCore中运行，所以不存在window或者globle这样的对象，所以很多js库不能直接引入进去，只要里面使用了window这样的对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>小程序的开发思路和chrome插件的开发思路有很多相似之处，页面的构建和vue很相似，目前来说小程序没有引入更多复杂的概念，文章剩下没有讲过的东西大多数都是一些api函数，需要时查一下调用一下即可，总体感觉文章说的有一点混乱，读者有意见可以在下面提出，我会及时修正，以后我也会优化这篇文章，在不久我还会出第二篇小程序的实践文章，点击文章下面的微信小程序标签就可以看到所有有关微信小程序的文章，或者订阅rss也可以。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cixl3m87v00076wawmrozp97h","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m87v000c6waw05c8evud"},{"post_id":"cixl3m87f00006waw0sc7cmxn","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88a000g6wawfrcy6e16"},{"post_id":"cixl3m87v00086wawwls1p8rk","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88a000i6waw0umf2b3t"},{"post_id":"cixl3m87f00026waw1jcbwihb","category_id":"cixl3m87v00096wawxf2sf86x","_id":"cixl3m88a000l6wawmdbopljg"},{"post_id":"cixl3m87v000d6wawjk7rzrcn","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88a000o6waw4w1x43vf"},{"post_id":"cixl3m88a000h6waw9p3vo5me","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88a000r6waw1qg6p7op"},{"post_id":"cixl3m87v00066waw18w2ixrh","category_id":"cixl3m87v00096wawxf2sf86x","_id":"cixl3m88q000v6waw41wuwqbl"},{"post_id":"cixl3m88a000j6waw1krplm7l","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88q000x6wawttlr0f0m"},{"post_id":"cixl3m88a000m6wawkp72e27y","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88q000z6wawr5inhtnh"},{"post_id":"cixl3m88a000p6waw2uzkk62m","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88q00106waww8an0juw"},{"post_id":"cixl3m88a000t6wawvxxjqwvm","category_id":"cixl3m87f00046waw990exaik","_id":"cixl3m88q00126wawmkopxr9g"}],"PostTag":[{"post_id":"cixl3m87f00006waw0sc7cmxn","tag_id":"cixl3m87v00056wawqynw1oay","_id":"cixl3m88a000n6wawkrfg45l2"},{"post_id":"cixl3m87f00006waw0sc7cmxn","tag_id":"cixl3m87v000a6wawgx3xyoe5","_id":"cixl3m88a000q6wawwkc8ku7d"},{"post_id":"cixl3m87f00006waw0sc7cmxn","tag_id":"cixl3m88a000f6waws0i9d504","_id":"cixl3m88q000u6waw9xezdk0i"},{"post_id":"cixl3m87f00026waw1jcbwihb","tag_id":"cixl3m88a000k6wawdiqylegg","_id":"cixl3m88q000w6wawtdcfviom"},{"post_id":"cixl3m87v00066waw18w2ixrh","tag_id":"cixl3m88a000s6wawk72k3ts7","_id":"cixl3m88q00146wawoz15hsew"},{"post_id":"cixl3m87v00066waw18w2ixrh","tag_id":"cixl3m88q000y6waw1h1cv40y","_id":"cixl3m88q00156wawjo0t42c0"},{"post_id":"cixl3m87v00066waw18w2ixrh","tag_id":"cixl3m88q00116wawgnq265nh","_id":"cixl3m88q00176wawtj4j9gzh"},{"post_id":"cixl3m87v00076wawmrozp97h","tag_id":"cixl3m88q00136wawvgqemikm","_id":"cixl3m88q001b6wawxwt0qhlp"},{"post_id":"cixl3m87v00076wawmrozp97h","tag_id":"cixl3m88q00166wawqeew3rc9","_id":"cixl3m88q001c6wawmjj34wqc"},{"post_id":"cixl3m87v00076wawmrozp97h","tag_id":"cixl3m88q00186wawrwn6ihs7","_id":"cixl3m88q001e6wawfkd0qsv6"},{"post_id":"cixl3m87v00076wawmrozp97h","tag_id":"cixl3m88q00196wawjj43m4a2","_id":"cixl3m88q001f6wawavhwoblv"},{"post_id":"cixl3m87v00086wawwls1p8rk","tag_id":"cixl3m88q001a6wawyviu08m9","_id":"cixl3m88q001h6wawkxns4nep"},{"post_id":"cixl3m87v000d6wawjk7rzrcn","tag_id":"cixl3m88q001d6wawlwp47net","_id":"cixl3m88q001i6waw0ll26qg0"},{"post_id":"cixl3m88a000h6waw9p3vo5me","tag_id":"cixl3m88q001d6wawlwp47net","_id":"cixl3m88q001k6waw05mwj5jg"},{"post_id":"cixl3m88a000j6waw1krplm7l","tag_id":"cixl3m88q001j6wawnfzfg835","_id":"cixl3m88q001n6waw1j9hsti5"},{"post_id":"cixl3m88a000j6waw1krplm7l","tag_id":"cixl3m88q001l6wawqt6bgfat","_id":"cixl3m88q001o6wawp1riiask"},{"post_id":"cixl3m88a000m6wawkp72e27y","tag_id":"cixl3m88q001m6waw67ajgk1g","_id":"cixl3m88q001r6wawkgktfh1f"},{"post_id":"cixl3m88a000m6wawkp72e27y","tag_id":"cixl3m88q001p6waw4nzw8zzj","_id":"cixl3m88q001s6wawmfao6dv3"},{"post_id":"cixl3m88a000p6waw2uzkk62m","tag_id":"cixl3m88q001q6waw9doeo9ea","_id":"cixl3m88q001u6waweh43u7yx"},{"post_id":"cixl3m88a000t6wawvxxjqwvm","tag_id":"cixl3m88q001t6wawue5uxueb","_id":"cixl3m88q001v6waww2a1h3d9"}],"Tag":[{"name":"js","_id":"cixl3m87v00056wawqynw1oay"},{"name":"继承","_id":"cixl3m87v000a6wawgx3xyoe5"},{"name":"面向对象","_id":"cixl3m88a000f6waws0i9d504"},{"name":"hosts","_id":"cixl3m88a000k6wawdiqylegg"},{"name":"爬虫","_id":"cixl3m88a000s6wawk72k3ts7"},{"name":"chrome应用","_id":"cixl3m88q000y6waw1h1cv40y"},{"name":"测试","_id":"cixl3m88q00116wawgnq265nh"},{"name":"数组","_id":"cixl3m88q00136wawvgqemikm"},{"name":"Math","_id":"cixl3m88q00166wawqeew3rc9"},{"name":"函数式编程","_id":"cixl3m88q00186wawrwn6ihs7"},{"name":"原型链","_id":"cixl3m88q00196wawjj43m4a2"},{"name":"js动画","_id":"cixl3m88q001a6wawyviu08m9"},{"name":"随想","_id":"cixl3m88q001d6wawlwp47net"},{"name":"模式设计","_id":"cixl3m88q001j6wawnfzfg835"},{"name":"读书笔记","_id":"cixl3m88q001l6wawqt6bgfat"},{"name":"impress","_id":"cixl3m88q001m6waw67ajgk1g"},{"name":"js框架","_id":"cixl3m88q001p6waw4nzw8zzj"},{"name":"ES6","_id":"cixl3m88q001q6waw9doeo9ea"},{"name":"微信小程序","_id":"cixl3m88q001t6wawue5uxueb"}]}}